{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-Aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/about.md","hash":"e5dfef605d914e3943a6a626b799ee693de4d67c","modified":1648203964032},{"_id":"source/_posts/test.md","hash":"f302c04aeb9acef04198d1643d06018ffc1ba3b1","modified":1648435801257},{"_id":"source/_posts/TypeScript.md","hash":"15af9b4c749a7c93492458506cb31a3e5b849e36","modified":1648392931495},{"_id":"node_modules/hexo-theme-Aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/package.json","hash":"c07e4345b5e6c3e766554592a4f8d6dd2afcbe78","modified":1648182271020},{"_id":"node_modules/hexo-theme-Aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":499162500000},{"_id":"public/api/posts/1.json","hash":"f716132d14677e73375921646d05062ceb221d16","modified":1648442124843},{"_id":"public/api/articles/test.json","hash":"119e2a9c9346a5fb2cc8b894390e905097c2550a","modified":1648436270900},{"_id":"public/api/articles/TypeScript.json","hash":"a7fc70d47d071534f9025d7430c944219eb50e5f","modified":1648442124843},{"_id":"public/api/articles/about.json","hash":"7b5110ab194a997d554d63d6f4e33e998dc58d34","modified":1648442124843},{"_id":"public/api/features.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1648442124843},{"_id":"public/api/authors/blog-author.json","hash":"9ee3cf40594273308e7040477005dfe90e295d79","modified":1648442124843},{"_id":"public/api/site.json","hash":"a367f044e7c7426998810e760e5c383da462dcb5","modified":1648442124843},{"_id":"public/api/categories.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1648442124843},{"_id":"public/api/tags.json","hash":"1267fa6043bf572b55277ab2a24d68137c72dc02","modified":1648442124843},{"_id":"public/api/tags/code.json","hash":"61b0a31280a12ad8f5610319cbc601bb1a7193fa","modified":1648442124843},{"_id":"public/api/tags/工作.json","hash":"982cf3775aa9a988afacbcdac3952c81ecb8975c","modified":1648442124843},{"_id":"public/api/statistic.json","hash":"c0d77a412f6996ce9c6975c9f1b56924add2912a","modified":1648442124843},{"_id":"public/api/search.json","hash":"cae8c8caeed960631b640bba941145ceffc47711","modified":1648442124843},{"_id":"public/post/test.html","hash":"a0b1cef115ed141d801ac248bc9b68feb8b902ba","modified":1648436270900},{"_id":"public/post/TypeScript.html","hash":"a0b1cef115ed141d801ac248bc9b68feb8b902ba","modified":1648442124843},{"_id":"public/post/about.html","hash":"a0b1cef115ed141d801ac248bc9b68feb8b902ba","modified":1648442124843},{"_id":"public/index.html","hash":"a0b1cef115ed141d801ac248bc9b68feb8b902ba","modified":1648442124843},{"_id":"public/tags/index.html","hash":"a0b1cef115ed141d801ac248bc9b68feb8b902ba","modified":1648442124843},{"_id":"public/archives/index.html","hash":"a0b1cef115ed141d801ac248bc9b68feb8b902ba","modified":1648442124843},{"_id":"public/tags/search/index.html","hash":"a0b1cef115ed141d801ac248bc9b68feb8b902ba","modified":1648442124843},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1648442124843},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1648442124843},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1648442124843},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1648442124843},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1648442124843},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1648442124843},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1648442124843},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1648442124843},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1648442124843},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1648442124843},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1648442124843},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1648442124843},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1648442124843},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1648442124843},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1648442124843},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1648442124843},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1648442124843},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1648442124843},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1648442124843},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1648442124843},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1648442124843},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1648442124843},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1648442124843},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1648442124843}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"TypeScript","date":"2022-03-27T13:02:26.000Z","_content":"\n\n\n\n# TypeScript\n`TypeScript`是由微软推出并推动的一个静态类型检查的编译型编程语言，可以完美兼容ES6的`JavaScript`。目前大量前端库和应用使用`TS`开发，已然成为前端的主流开发语言。\n\n## 优势\n* 静态编译，减少`JS`动态语言特性带来了的非常多的隐藏bug\n* 类型安全检查在编译阶段完成\n* 大型项目的更好的进行管理和向后约定维护\n* 为前端的彻底的静态安全的类型检查、类型继承、抽象设计体系铺好了基石\n* 更加友好的智能提示和文档说明\n\n## \t安装TypeScript\n有两种主要的方式来获取`TypeScript`工具\n\n* 通过`npm`安装\n\n\t`npm install -g typescript`\n* 安装Visual Studio的`TypeScript`插件\n\n\n## 编译代码\n\n\n启动编译后，可以添加`-w`参数，让编译工具一直监听文件的变化，`ts`文件变化后自动编译。\n\n\ttsc -w tyDemon.ts\n\t\tor\n\ttsc --watch tyDemon.ts\n\n编译多个`ts`文件\n\n* 编译当前目录下的所有的`ts`文件\n\n\t\ttsc -w *.ts\n\n*  编译当前目录及子目录的`ts`文件\n\n\t\ttsc -w ./**/*.ts\n\t\n\n## 数据类型\n### 布尔值\n最基本的数据类型就是简单的`true`/`false`值，在`JavaScript`和`TypeScript`里叫做`boolean`\n\n```javascript\n\tlet isDone: boolean = false; \n\t// 冒号后面是对当前变量类型的声明，isDone只能赋值布尔类型值，否则会编译失败。\n```\n\n### 数字\n和`JavaScript`一样，`TypeScript`里的所有数字都是浮点数。 这些浮点数的类型是 `number`。 除了支持十进制和十六进制字面量，`TypeScript`还支持`ES5`中引入的二进制和八进制字面量\n\n```javascript\nlet num1: number = 6;\nlet num2: number = 0xf00d;\nlet num3: number = 0b1010;\nlet num4: number = 0o744;\n```\n\n### 字符串\n`JavaScript`程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 `string`表示文本数据类型。 和`JavaScript`一样，可以使用双引号`\"`或单引号`'`表示字符串\n\n```javascript\n\tlet name: string = \"bob\";\n\tname = \"smith\";\n```\n\n### 数组\n`TypeScript`像`JavaScript`一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 `[]`，表示由此类型元素组成的一个数组\n\n```javascript\n\tlet list: number[] = [1, 2, 3];\n\tlet list: Array<number> = [1, 2, 3];\n```\n### 元祖\n元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 `string`和`number`类型的元组。\n\n```javascript\n\tlet x: [string, number];\n\tx = ['hello', 10]; // OK\n\tx = [10, 'hello']; // Error\n```\n\n### any\n有时候，会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 `any`类型来标记这些变量\n\n```javascript\n\tlet any1: any = 4;\n\tany1 = \"maybe a string instead\";\n\tany2 = false; \n```\n\n### void\n它表示没有任何类型。 当一个函数没有返回值时，会见到其返回值类型是`void`\n\n```javascript\n\tfunction fn(): void {\n    console.log(\"This is message\");\n\t}\n```\n\n声明`void`变量只能给其赋值为`null`, `undefined`\n\n```javascript\n\tlet void1: void = undefined;\n```\n\n### Null 和 Undefined\n`undefined`和`null`两者各自有自己的类型分别叫做`undefined`和`null`。 和 `void`相似。\n\n```javascript\n\tlet u: undefined = undefined;\n\tlet n: null = null;\n```\n\n### Object\n`object`表示非原始类型，也就是除`number`，`string`，`boolean`，`symbol`，`null`或`undefined`之外的类型。\n\n```javascript\n\tdeclare function create(o: object | null): void;\n\n\tcreate({ prop: 0 }); // OK\n\tcreate(null); // OK\n\n\tcreate(42); // Error\n\tcreate(\"string\"); // Error\n\tcreate(false); // Error\n\tcreate(undefined); // Error\n```\n\n### 枚举\n`enum`类型是对`JavaScript`标准数据类型的一个补充。 像`C#`等其它语言一样，使用枚举类型可以为一组数值赋予名字。\n\n```javascript\n\tenum Color {Red, Green, Blue}\n\tlet c: Color = Color.Green;\n```\n默认情况下，从0开始为元素编号。 也可以手动的指定成员的数值。 例如，将上面的例子改成从 1开始编号：\n\n```javascript\n\tenum Color {Red = 1, Green, Blue}\n\tlet c: Color = Color.Green;\n```\n\t\n枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到`Color`里的哪个名字，可以查找相应的名字\n\n```javascript\n\tenum Color {Red = 1, Green, Blue}\n\tlet colorName: string = Color[2];\n\n\tconsole.log(colorName);  // 显示'Green'因为上面代码里它的值是2\n```\n\t\n\t\n### 函数\n#### 函数的声明\n 一个函数有输入和输出，要在 `TypeScript` 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单\n \n ```javascript\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n输入多余的（或者少于要求的）参数，是不被允许的\n\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n\tsum(1, 2, 3);\n\t\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n\tsum(1);\n```\n\n#### 函数表达式\n如果要现在写一个对函数表达式的定义，可能会写成这样\n\n```javascript\n\tlet mySum = function (x: number, y: number): number {\n    return x + y;\n\t};\n```\n这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 `mySum`，是通过赋值操作进行类型推论而推断出来的。如果需要手动给 `mySum` 添加类型，则应该是这样：\n\n```javascript\n\tlet mySum: (x: number, y: number) => number = function (x: number, y: number): number {\n    return x + y;\n\t};\n```\n注意不要混淆了 `TypeScript` 中的 `=>` 和 `ES6` 中的 `=>`。\n\n在 `TypeScript` 的类型定义中，`=>` 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。\n\n在 ES6 中，=> 叫做箭头函数，应用十分广泛\n#### 用接口定义函数的形状\n也可以使用接口的方式来定义一个函数需要符合的形状：\n\n```javascript\n\tinterface SearchFunc {\n    (source: string, subString: string): boolean;\n\t}\n\n\tlet mySearch: SearchFunc;\n\tmySearch = function(source: string, subString: string) {\n    return source.search(subString) !== -1;\n\t}\n```\n#### 可选参数\n输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？\n\n与接口中的可选属性类似，我们用 `?` 表示可选的参数：\n\n```javascript\n\tfunction buildName(firstName: string, lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName('Tom');\n```\n需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了\n\n```javascript\n\tfunction buildName(firstName?: string, lastName: string) {\n    if (firstName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return lastName;\n    }\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName(undefined, 'Tom');\n```\n#### 参数默认值\n在 ES6 中，允许给函数的参数添加默认值，`TypeScript` 会将添加了默认值的参数识别为可选参数：\n\n```javascript\n\tfunction buildName(firstName: string, lastName: string = 'Cat') {\n    return firstName + ' ' + lastName;\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName('Tom');\n此时就不受「可选参数必须接在必需参数后面」的限制了：\n\n\tfunction buildName(firstName: string = 'Tom', lastName: string) {\n    return firstName + ' ' + lastName;\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet cat = buildName(undefined, 'Cat');\n```\n\n#### 剩余参数\nES6 中，可以使用 `...rest` 的方式获取函数中的剩余参数（rest 参数）：\n\n```javascript\n\tfunction push(array, ...items) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n\t}\n\n\tlet a = [];\n\tpush(a, 1, 2, 3);\n```\n\n事实上，`items` 是一个数组。所以可以用数组的类型来定义它：\n\n```javascript\n\tfunction push(array: any[], ...items: any[]) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n\t}\n\n\tlet a = [];\n\tpush(a, 1, 2, 3);\n```\n注意，rest 参数只能是最后一个参数\n\n#### 重载\n重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。\n\n比如，需要实现一个函数 `reverse`，输入数字 `123` 的时候，输出反转的数字 `321`，输入字符串 `'hello'` 的时候，输出反转的字符串 `'olleh'`。\n\n利用联合类型，可以这么实现：\n\n```javascript\n\t\tfunction reverse(x: number | string): number | string {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n\t}\n```\n然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。\n\n这时，可以使用重载定义多个 `reverse` 的函数类型：\n\n```javascript\n\t\tfunction reverse(x: number): number;\n\t\tfunction reverse(x: string): string;\n\t\tfunction reverse(x: number | string): number | string {\n\t\t    if (typeof x === 'number') {\n       \t\t return Number(x.toString().split('').reverse().join(''));\n\t\t    } else if (typeof x === 'string') {\n       \t\t return x.split('').reverse().join('');\n\t\t    }\n\t\t}\n```\n上例中，重复定义了多次函数 `reverse`，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。\n\n注意，`TypeScript` 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。\n\n\t\n## 对象的类型——接口\n在 `TypeScript` 中，使用接口来定义对象的类型。\n\n在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。\n\n`TypeScript` 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状」进行描述。\n\n### 简单的例子\n\n```javascript\n\t\tinterface Person {\n\t    name: string;\n\t\tage: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\tname: 'Tom',\n\t\tage: 25\n\t\t};\n```\t\n定义了一个接口 Person，接着定义了一个变量 tom\n\n它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致\n\n接口一般首字母大写\n\n定义的变量比接口少了、多了一些一些属性是不允许的：\n\n```javascript\n\tinterface Person {\n\t\tname: string;\n\t\tage: number;\n\t}\n\n\tlet tom: Person = {\n\t    name: 'Tom'\n\t};\n\n\t// index.ts(6,5): error TS2322: Type '{ name: string; }' is not assignable to type 'Person'.\n\t//   Property 'age' is missing in type '{ name: string; }'.\n\t\n\t\tinterface Person {\n\t    name: string;\n\t    age: number;\n\t\t}\n\n\tlet tom: Person = {\n\t\tname: 'Tom',\n\t   \tage: 25,\n\t\tgender: 'male'\n\t};\n\n\t// index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is \tnot assignable to type 'Person'.\n\t//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.\n```\n### 可选属性\n\n有时希望不要完全匹配一个形状，那么可以用可选属性\n\n```javascript\n\t\tinterface Person {\n\t\t\tname: string;\n\t\t   \tage?: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\t    name: 'Tom'\n\t\t};\n\t\t\n\t\tnterface Person {\n\t\t    name: string;\n\t\t    age?: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\t    name: 'Tom',\n\t\t    age: 25\n\t\t};\n```\n\n这时仍然不允许添加未定义的属性\n\n```javascript\n\tinterface Person {\n    \tname: string;\n\t   \tage?: number;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   age: 25,\n\t   gender: 'male'\n\t};\n\n\t// examples/playground/index.ts(9,5): error TS2322: Type '{ name: string; age: number; \tgender: string; }' is not assignable to type 'Person'.\n\t//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.\n```\n### 任意属性\n有时候希望一个接口允许有任意的属性，可以使用如下方式：\n\n```javascript\n\tinterface Person {\n\t   \tname: string;\n\t\tage?: number;\n\t   [propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   gender: 'male'\n\t};\n```\n\n使用 `[propName: string]` 定义了任意属性取 `string` 类型的值。\n\n需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：\n\n```javascript\n\tinterface Person {\n    name: string;\n    age?: number;\n    [propName: string]: string;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n    \tage: 25,\n    \tgender: 'male'\n\t};\n\n\t// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string \tindex type 'string'.\n\t// index.ts(7,5): error TS2322: Type '{ [x: string]: string | number; name: string; age: \tnumber; gender: string; }' is not assignable to type 'Person'.\n\t//   Index signatures are incompatible.\n\t//     Type 'string | number' is not assignable to type 'string'.\n\t//       Type 'number' is not assignable to type 'string'.\n```\n\n上例中，任意属性的值允许是 `string`，但是可选属性 `age` 的值却是 `number`，`number` 不是 `string` 的子属性，所以报错了。\n\n另外，在报错信息中可以看出，此时 `{ name: 'Tom', age: 25, gender: 'male' }` 的类型被推断成了 `{ [x: string]: string | number; name: string; age: number; gender: string; }`，这是联合类型和接口的结合。\n\n### 只读属性\n有时候希望对象中的一些字段只能在创建的时候被赋值，那么可以用 `readonly` 定义只读属性：\n\n```javascript\n\tinterface Person {\n    \treadonly id: number;\n    \tname: string;\n    \tage?: number;\n    \t[propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tid: 89757,\n    \tname: 'Tom',\n    \tgender: 'male'\n\t};\n\n\ttom.id = 9527;\n\n\t// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property\n```\n\t\n上例中，使用 `readonly` 定义的属性 `id` 初始化后，又被赋值了，所以报错了。\n\n注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：\n\n```javascript\n\tinterface Person {\n    \treadonly id: number;\n    \tname: string;\n    \tage?: number;\n    \t[propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   gender: 'male'\n\t};\n\n\ttom.id = 89757;\n\n\t// index.ts(8,5): error TS2322: Type '{ name: string; gender: string; }' is not assignable \tto type 'Person'.\n\t//   Property 'id' is missing in type '{ name: string; gender: string; }'.\n\t// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property.\n\t\n```\n上例中，报错信息有两处，第一处是在对 `tom` 进行赋值的时候，没有给 `id` 赋值。\n\n第二处是在给 `tom.id` 赋值的时候，由于它是只读属性，所以报错了。\n\n## 类型断言\n类型断言`（Type Assertion）`可以用来手动指定一个值的类型。\n\n语法\n\n\t<类型>值\n\t\t或\n\t值 as 类型\n在 `tsx` 语法（`React` 的 `jsx` 语法的 `ts` 版）中必须用后一种。\n\n例子：将一个联合类型的变量指定为一个更加具体的类型\n\n当 `TypeScript` 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \treturn something.length;\n\t}\n\n\t// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n```\n而有时候，确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \tif (something.length) {\n        \treturn something.length;\n    \t} else {\n        \treturn something.toString().length;\n    \t}\n\t}\n\n\t// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n\t// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n```\n上例中，获取 `something.length` 的时候会报错。\n\n此时可以使用类型断言，将 `something` 断言成 `string4`：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \tif ((<string>something).length) {\n        \treturn (<string>something).length;\n    \t} else {\n        \treturn something.toString().length;\n    \t}\n\t}\n```\n类型断言的用法如上，在需要断言的变量前加上 `<Type>` 即可。\n\n类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：\n\n```javascript\n\tfunction toBoolean(something: string | number): boolean {\n    \treturn <boolean>something;\n\t}\n\n\t// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.\n\t//   Type 'number' is not comparable to type 'boolean'.\n```\n## 内置对象\n`JavaScript` 中有很多内置对象，它们可以直接在 `TypeScript` 中当做定义好了的类型。\n内置对象是指根据标准在全局作用域（`Global`）上存在的对象。这里的标准是指 `ECMAScript` 和其他环境（比如 `DOM`）的标准。\n\n### ECMAScript 的内置对象\n* Boolean\n* Error\n* Date\n* RegExp\n* ......\n\n可以在 `TypeScript` 中将变量定义为这些类型：\n\n```javascript\n\tlet b: Boolean = new Boolean(1);\n\tlet e: Error = new Error('Error occurred');\n\tlet d: Date = new Date();\n\tlet r: RegExp = /[a-z]/;\n```\n\n### DOM 和 BOM 的内置对象\n\n* Document\n* HTMLElement\n* Event\n* NodeList\n* ......\n\n`TypeScript` 中会经常用到这些类型：\n\n```javascript\n\tlet body: HTMLElement = document.body;\n\tlet allDiv: NodeList = document.querySelectorAll('div');\n\tdocument.addEventListener('click', function(e: MouseEvent) {\n\t  // Do something\n\t});\n```\n### TypeScript 核心库的定义文件\n`TypeScript` 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 `TypeScript` 中的。\n\n当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：\n\n```javascript\n\tMath.pow(10, '2');\n\n\t// index.ts(1,14): error TS2345: Argument of type 'string' is not assignable to parameter \tof type 'number'\n```\n上面的例子中，`Math.pow` 必须接受两个 `number` 类型的参数。事实上 `Math.pow` 的类型定义如下：\n\n```javascript\n\tinterface Math {\n\t\tpow(x: number, y: number): number;\n\t}\n```\n`DOM` 中的例子：\n\n```javascript\n\tdocument.addEventListener('click', function(e) {\n    \tconsole.log(e.targetCurrent);\n\t});\n\n\t// index.ts(2,17): error TS2339: Property 'targetCurrent' does not exist on type \t'MouseEvent'.\n```\n上面的例子中，`addEventListener` 方法是在 `TypeScript` 核心库中定义的：\n\n```javascript\n\tinterface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent {\n\t\taddEventListener(type: string, listener: (ev: MouseEvent) => any, useCapture?: \tboolean): void;\n\t}\n```\n\t\n所以 `e` 被推断成了 `MouseEvent`，而 `MouseEvent` 是没有 `targetCurrent` 属性的，所以报错了。\n\n注意，`TypeScript` 核心库的定义中不包含 `Node.js` 部分。\n\n`Node.js` 不是内置对象的一部分，如果想用 `TypeScript` 写 `Node.js`，则需要引入第三方声明文件：\n\n\tnpm install @types/node --save-dev\n\n\n## 未完待续...\n","source":"_posts/TypeScript.md","raw":"---\ntitle: TypeScript\ndate: 2022-03-27 21:02:26\ntags: code\n---\n\n\n\n\n# TypeScript\n`TypeScript`是由微软推出并推动的一个静态类型检查的编译型编程语言，可以完美兼容ES6的`JavaScript`。目前大量前端库和应用使用`TS`开发，已然成为前端的主流开发语言。\n\n## 优势\n* 静态编译，减少`JS`动态语言特性带来了的非常多的隐藏bug\n* 类型安全检查在编译阶段完成\n* 大型项目的更好的进行管理和向后约定维护\n* 为前端的彻底的静态安全的类型检查、类型继承、抽象设计体系铺好了基石\n* 更加友好的智能提示和文档说明\n\n## \t安装TypeScript\n有两种主要的方式来获取`TypeScript`工具\n\n* 通过`npm`安装\n\n\t`npm install -g typescript`\n* 安装Visual Studio的`TypeScript`插件\n\n\n## 编译代码\n\n\n启动编译后，可以添加`-w`参数，让编译工具一直监听文件的变化，`ts`文件变化后自动编译。\n\n\ttsc -w tyDemon.ts\n\t\tor\n\ttsc --watch tyDemon.ts\n\n编译多个`ts`文件\n\n* 编译当前目录下的所有的`ts`文件\n\n\t\ttsc -w *.ts\n\n*  编译当前目录及子目录的`ts`文件\n\n\t\ttsc -w ./**/*.ts\n\t\n\n## 数据类型\n### 布尔值\n最基本的数据类型就是简单的`true`/`false`值，在`JavaScript`和`TypeScript`里叫做`boolean`\n\n```javascript\n\tlet isDone: boolean = false; \n\t// 冒号后面是对当前变量类型的声明，isDone只能赋值布尔类型值，否则会编译失败。\n```\n\n### 数字\n和`JavaScript`一样，`TypeScript`里的所有数字都是浮点数。 这些浮点数的类型是 `number`。 除了支持十进制和十六进制字面量，`TypeScript`还支持`ES5`中引入的二进制和八进制字面量\n\n```javascript\nlet num1: number = 6;\nlet num2: number = 0xf00d;\nlet num3: number = 0b1010;\nlet num4: number = 0o744;\n```\n\n### 字符串\n`JavaScript`程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 `string`表示文本数据类型。 和`JavaScript`一样，可以使用双引号`\"`或单引号`'`表示字符串\n\n```javascript\n\tlet name: string = \"bob\";\n\tname = \"smith\";\n```\n\n### 数组\n`TypeScript`像`JavaScript`一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 `[]`，表示由此类型元素组成的一个数组\n\n```javascript\n\tlet list: number[] = [1, 2, 3];\n\tlet list: Array<number> = [1, 2, 3];\n```\n### 元祖\n元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 `string`和`number`类型的元组。\n\n```javascript\n\tlet x: [string, number];\n\tx = ['hello', 10]; // OK\n\tx = [10, 'hello']; // Error\n```\n\n### any\n有时候，会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 `any`类型来标记这些变量\n\n```javascript\n\tlet any1: any = 4;\n\tany1 = \"maybe a string instead\";\n\tany2 = false; \n```\n\n### void\n它表示没有任何类型。 当一个函数没有返回值时，会见到其返回值类型是`void`\n\n```javascript\n\tfunction fn(): void {\n    console.log(\"This is message\");\n\t}\n```\n\n声明`void`变量只能给其赋值为`null`, `undefined`\n\n```javascript\n\tlet void1: void = undefined;\n```\n\n### Null 和 Undefined\n`undefined`和`null`两者各自有自己的类型分别叫做`undefined`和`null`。 和 `void`相似。\n\n```javascript\n\tlet u: undefined = undefined;\n\tlet n: null = null;\n```\n\n### Object\n`object`表示非原始类型，也就是除`number`，`string`，`boolean`，`symbol`，`null`或`undefined`之外的类型。\n\n```javascript\n\tdeclare function create(o: object | null): void;\n\n\tcreate({ prop: 0 }); // OK\n\tcreate(null); // OK\n\n\tcreate(42); // Error\n\tcreate(\"string\"); // Error\n\tcreate(false); // Error\n\tcreate(undefined); // Error\n```\n\n### 枚举\n`enum`类型是对`JavaScript`标准数据类型的一个补充。 像`C#`等其它语言一样，使用枚举类型可以为一组数值赋予名字。\n\n```javascript\n\tenum Color {Red, Green, Blue}\n\tlet c: Color = Color.Green;\n```\n默认情况下，从0开始为元素编号。 也可以手动的指定成员的数值。 例如，将上面的例子改成从 1开始编号：\n\n```javascript\n\tenum Color {Red = 1, Green, Blue}\n\tlet c: Color = Color.Green;\n```\n\t\n枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到`Color`里的哪个名字，可以查找相应的名字\n\n```javascript\n\tenum Color {Red = 1, Green, Blue}\n\tlet colorName: string = Color[2];\n\n\tconsole.log(colorName);  // 显示'Green'因为上面代码里它的值是2\n```\n\t\n\t\n### 函数\n#### 函数的声明\n 一个函数有输入和输出，要在 `TypeScript` 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单\n \n ```javascript\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n输入多余的（或者少于要求的）参数，是不被允许的\n\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n\tsum(1, 2, 3);\n\t\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n\tsum(1);\n```\n\n#### 函数表达式\n如果要现在写一个对函数表达式的定义，可能会写成这样\n\n```javascript\n\tlet mySum = function (x: number, y: number): number {\n    return x + y;\n\t};\n```\n这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 `mySum`，是通过赋值操作进行类型推论而推断出来的。如果需要手动给 `mySum` 添加类型，则应该是这样：\n\n```javascript\n\tlet mySum: (x: number, y: number) => number = function (x: number, y: number): number {\n    return x + y;\n\t};\n```\n注意不要混淆了 `TypeScript` 中的 `=>` 和 `ES6` 中的 `=>`。\n\n在 `TypeScript` 的类型定义中，`=>` 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。\n\n在 ES6 中，=> 叫做箭头函数，应用十分广泛\n#### 用接口定义函数的形状\n也可以使用接口的方式来定义一个函数需要符合的形状：\n\n```javascript\n\tinterface SearchFunc {\n    (source: string, subString: string): boolean;\n\t}\n\n\tlet mySearch: SearchFunc;\n\tmySearch = function(source: string, subString: string) {\n    return source.search(subString) !== -1;\n\t}\n```\n#### 可选参数\n输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？\n\n与接口中的可选属性类似，我们用 `?` 表示可选的参数：\n\n```javascript\n\tfunction buildName(firstName: string, lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName('Tom');\n```\n需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了\n\n```javascript\n\tfunction buildName(firstName?: string, lastName: string) {\n    if (firstName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return lastName;\n    }\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName(undefined, 'Tom');\n```\n#### 参数默认值\n在 ES6 中，允许给函数的参数添加默认值，`TypeScript` 会将添加了默认值的参数识别为可选参数：\n\n```javascript\n\tfunction buildName(firstName: string, lastName: string = 'Cat') {\n    return firstName + ' ' + lastName;\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName('Tom');\n此时就不受「可选参数必须接在必需参数后面」的限制了：\n\n\tfunction buildName(firstName: string = 'Tom', lastName: string) {\n    return firstName + ' ' + lastName;\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet cat = buildName(undefined, 'Cat');\n```\n\n#### 剩余参数\nES6 中，可以使用 `...rest` 的方式获取函数中的剩余参数（rest 参数）：\n\n```javascript\n\tfunction push(array, ...items) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n\t}\n\n\tlet a = [];\n\tpush(a, 1, 2, 3);\n```\n\n事实上，`items` 是一个数组。所以可以用数组的类型来定义它：\n\n```javascript\n\tfunction push(array: any[], ...items: any[]) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n\t}\n\n\tlet a = [];\n\tpush(a, 1, 2, 3);\n```\n注意，rest 参数只能是最后一个参数\n\n#### 重载\n重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。\n\n比如，需要实现一个函数 `reverse`，输入数字 `123` 的时候，输出反转的数字 `321`，输入字符串 `'hello'` 的时候，输出反转的字符串 `'olleh'`。\n\n利用联合类型，可以这么实现：\n\n```javascript\n\t\tfunction reverse(x: number | string): number | string {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n\t}\n```\n然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。\n\n这时，可以使用重载定义多个 `reverse` 的函数类型：\n\n```javascript\n\t\tfunction reverse(x: number): number;\n\t\tfunction reverse(x: string): string;\n\t\tfunction reverse(x: number | string): number | string {\n\t\t    if (typeof x === 'number') {\n       \t\t return Number(x.toString().split('').reverse().join(''));\n\t\t    } else if (typeof x === 'string') {\n       \t\t return x.split('').reverse().join('');\n\t\t    }\n\t\t}\n```\n上例中，重复定义了多次函数 `reverse`，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。\n\n注意，`TypeScript` 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。\n\n\t\n## 对象的类型——接口\n在 `TypeScript` 中，使用接口来定义对象的类型。\n\n在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。\n\n`TypeScript` 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状」进行描述。\n\n### 简单的例子\n\n```javascript\n\t\tinterface Person {\n\t    name: string;\n\t\tage: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\tname: 'Tom',\n\t\tage: 25\n\t\t};\n```\t\n定义了一个接口 Person，接着定义了一个变量 tom\n\n它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致\n\n接口一般首字母大写\n\n定义的变量比接口少了、多了一些一些属性是不允许的：\n\n```javascript\n\tinterface Person {\n\t\tname: string;\n\t\tage: number;\n\t}\n\n\tlet tom: Person = {\n\t    name: 'Tom'\n\t};\n\n\t// index.ts(6,5): error TS2322: Type '{ name: string; }' is not assignable to type 'Person'.\n\t//   Property 'age' is missing in type '{ name: string; }'.\n\t\n\t\tinterface Person {\n\t    name: string;\n\t    age: number;\n\t\t}\n\n\tlet tom: Person = {\n\t\tname: 'Tom',\n\t   \tage: 25,\n\t\tgender: 'male'\n\t};\n\n\t// index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is \tnot assignable to type 'Person'.\n\t//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.\n```\n### 可选属性\n\n有时希望不要完全匹配一个形状，那么可以用可选属性\n\n```javascript\n\t\tinterface Person {\n\t\t\tname: string;\n\t\t   \tage?: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\t    name: 'Tom'\n\t\t};\n\t\t\n\t\tnterface Person {\n\t\t    name: string;\n\t\t    age?: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\t    name: 'Tom',\n\t\t    age: 25\n\t\t};\n```\n\n这时仍然不允许添加未定义的属性\n\n```javascript\n\tinterface Person {\n    \tname: string;\n\t   \tage?: number;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   age: 25,\n\t   gender: 'male'\n\t};\n\n\t// examples/playground/index.ts(9,5): error TS2322: Type '{ name: string; age: number; \tgender: string; }' is not assignable to type 'Person'.\n\t//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.\n```\n### 任意属性\n有时候希望一个接口允许有任意的属性，可以使用如下方式：\n\n```javascript\n\tinterface Person {\n\t   \tname: string;\n\t\tage?: number;\n\t   [propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   gender: 'male'\n\t};\n```\n\n使用 `[propName: string]` 定义了任意属性取 `string` 类型的值。\n\n需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：\n\n```javascript\n\tinterface Person {\n    name: string;\n    age?: number;\n    [propName: string]: string;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n    \tage: 25,\n    \tgender: 'male'\n\t};\n\n\t// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string \tindex type 'string'.\n\t// index.ts(7,5): error TS2322: Type '{ [x: string]: string | number; name: string; age: \tnumber; gender: string; }' is not assignable to type 'Person'.\n\t//   Index signatures are incompatible.\n\t//     Type 'string | number' is not assignable to type 'string'.\n\t//       Type 'number' is not assignable to type 'string'.\n```\n\n上例中，任意属性的值允许是 `string`，但是可选属性 `age` 的值却是 `number`，`number` 不是 `string` 的子属性，所以报错了。\n\n另外，在报错信息中可以看出，此时 `{ name: 'Tom', age: 25, gender: 'male' }` 的类型被推断成了 `{ [x: string]: string | number; name: string; age: number; gender: string; }`，这是联合类型和接口的结合。\n\n### 只读属性\n有时候希望对象中的一些字段只能在创建的时候被赋值，那么可以用 `readonly` 定义只读属性：\n\n```javascript\n\tinterface Person {\n    \treadonly id: number;\n    \tname: string;\n    \tage?: number;\n    \t[propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tid: 89757,\n    \tname: 'Tom',\n    \tgender: 'male'\n\t};\n\n\ttom.id = 9527;\n\n\t// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property\n```\n\t\n上例中，使用 `readonly` 定义的属性 `id` 初始化后，又被赋值了，所以报错了。\n\n注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：\n\n```javascript\n\tinterface Person {\n    \treadonly id: number;\n    \tname: string;\n    \tage?: number;\n    \t[propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   gender: 'male'\n\t};\n\n\ttom.id = 89757;\n\n\t// index.ts(8,5): error TS2322: Type '{ name: string; gender: string; }' is not assignable \tto type 'Person'.\n\t//   Property 'id' is missing in type '{ name: string; gender: string; }'.\n\t// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property.\n\t\n```\n上例中，报错信息有两处，第一处是在对 `tom` 进行赋值的时候，没有给 `id` 赋值。\n\n第二处是在给 `tom.id` 赋值的时候，由于它是只读属性，所以报错了。\n\n## 类型断言\n类型断言`（Type Assertion）`可以用来手动指定一个值的类型。\n\n语法\n\n\t<类型>值\n\t\t或\n\t值 as 类型\n在 `tsx` 语法（`React` 的 `jsx` 语法的 `ts` 版）中必须用后一种。\n\n例子：将一个联合类型的变量指定为一个更加具体的类型\n\n当 `TypeScript` 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \treturn something.length;\n\t}\n\n\t// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n```\n而有时候，确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \tif (something.length) {\n        \treturn something.length;\n    \t} else {\n        \treturn something.toString().length;\n    \t}\n\t}\n\n\t// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n\t// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n```\n上例中，获取 `something.length` 的时候会报错。\n\n此时可以使用类型断言，将 `something` 断言成 `string4`：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \tif ((<string>something).length) {\n        \treturn (<string>something).length;\n    \t} else {\n        \treturn something.toString().length;\n    \t}\n\t}\n```\n类型断言的用法如上，在需要断言的变量前加上 `<Type>` 即可。\n\n类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：\n\n```javascript\n\tfunction toBoolean(something: string | number): boolean {\n    \treturn <boolean>something;\n\t}\n\n\t// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.\n\t//   Type 'number' is not comparable to type 'boolean'.\n```\n## 内置对象\n`JavaScript` 中有很多内置对象，它们可以直接在 `TypeScript` 中当做定义好了的类型。\n内置对象是指根据标准在全局作用域（`Global`）上存在的对象。这里的标准是指 `ECMAScript` 和其他环境（比如 `DOM`）的标准。\n\n### ECMAScript 的内置对象\n* Boolean\n* Error\n* Date\n* RegExp\n* ......\n\n可以在 `TypeScript` 中将变量定义为这些类型：\n\n```javascript\n\tlet b: Boolean = new Boolean(1);\n\tlet e: Error = new Error('Error occurred');\n\tlet d: Date = new Date();\n\tlet r: RegExp = /[a-z]/;\n```\n\n### DOM 和 BOM 的内置对象\n\n* Document\n* HTMLElement\n* Event\n* NodeList\n* ......\n\n`TypeScript` 中会经常用到这些类型：\n\n```javascript\n\tlet body: HTMLElement = document.body;\n\tlet allDiv: NodeList = document.querySelectorAll('div');\n\tdocument.addEventListener('click', function(e: MouseEvent) {\n\t  // Do something\n\t});\n```\n### TypeScript 核心库的定义文件\n`TypeScript` 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 `TypeScript` 中的。\n\n当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：\n\n```javascript\n\tMath.pow(10, '2');\n\n\t// index.ts(1,14): error TS2345: Argument of type 'string' is not assignable to parameter \tof type 'number'\n```\n上面的例子中，`Math.pow` 必须接受两个 `number` 类型的参数。事实上 `Math.pow` 的类型定义如下：\n\n```javascript\n\tinterface Math {\n\t\tpow(x: number, y: number): number;\n\t}\n```\n`DOM` 中的例子：\n\n```javascript\n\tdocument.addEventListener('click', function(e) {\n    \tconsole.log(e.targetCurrent);\n\t});\n\n\t// index.ts(2,17): error TS2339: Property 'targetCurrent' does not exist on type \t'MouseEvent'.\n```\n上面的例子中，`addEventListener` 方法是在 `TypeScript` 核心库中定义的：\n\n```javascript\n\tinterface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent {\n\t\taddEventListener(type: string, listener: (ev: MouseEvent) => any, useCapture?: \tboolean): void;\n\t}\n```\n\t\n所以 `e` 被推断成了 `MouseEvent`，而 `MouseEvent` 是没有 `targetCurrent` 属性的，所以报错了。\n\n注意，`TypeScript` 核心库的定义中不包含 `Node.js` 部分。\n\n`Node.js` 不是内置对象的一部分，如果想用 `TypeScript` 写 `Node.js`，则需要引入第三方声明文件：\n\n\tnpm install @types/node --save-dev\n\n\n## 未完待续...\n","slug":"TypeScript","published":1,"updated":"2022-03-27T14:55:31.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1a4e7d900009o055swz6f37","content":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><p><code>TypeScript</code>是由微软推出并推动的一个静态类型检查的编译型编程语言，可以完美兼容ES6的<code>JavaScript</code>。目前大量前端库和应用使用<code>TS</code>开发，已然成为前端的主流开发语言。</p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li>静态编译，减少<code>JS</code>动态语言特性带来了的非常多的隐藏bug</li>\n<li>类型安全检查在编译阶段完成</li>\n<li>大型项目的更好的进行管理和向后约定维护</li>\n<li>为前端的彻底的静态安全的类型检查、类型继承、抽象设计体系铺好了基石</li>\n<li>更加友好的智能提示和文档说明</li>\n</ul>\n<h2 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h2><p>有两种主要的方式来获取<code>TypeScript</code>工具</p>\n<ul>\n<li><p>通过<code>npm</code>安装</p>\n<p>  <code>npm install -g typescript</code></p>\n</li>\n<li><p>安装Visual Studio的<code>TypeScript</code>插件</p>\n</li>\n</ul>\n<h2 id=\"编译代码\"><a href=\"#编译代码\" class=\"headerlink\" title=\"编译代码\"></a>编译代码</h2><p>启动编译后，可以添加<code>-w</code>参数，让编译工具一直监听文件的变化，<code>ts</code>文件变化后自动编译。</p>\n<pre><code>tsc -w tyDemon.ts\n    or\ntsc --watch tyDemon.ts\n</code></pre>\n<p>编译多个<code>ts</code>文件</p>\n<ul>\n<li><p>编译当前目录下的所有的<code>ts</code>文件</p>\n<pre><code>  tsc -w *.ts\n</code></pre>\n</li>\n<li><p>编译当前目录及子目录的<code>ts</code>文件</p>\n<pre><code>  tsc -w ./**/*.ts\n</code></pre>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>最基本的数据类型就是简单的<code>true</code>/<code>false</code>值，在<code>JavaScript</code>和<code>TypeScript</code>里叫做<code>boolean</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">isDone</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 冒号后面是对当前变量类型的声明，isDone只能赋值布尔类型值，否则会编译失败。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h3><p>和<code>JavaScript</code>一样，<code>TypeScript</code>里的所有数字都是浮点数。 这些浮点数的类型是 <code>number</code>。 除了支持十进制和十六进制字面量，<code>TypeScript</code>还支持<code>ES5</code>中引入的二进制和八进制字面量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num1</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num2</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num3</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num4</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p><code>JavaScript</code>程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 <code>string</code>表示文本数据类型。 和<code>JavaScript</code>一样，可以使用双引号<code>&quot;</code>或单引号<code>&#39;</code>表示字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">;</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p><code>TypeScript</code>像<code>JavaScript</code>一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"元祖\"><a href=\"#元祖\" class=\"headerlink\" title=\"元祖\"></a>元祖</h3><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code>和<code>number</code>类型的元组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h3><p>有时候，会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code>类型来标记这些变量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">any1</span><span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nany1 <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span><span class=\"token punctuation\">;</span>\nany2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h3><p>它表示没有任何类型。 当一个函数没有返回值时，会见到其返回值类型是<code>void</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>声明<code>void</code>变量只能给其赋值为<code>null</code>, <code>undefined</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">void1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Null-和-Undefined\"><a href=\"#Null-和-Undefined\" class=\"headerlink\" title=\"Null 和 Undefined\"></a>Null 和 Undefined</h3><p><code>undefined</code>和<code>null</code>两者各自有自己的类型分别叫做<code>undefined</code>和<code>null</code>。 和 <code>void</code>相似。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">u</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><p><code>object</code>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">declare <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">o</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p><code>enum</code>类型是对<code>JavaScript</code>标准数据类型的一个补充。 像<code>C#</code>等其它语言一样，使用枚举类型可以为一组数值赋予名字。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red<span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>默认情况下，从0开始为元素编号。 也可以手动的指定成员的数值。 例如，将上面的例子改成从 1开始编号：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到<code>Color</code>里的哪个名字，可以查找相应的名字</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">colorName</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 显示'Green'因为上面代码里它的值是2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p> 一个函数有输入和输出，要在 <code>TypeScript</code> 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n输入多余的（或者少于要求的）参数，是不被允许的\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><p>如果要现在写一个对函数表达式的定义，可能会写成这样</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 <code>mySum</code>，是通过赋值操作进行类型推论而推断出来的。如果需要手动给 <code>mySum</code> 添加类型，则应该是这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注意不要混淆了 <code>TypeScript</code> 中的 <code>=&gt;</code> 和 <code>ES6</code> 中的 <code>=&gt;</code>。</p>\n<p>在 <code>TypeScript</code> 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>\n<p>在 ES6 中，=&gt; 叫做箭头函数，应用十分广泛</p>\n<h4 id=\"用接口定义函数的形状\"><a href=\"#用接口定义函数的形状\" class=\"headerlink\" title=\"用接口定义函数的形状\"></a>用接口定义函数的形状</h4><p>也可以使用接口的方式来定义一个函数需要符合的形状：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subString</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">mySearch</span><span class=\"token operator\">:</span> SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subString</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h4><p>输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？</p>\n<p>与接口中的可选属性类似，我们用 <code>?</code> 表示可选的参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h4><p>在 ES6 中，允许给函数的参数添加默认值，<code>TypeScript</code> 会将添加了默认值的参数识别为可选参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n此时就不受「可选参数必须接在必需参数后面」的限制了：\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h4><p>ES6 中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数（rest 参数）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>事实上，<code>items</code> 是一个数组。所以可以用数组的类型来定义它：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">array</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，rest 参数只能是最后一个参数</p>\n<h4 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h4><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p>\n<p>比如，需要实现一个函数 <code>reverse</code>，输入数字 <code>123</code> 的时候，输出反转的数字 <code>321</code>，输入字符串 <code>&#39;hello&#39;</code> 的时候，输出反转的字符串 <code>&#39;olleh&#39;</code>。</p>\n<p>利用联合类型，可以这么实现：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。</p>\n<p>这时，可以使用重载定义多个 <code>reverse</code> 的函数类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     \t\t <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     \t\t <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，重复定义了多次函数 <code>reverse</code>，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。</p>\n<p>注意，<code>TypeScript</code> 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>\n<h2 id=\"对象的类型——接口\"><a href=\"#对象的类型——接口\" class=\"headerlink\" title=\"对象的类型——接口\"></a>对象的类型——接口</h2><p>在 <code>TypeScript</code> 中，使用接口来定义对象的类型。</p>\n<p>在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。</p>\n<p><code>TypeScript</code> 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状」进行描述。</p>\n<h3 id=\"简单的例子\"><a href=\"#简单的例子\" class=\"headerlink\" title=\"简单的例子\"></a>简单的例子</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>定义了一个接口 Person，接着定义了一个变量 tom</p>\n<p>它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致</p>\n<p>接口一般首字母大写</p>\n<p>定义的变量比接口少了、多了一些一些属性是不允许的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(6,5): error TS2322: Type '&#123; name: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Property 'age' is missing in type '&#123; name: string; &#125;'.</span>\n\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; gender: string; &#125;' is \tnot assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h3><p>有时希望不要完全匹配一个形状，那么可以用可选属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nnterface Person <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这时仍然不允许添加未定义的属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// examples/playground/index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; \tgender: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h3><p>有时候希望一个接口允许有任意的属性，可以使用如下方式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用 <code>[propName: string]</code> 定义了任意属性取 <code>string</code> 类型的值。</p>\n<p>需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string \tindex type 'string'.</span>\n<span class=\"token comment\">// index.ts(7,5): error TS2322: Type '&#123; [x: string]: string | number; name: string; age: \tnumber; gender: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Index signatures are incompatible.</span>\n<span class=\"token comment\">//     Type 'string | number' is not assignable to type 'string'.</span>\n<span class=\"token comment\">//       Type 'number' is not assignable to type 'string'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上例中，任意属性的值允许是 <code>string</code>，但是可选属性 <code>age</code> 的值却是 <code>number</code>，<code>number</code> 不是 <code>string</code> 的子属性，所以报错了。</p>\n<p>另外，在报错信息中可以看出，此时 <code>&#123; name: &#39;Tom&#39;, age: 25, gender: &#39;male&#39; &#125;</code> 的类型被推断成了 <code>&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;</code>，这是联合类型和接口的结合。</p>\n<h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h3><p>有时候希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \treadonly id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">9527</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，使用 <code>readonly</code> 定义的属性 <code>id</code> 初始化后，又被赋值了，所以报错了。</p>\n<p>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \treadonly id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(8,5): error TS2322: Type '&#123; name: string; gender: string; &#125;' is not assignable \tto type 'Person'.</span>\n<span class=\"token comment\">//   Property 'id' is missing in type '&#123; name: string; gender: string; &#125;'.</span>\n<span class=\"token comment\">// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，报错信息有两处，第一处是在对 <code>tom</code> 进行赋值的时候，没有给 <code>id</code> 赋值。</p>\n<p>第二处是在给 <code>tom.id</code> 赋值的时候，由于它是只读属性，所以报错了。</p>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>类型断言<code>（Type Assertion）</code>可以用来手动指定一个值的类型。</p>\n<p>语法</p>\n<pre><code>&lt;类型&gt;值\n    或\n值 as 类型\n</code></pre>\n<p>在 <code>tsx</code> 语法（<code>React</code> 的 <code>jsx</code> 语法的 <code>ts</code> 版）中必须用后一种。</p>\n<p>例子：将一个联合类型的变量指定为一个更加具体的类型</p>\n<p>当 <code>TypeScript</code> 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而有时候，确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span>\n<span class=\"token comment\">// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，获取 <code>something.length</code> 的时候会报错。</p>\n<p>此时可以使用类型断言，将 <code>something</code> 断言成 <code>string4</code>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类型断言的用法如上，在需要断言的变量前加上 <code>&lt;Type&gt;</code> 即可。</p>\n<p>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toBoolean</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span>something<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.</span>\n<span class=\"token comment\">//   Type 'number' is not comparable to type 'boolean'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><p><code>JavaScript</code> 中有很多内置对象，它们可以直接在 <code>TypeScript</code> 中当做定义好了的类型。<br>内置对象是指根据标准在全局作用域（<code>Global</code>）上存在的对象。这里的标准是指 <code>ECMAScript</code> 和其他环境（比如 <code>DOM</code>）的标准。</p>\n<h3 id=\"ECMAScript-的内置对象\"><a href=\"#ECMAScript-的内置对象\" class=\"headerlink\" title=\"ECMAScript 的内置对象\"></a>ECMAScript 的内置对象</h3><ul>\n<li>Boolean</li>\n<li>Error</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>……</li>\n</ul>\n<p>可以在 <code>TypeScript</code> 中将变量定义为这些类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> Error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error occurred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">r</span><span class=\"token operator\">:</span> RegExp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[a-z]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DOM-和-BOM-的内置对象\"><a href=\"#DOM-和-BOM-的内置对象\" class=\"headerlink\" title=\"DOM 和 BOM 的内置对象\"></a>DOM 和 BOM 的内置对象</h3><ul>\n<li>Document</li>\n<li>HTMLElement</li>\n<li>Event</li>\n<li>NodeList</li>\n<li>……</li>\n</ul>\n<p><code>TypeScript</code> 中会经常用到这些类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> HTMLElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">allDiv</span><span class=\"token operator\">:</span> NodeList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Do something</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"TypeScript-核心库的定义文件\"><a href=\"#TypeScript-核心库的定义文件\" class=\"headerlink\" title=\"TypeScript 核心库的定义文件\"></a>TypeScript 核心库的定义文件</h3><p><code>TypeScript</code> 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 <code>TypeScript</code> 中的。</p>\n<p>当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(1,14): error TS2345: Argument of type 'string' is not assignable to parameter \tof type 'number'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子中，<code>Math.pow</code> 必须接受两个 <code>number</code> 类型的参数。事实上 <code>Math.pow</code> 的类型定义如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Math</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>DOM</code> 中的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>targetCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(2,17): error TS2339: Property 'targetCurrent' does not exist on type \t'MouseEvent'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子中，<code>addEventListener</code> 方法是在 <code>TypeScript</code> 核心库中定义的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Document</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> GlobalEventHandlers<span class=\"token punctuation\">,</span> NodeSelector<span class=\"token punctuation\">,</span> DocumentEvent <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">listener</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">ev</span><span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any<span class=\"token punctuation\">,</span> useCapture<span class=\"token operator\">?</span><span class=\"token operator\">:</span> \tboolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>所以 <code>e</code> 被推断成了 <code>MouseEvent</code>，而 <code>MouseEvent</code> 是没有 <code>targetCurrent</code> 属性的，所以报错了。</p>\n<p>注意，<code>TypeScript</code> 核心库的定义中不包含 <code>Node.js</code> 部分。</p>\n<p><code>Node.js</code> 不是内置对象的一部分，如果想用 <code>TypeScript</code> 写 <code>Node.js</code>，则需要引入第三方声明文件：</p>\n<pre><code>npm install @types/node --save-dev\n</code></pre>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><p><code>TypeScript</code>是由微软推出并推动的一个静态类型检查的编译型编程语言，可以完美兼容ES6的<code>JavaScript</code>。目前大量前端库和应用使用<code>TS</code>开发，已然成为前端的主流开发语言。</p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li>静态编译，减少<code>JS</code>动态语言特性带来了的非常多的隐藏bug</li>\n<li>类型安全检查在编译阶段完成</li>\n<li>大型项目的更好的进行管理和向后约定维护</li>\n<li>为前端的彻底的静态安全的类型检查、类型继承、抽象设计体系铺好了基石</li>\n<li>更加友好的智能提示和文档说明</li>\n</ul>\n<h2 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h2><p>有两种主要的方式来获取<code>TypeScript</code>工具</p>\n<ul>\n<li><p>通过<code>npm</code>安装</p>\n<p>  <code>npm install -g typescript</code></p>\n</li>\n<li><p>安装Visual Studio的<code>TypeScript</code>插件</p>\n</li>\n</ul>\n<h2 id=\"编译代码\"><a href=\"#编译代码\" class=\"headerlink\" title=\"编译代码\"></a>编译代码</h2><p>启动编译后，可以添加<code>-w</code>参数，让编译工具一直监听文件的变化，<code>ts</code>文件变化后自动编译。</p>\n<pre><code>tsc -w tyDemon.ts\n    or\ntsc --watch tyDemon.ts\n</code></pre>\n<p>编译多个<code>ts</code>文件</p>\n<ul>\n<li><p>编译当前目录下的所有的<code>ts</code>文件</p>\n<pre><code>  tsc -w *.ts\n</code></pre>\n</li>\n<li><p>编译当前目录及子目录的<code>ts</code>文件</p>\n<pre><code>  tsc -w ./**/*.ts\n</code></pre>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>最基本的数据类型就是简单的<code>true</code>/<code>false</code>值，在<code>JavaScript</code>和<code>TypeScript</code>里叫做<code>boolean</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">isDone</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 冒号后面是对当前变量类型的声明，isDone只能赋值布尔类型值，否则会编译失败。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h3><p>和<code>JavaScript</code>一样，<code>TypeScript</code>里的所有数字都是浮点数。 这些浮点数的类型是 <code>number</code>。 除了支持十进制和十六进制字面量，<code>TypeScript</code>还支持<code>ES5</code>中引入的二进制和八进制字面量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num1</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num2</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num3</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num4</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p><code>JavaScript</code>程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 <code>string</code>表示文本数据类型。 和<code>JavaScript</code>一样，可以使用双引号<code>&quot;</code>或单引号<code>&#39;</code>表示字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">;</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p><code>TypeScript</code>像<code>JavaScript</code>一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"元祖\"><a href=\"#元祖\" class=\"headerlink\" title=\"元祖\"></a>元祖</h3><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code>和<code>number</code>类型的元组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h3><p>有时候，会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code>类型来标记这些变量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">any1</span><span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nany1 <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span><span class=\"token punctuation\">;</span>\nany2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h3><p>它表示没有任何类型。 当一个函数没有返回值时，会见到其返回值类型是<code>void</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>声明<code>void</code>变量只能给其赋值为<code>null</code>, <code>undefined</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">void1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Null-和-Undefined\"><a href=\"#Null-和-Undefined\" class=\"headerlink\" title=\"Null 和 Undefined\"></a>Null 和 Undefined</h3><p><code>undefined</code>和<code>null</code>两者各自有自己的类型分别叫做<code>undefined</code>和<code>null</code>。 和 <code>void</code>相似。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">u</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><p><code>object</code>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">declare <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">o</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p><code>enum</code>类型是对<code>JavaScript</code>标准数据类型的一个补充。 像<code>C#</code>等其它语言一样，使用枚举类型可以为一组数值赋予名字。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red<span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>默认情况下，从0开始为元素编号。 也可以手动的指定成员的数值。 例如，将上面的例子改成从 1开始编号：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到<code>Color</code>里的哪个名字，可以查找相应的名字</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">colorName</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 显示'Green'因为上面代码里它的值是2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p> 一个函数有输入和输出，要在 <code>TypeScript</code> 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n输入多余的（或者少于要求的）参数，是不被允许的\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><p>如果要现在写一个对函数表达式的定义，可能会写成这样</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 <code>mySum</code>，是通过赋值操作进行类型推论而推断出来的。如果需要手动给 <code>mySum</code> 添加类型，则应该是这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注意不要混淆了 <code>TypeScript</code> 中的 <code>=&gt;</code> 和 <code>ES6</code> 中的 <code>=&gt;</code>。</p>\n<p>在 <code>TypeScript</code> 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>\n<p>在 ES6 中，=&gt; 叫做箭头函数，应用十分广泛</p>\n<h4 id=\"用接口定义函数的形状\"><a href=\"#用接口定义函数的形状\" class=\"headerlink\" title=\"用接口定义函数的形状\"></a>用接口定义函数的形状</h4><p>也可以使用接口的方式来定义一个函数需要符合的形状：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subString</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">mySearch</span><span class=\"token operator\">:</span> SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subString</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h4><p>输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？</p>\n<p>与接口中的可选属性类似，我们用 <code>?</code> 表示可选的参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h4><p>在 ES6 中，允许给函数的参数添加默认值，<code>TypeScript</code> 会将添加了默认值的参数识别为可选参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n此时就不受「可选参数必须接在必需参数后面」的限制了：\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h4><p>ES6 中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数（rest 参数）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>事实上，<code>items</code> 是一个数组。所以可以用数组的类型来定义它：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">array</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，rest 参数只能是最后一个参数</p>\n<h4 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h4><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p>\n<p>比如，需要实现一个函数 <code>reverse</code>，输入数字 <code>123</code> 的时候，输出反转的数字 <code>321</code>，输入字符串 <code>&#39;hello&#39;</code> 的时候，输出反转的字符串 <code>&#39;olleh&#39;</code>。</p>\n<p>利用联合类型，可以这么实现：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。</p>\n<p>这时，可以使用重载定义多个 <code>reverse</code> 的函数类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     \t\t <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     \t\t <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，重复定义了多次函数 <code>reverse</code>，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。</p>\n<p>注意，<code>TypeScript</code> 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>\n<h2 id=\"对象的类型——接口\"><a href=\"#对象的类型——接口\" class=\"headerlink\" title=\"对象的类型——接口\"></a>对象的类型——接口</h2><p>在 <code>TypeScript</code> 中，使用接口来定义对象的类型。</p>\n<p>在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。</p>\n<p><code>TypeScript</code> 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状」进行描述。</p>\n<h3 id=\"简单的例子\"><a href=\"#简单的例子\" class=\"headerlink\" title=\"简单的例子\"></a>简单的例子</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>定义了一个接口 Person，接着定义了一个变量 tom</p>\n<p>它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致</p>\n<p>接口一般首字母大写</p>\n<p>定义的变量比接口少了、多了一些一些属性是不允许的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(6,5): error TS2322: Type '&#123; name: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Property 'age' is missing in type '&#123; name: string; &#125;'.</span>\n\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; gender: string; &#125;' is \tnot assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h3><p>有时希望不要完全匹配一个形状，那么可以用可选属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nnterface Person <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这时仍然不允许添加未定义的属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// examples/playground/index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; \tgender: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h3><p>有时候希望一个接口允许有任意的属性，可以使用如下方式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用 <code>[propName: string]</code> 定义了任意属性取 <code>string</code> 类型的值。</p>\n<p>需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string \tindex type 'string'.</span>\n<span class=\"token comment\">// index.ts(7,5): error TS2322: Type '&#123; [x: string]: string | number; name: string; age: \tnumber; gender: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Index signatures are incompatible.</span>\n<span class=\"token comment\">//     Type 'string | number' is not assignable to type 'string'.</span>\n<span class=\"token comment\">//       Type 'number' is not assignable to type 'string'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上例中，任意属性的值允许是 <code>string</code>，但是可选属性 <code>age</code> 的值却是 <code>number</code>，<code>number</code> 不是 <code>string</code> 的子属性，所以报错了。</p>\n<p>另外，在报错信息中可以看出，此时 <code>&#123; name: &#39;Tom&#39;, age: 25, gender: &#39;male&#39; &#125;</code> 的类型被推断成了 <code>&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;</code>，这是联合类型和接口的结合。</p>\n<h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h3><p>有时候希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \treadonly id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">9527</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，使用 <code>readonly</code> 定义的属性 <code>id</code> 初始化后，又被赋值了，所以报错了。</p>\n<p>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \treadonly id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(8,5): error TS2322: Type '&#123; name: string; gender: string; &#125;' is not assignable \tto type 'Person'.</span>\n<span class=\"token comment\">//   Property 'id' is missing in type '&#123; name: string; gender: string; &#125;'.</span>\n<span class=\"token comment\">// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，报错信息有两处，第一处是在对 <code>tom</code> 进行赋值的时候，没有给 <code>id</code> 赋值。</p>\n<p>第二处是在给 <code>tom.id</code> 赋值的时候，由于它是只读属性，所以报错了。</p>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>类型断言<code>（Type Assertion）</code>可以用来手动指定一个值的类型。</p>\n<p>语法</p>\n<pre><code>&lt;类型&gt;值\n    或\n值 as 类型\n</code></pre>\n<p>在 <code>tsx</code> 语法（<code>React</code> 的 <code>jsx</code> 语法的 <code>ts</code> 版）中必须用后一种。</p>\n<p>例子：将一个联合类型的变量指定为一个更加具体的类型</p>\n<p>当 <code>TypeScript</code> 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而有时候，确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span>\n<span class=\"token comment\">// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，获取 <code>something.length</code> 的时候会报错。</p>\n<p>此时可以使用类型断言，将 <code>something</code> 断言成 <code>string4</code>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类型断言的用法如上，在需要断言的变量前加上 <code>&lt;Type&gt;</code> 即可。</p>\n<p>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toBoolean</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span>something<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.</span>\n<span class=\"token comment\">//   Type 'number' is not comparable to type 'boolean'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><p><code>JavaScript</code> 中有很多内置对象，它们可以直接在 <code>TypeScript</code> 中当做定义好了的类型。<br>内置对象是指根据标准在全局作用域（<code>Global</code>）上存在的对象。这里的标准是指 <code>ECMAScript</code> 和其他环境（比如 <code>DOM</code>）的标准。</p>\n<h3 id=\"ECMAScript-的内置对象\"><a href=\"#ECMAScript-的内置对象\" class=\"headerlink\" title=\"ECMAScript 的内置对象\"></a>ECMAScript 的内置对象</h3><ul>\n<li>Boolean</li>\n<li>Error</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>……</li>\n</ul>\n<p>可以在 <code>TypeScript</code> 中将变量定义为这些类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> Error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error occurred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">r</span><span class=\"token operator\">:</span> RegExp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[a-z]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DOM-和-BOM-的内置对象\"><a href=\"#DOM-和-BOM-的内置对象\" class=\"headerlink\" title=\"DOM 和 BOM 的内置对象\"></a>DOM 和 BOM 的内置对象</h3><ul>\n<li>Document</li>\n<li>HTMLElement</li>\n<li>Event</li>\n<li>NodeList</li>\n<li>……</li>\n</ul>\n<p><code>TypeScript</code> 中会经常用到这些类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> HTMLElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">allDiv</span><span class=\"token operator\">:</span> NodeList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Do something</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"TypeScript-核心库的定义文件\"><a href=\"#TypeScript-核心库的定义文件\" class=\"headerlink\" title=\"TypeScript 核心库的定义文件\"></a>TypeScript 核心库的定义文件</h3><p><code>TypeScript</code> 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 <code>TypeScript</code> 中的。</p>\n<p>当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(1,14): error TS2345: Argument of type 'string' is not assignable to parameter \tof type 'number'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子中，<code>Math.pow</code> 必须接受两个 <code>number</code> 类型的参数。事实上 <code>Math.pow</code> 的类型定义如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Math</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>DOM</code> 中的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>targetCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(2,17): error TS2339: Property 'targetCurrent' does not exist on type \t'MouseEvent'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子中，<code>addEventListener</code> 方法是在 <code>TypeScript</code> 核心库中定义的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Document</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> GlobalEventHandlers<span class=\"token punctuation\">,</span> NodeSelector<span class=\"token punctuation\">,</span> DocumentEvent <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">listener</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">ev</span><span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any<span class=\"token punctuation\">,</span> useCapture<span class=\"token operator\">?</span><span class=\"token operator\">:</span> \tboolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>所以 <code>e</code> 被推断成了 <code>MouseEvent</code>，而 <code>MouseEvent</code> 是没有 <code>targetCurrent</code> 属性的，所以报错了。</p>\n<p>注意，<code>TypeScript</code> 核心库的定义中不包含 <code>Node.js</code> 部分。</p>\n<p><code>Node.js</code> 不是内置对象的一部分，如果想用 <code>TypeScript</code> 写 <code>Node.js</code>，则需要引入第三方声明文件：</p>\n<pre><code>npm install @types/node --save-dev\n</code></pre>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>"},{"title":"个人简历","date":"2022-03-25T10:12:48.000Z","_content":"\n\n## 技术栈\n### 掌握\n* HTML\n* CSS\n* JavaScript\n* TypeScript\n* ES6\n* Vue3、Vue2\n* Vite\n* webpack\n* Node.js\n* React\n* ESLint\n* Prettier\n* Husky\n* Commitlint\n* Commitizen\n* CI\n* 小程序\n* i18n\n* Mock\n* Git\n* Echarts\n\n\n### 了解\n* 跨平台 uni一类\n* SSR\n* 设计模式\n* WEB安全\n* WEB性能\n* HTTP\n* Nuxt\n* WindiCSS\n* Egg.js\n* Docker\n* nginx\n* Canvas\n* d3js\n* three.js\n* WebGL\n* Rollup\n\n## 个人描述\n\n* 熟练掌握JavaScript，对于数据类型、作用域、闭包、异步、原型、事件循环、继承有一定了解\n\n* 熟练掌握Vue2、Vue3以及相关生态工具、UI组件库，包括但不限于Vue-Router、VueX、Vue-Cli、Vite、Pinia、Element UI、Vant......\n\n* 善于集成构建工具、校验工具、单元测试、集成测试、CI持续集成、Git、UI组件库、工具库\n、Vue、Vite相关插件减少代码量、约束编码风格、优化开发周期，从而整体提高开发效率以及代码质量和产品健壮性。\n* 热衷于对产品进行性能以及交互方面优化\n* 对新技术保持敏感持续关注技术动态以及相关博客\n* 坚持健身，有较强自律性以及身体素质\n\n## 工作经历\n\n### 阔孜纳克\n* 负责公司web项目（公众号、移动端、PC、小程序）需求评估、研发排期、任务分配、跟进\n* 与产品、UI同事完善产品交互流程、确定功能可行性；与服务端同事确定通信流程、设计接口\n* 根据项目类型（需求复杂度、迭代频率、研发周期）确定相关技术栈、GIT工作流\n* 维护、更新公司公共代码库（JSBridge、CLI、Hooks、常用方法、业务组件）\n* 定期组织web同事调研新技术、结合业务整合集成到现有技术架构中\n* 定期组织web同事Code Review、分享编码思想、互通业务、优化项目\n\n\n\n\n## 项目经历\n###  推广联盟 => 公众号、媒体控件相关为主\n\n* 项目介绍\n\n> 客户端分享影片资源以及信息至微信、QQ等相关社交平台，根据用户类型播放全片或试看；展示相关产品包。\n\n* 项目目的\n\n> 推广产品、增加用户数量，买会员、增加收益\n\n* 技术栈\n\n> Vue\n\n* 负责模块\n\n> 负责分享页鉴权播放、登陆、引导原始浏览器打开动画、唤起或下载客户端、微信公众号后台配置、与服务端制定接口\n\n* 取得成绩\n\n\n###  积分中心、农场、购买页 等客户端页面 app交互为主\n\n* 项目介绍\n\n> 积分中心与农场项目主要包括积分获取和积分商城，积分获取主要包括每日签到与积分任务，积分商城主要内容为限时会员为主的虚拟商品、实物，其中农场动画元素较多类似于蚂蚁农场。\n\n\n> 会员购买页主要为会员包的展示与购买，其中产品包包括自动续费与原价包。根据用户类型展示不同计费策略，与客户端约定支付流程，完成产品包的购买，整理平台接口。\n\n* 项目目的\n\n> 提高用户粘性、提高日活。\n\n* 技术栈\n\n> Vue\n\n* 负责模块\n\n> 登陆、用户类型判断、计费策略计算（根据用户类型组装产品以价格为主的基础信息）、支付、解约。与客户端制定相关交互、通信。\n\n* 取得成绩\n\n\n###  模板页 配置后台与前端为主\n\n* 项目介绍\n\n\n> 项目分为活动展示页、活动配置页。活动展示页包括产品包购买、影片、广告位、游戏位，根据配置页灵活配置渲染模板组件UI、布局、内容。\n\n\n* 项目目的\n\n\n> 尽可能满足日常活动的业务需求，灵活配置、灵活展示，以高复用率节省后续日常活动的开发成本。\n\n\n* 技术栈\n\n\n> Vue\n\n\n* 负责模块\n\n> 负责模板页开发、组件封装，主要包括产品包展示、产品包购买、观影、广告、游戏、登陆、与服务端共同设计接口、编写开发文档\n\n* 取得成绩\n###  活动页整合、优化\n\n* 项目介绍\n\n> 该项目为将以往活动项目进行整合并优化，主要整合方向为GIT仓库合并、Vue多页面模式、抽离公共代码块、抽离组件、采用hooks抽离耦合度较高的业务逻辑。\n\n* 项目目的\n\n> 解决了以往维护、迭代旧活动项目时Git仓库混乱，技术栈过旧、不统一的问题；多页面的项目关联有益于代码低耦合，高内聚，从而提高了新活动的开发周期。\n\n* 负责模块\n\n> 负责老项目的整理、脚手架的搭建、多页面配置、git分支建立、文档编写、抽离封装公共代码块、编写hooks\n\n\n###  商城 支付、埋点为主\n\n\n* 项目介绍\n\n> \n###  kv平台 后台管理页面\n###  ott 优化为主\n###    创新项目 整合新技术栈、优化工作流、约束团队开发为主\n","source":"_posts/about.md","raw":"---\ntitle: 个人简历\ndate: 2022-03-25 18:12:48\ntags: 工作\n---\n\n\n## 技术栈\n### 掌握\n* HTML\n* CSS\n* JavaScript\n* TypeScript\n* ES6\n* Vue3、Vue2\n* Vite\n* webpack\n* Node.js\n* React\n* ESLint\n* Prettier\n* Husky\n* Commitlint\n* Commitizen\n* CI\n* 小程序\n* i18n\n* Mock\n* Git\n* Echarts\n\n\n### 了解\n* 跨平台 uni一类\n* SSR\n* 设计模式\n* WEB安全\n* WEB性能\n* HTTP\n* Nuxt\n* WindiCSS\n* Egg.js\n* Docker\n* nginx\n* Canvas\n* d3js\n* three.js\n* WebGL\n* Rollup\n\n## 个人描述\n\n* 熟练掌握JavaScript，对于数据类型、作用域、闭包、异步、原型、事件循环、继承有一定了解\n\n* 熟练掌握Vue2、Vue3以及相关生态工具、UI组件库，包括但不限于Vue-Router、VueX、Vue-Cli、Vite、Pinia、Element UI、Vant......\n\n* 善于集成构建工具、校验工具、单元测试、集成测试、CI持续集成、Git、UI组件库、工具库\n、Vue、Vite相关插件减少代码量、约束编码风格、优化开发周期，从而整体提高开发效率以及代码质量和产品健壮性。\n* 热衷于对产品进行性能以及交互方面优化\n* 对新技术保持敏感持续关注技术动态以及相关博客\n* 坚持健身，有较强自律性以及身体素质\n\n## 工作经历\n\n### 阔孜纳克\n* 负责公司web项目（公众号、移动端、PC、小程序）需求评估、研发排期、任务分配、跟进\n* 与产品、UI同事完善产品交互流程、确定功能可行性；与服务端同事确定通信流程、设计接口\n* 根据项目类型（需求复杂度、迭代频率、研发周期）确定相关技术栈、GIT工作流\n* 维护、更新公司公共代码库（JSBridge、CLI、Hooks、常用方法、业务组件）\n* 定期组织web同事调研新技术、结合业务整合集成到现有技术架构中\n* 定期组织web同事Code Review、分享编码思想、互通业务、优化项目\n\n\n\n\n## 项目经历\n###  推广联盟 => 公众号、媒体控件相关为主\n\n* 项目介绍\n\n> 客户端分享影片资源以及信息至微信、QQ等相关社交平台，根据用户类型播放全片或试看；展示相关产品包。\n\n* 项目目的\n\n> 推广产品、增加用户数量，买会员、增加收益\n\n* 技术栈\n\n> Vue\n\n* 负责模块\n\n> 负责分享页鉴权播放、登陆、引导原始浏览器打开动画、唤起或下载客户端、微信公众号后台配置、与服务端制定接口\n\n* 取得成绩\n\n\n###  积分中心、农场、购买页 等客户端页面 app交互为主\n\n* 项目介绍\n\n> 积分中心与农场项目主要包括积分获取和积分商城，积分获取主要包括每日签到与积分任务，积分商城主要内容为限时会员为主的虚拟商品、实物，其中农场动画元素较多类似于蚂蚁农场。\n\n\n> 会员购买页主要为会员包的展示与购买，其中产品包包括自动续费与原价包。根据用户类型展示不同计费策略，与客户端约定支付流程，完成产品包的购买，整理平台接口。\n\n* 项目目的\n\n> 提高用户粘性、提高日活。\n\n* 技术栈\n\n> Vue\n\n* 负责模块\n\n> 登陆、用户类型判断、计费策略计算（根据用户类型组装产品以价格为主的基础信息）、支付、解约。与客户端制定相关交互、通信。\n\n* 取得成绩\n\n\n###  模板页 配置后台与前端为主\n\n* 项目介绍\n\n\n> 项目分为活动展示页、活动配置页。活动展示页包括产品包购买、影片、广告位、游戏位，根据配置页灵活配置渲染模板组件UI、布局、内容。\n\n\n* 项目目的\n\n\n> 尽可能满足日常活动的业务需求，灵活配置、灵活展示，以高复用率节省后续日常活动的开发成本。\n\n\n* 技术栈\n\n\n> Vue\n\n\n* 负责模块\n\n> 负责模板页开发、组件封装，主要包括产品包展示、产品包购买、观影、广告、游戏、登陆、与服务端共同设计接口、编写开发文档\n\n* 取得成绩\n###  活动页整合、优化\n\n* 项目介绍\n\n> 该项目为将以往活动项目进行整合并优化，主要整合方向为GIT仓库合并、Vue多页面模式、抽离公共代码块、抽离组件、采用hooks抽离耦合度较高的业务逻辑。\n\n* 项目目的\n\n> 解决了以往维护、迭代旧活动项目时Git仓库混乱，技术栈过旧、不统一的问题；多页面的项目关联有益于代码低耦合，高内聚，从而提高了新活动的开发周期。\n\n* 负责模块\n\n> 负责老项目的整理、脚手架的搭建、多页面配置、git分支建立、文档编写、抽离封装公共代码块、编写hooks\n\n\n###  商城 支付、埋点为主\n\n\n* 项目介绍\n\n> \n###  kv平台 后台管理页面\n###  ott 优化为主\n###    创新项目 整合新技术栈、优化工作流、约束团队开发为主\n","slug":"about","published":1,"updated":"2022-03-25T10:26:04.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1a4e7dk00049o052p0udla4","content":"<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><h3 id=\"掌握\"><a href=\"#掌握\" class=\"headerlink\" title=\"掌握\"></a>掌握</h3><ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>JavaScript</li>\n<li>TypeScript</li>\n<li>ES6</li>\n<li>Vue3、Vue2</li>\n<li>Vite</li>\n<li>webpack</li>\n<li>Node.js</li>\n<li>React</li>\n<li>ESLint</li>\n<li>Prettier</li>\n<li>Husky</li>\n<li>Commitlint</li>\n<li>Commitizen</li>\n<li>CI</li>\n<li>小程序</li>\n<li>i18n</li>\n<li>Mock</li>\n<li>Git</li>\n<li>Echarts</li>\n</ul>\n<h3 id=\"了解\"><a href=\"#了解\" class=\"headerlink\" title=\"了解\"></a>了解</h3><ul>\n<li>跨平台 uni一类</li>\n<li>SSR</li>\n<li>设计模式</li>\n<li>WEB安全</li>\n<li>WEB性能</li>\n<li>HTTP</li>\n<li>Nuxt</li>\n<li>WindiCSS</li>\n<li>Egg.js</li>\n<li>Docker</li>\n<li>nginx</li>\n<li>Canvas</li>\n<li>d3js</li>\n<li>three.js</li>\n<li>WebGL</li>\n<li>Rollup</li>\n</ul>\n<h2 id=\"个人描述\"><a href=\"#个人描述\" class=\"headerlink\" title=\"个人描述\"></a>个人描述</h2><ul>\n<li><p>熟练掌握JavaScript，对于数据类型、作用域、闭包、异步、原型、事件循环、继承有一定了解</p>\n</li>\n<li><p>熟练掌握Vue2、Vue3以及相关生态工具、UI组件库，包括但不限于Vue-Router、VueX、Vue-Cli、Vite、Pinia、Element UI、Vant……</p>\n</li>\n<li><p>善于集成构建工具、校验工具、单元测试、集成测试、CI持续集成、Git、UI组件库、工具库<br>、Vue、Vite相关插件减少代码量、约束编码风格、优化开发周期，从而整体提高开发效率以及代码质量和产品健壮性。</p>\n</li>\n<li><p>热衷于对产品进行性能以及交互方面优化</p>\n</li>\n<li><p>对新技术保持敏感持续关注技术动态以及相关博客</p>\n</li>\n<li><p>坚持健身，有较强自律性以及身体素质</p>\n</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"阔孜纳克\"><a href=\"#阔孜纳克\" class=\"headerlink\" title=\"阔孜纳克\"></a>阔孜纳克</h3><ul>\n<li>负责公司web项目（公众号、移动端、PC、小程序）需求评估、研发排期、任务分配、跟进</li>\n<li>与产品、UI同事完善产品交互流程、确定功能可行性；与服务端同事确定通信流程、设计接口</li>\n<li>根据项目类型（需求复杂度、迭代频率、研发周期）确定相关技术栈、GIT工作流</li>\n<li>维护、更新公司公共代码库（JSBridge、CLI、Hooks、常用方法、业务组件）</li>\n<li>定期组织web同事调研新技术、结合业务整合集成到现有技术架构中</li>\n<li>定期组织web同事Code Review、分享编码思想、互通业务、优化项目</li>\n</ul>\n<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2><h3 id=\"推广联盟-gt-公众号、媒体控件相关为主\"><a href=\"#推广联盟-gt-公众号、媒体控件相关为主\" class=\"headerlink\" title=\"推广联盟 =&gt; 公众号、媒体控件相关为主\"></a>推广联盟 =&gt; 公众号、媒体控件相关为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>客户端分享影片资源以及信息至微信、QQ等相关社交平台，根据用户类型播放全片或试看；展示相关产品包。</p></blockquote>\n<ul>\n<li>项目目的</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>推广产品、增加用户数量，买会员、增加收益</p></blockquote>\n<ul>\n<li>技术栈</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Vue</p></blockquote>\n<ul>\n<li>负责模块</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>负责分享页鉴权播放、登陆、引导原始浏览器打开动画、唤起或下载客户端、微信公众号后台配置、与服务端制定接口</p></blockquote>\n<ul>\n<li>取得成绩</li>\n</ul>\n<h3 id=\"积分中心、农场、购买页-等客户端页面-app交互为主\"><a href=\"#积分中心、农场、购买页-等客户端页面-app交互为主\" class=\"headerlink\" title=\"积分中心、农场、购买页 等客户端页面 app交互为主\"></a>积分中心、农场、购买页 等客户端页面 app交互为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>积分中心与农场项目主要包括积分获取和积分商城，积分获取主要包括每日签到与积分任务，积分商城主要内容为限时会员为主的虚拟商品、实物，其中农场动画元素较多类似于蚂蚁农场。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>会员购买页主要为会员包的展示与购买，其中产品包包括自动续费与原价包。根据用户类型展示不同计费策略，与客户端约定支付流程，完成产品包的购买，整理平台接口。</p></blockquote>\n<ul>\n<li>项目目的</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>提高用户粘性、提高日活。</p></blockquote>\n<ul>\n<li>技术栈</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Vue</p></blockquote>\n<ul>\n<li>负责模块</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>登陆、用户类型判断、计费策略计算（根据用户类型组装产品以价格为主的基础信息）、支付、解约。与客户端制定相关交互、通信。</p></blockquote>\n<ul>\n<li>取得成绩</li>\n</ul>\n<h3 id=\"模板页-配置后台与前端为主\"><a href=\"#模板页-配置后台与前端为主\" class=\"headerlink\" title=\"模板页 配置后台与前端为主\"></a>模板页 配置后台与前端为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>项目分为活动展示页、活动配置页。活动展示页包括产品包购买、影片、广告位、游戏位，根据配置页灵活配置渲染模板组件UI、布局、内容。</p></blockquote>\n<ul>\n<li>项目目的</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>尽可能满足日常活动的业务需求，灵活配置、灵活展示，以高复用率节省后续日常活动的开发成本。</p></blockquote>\n<ul>\n<li>技术栈</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Vue</p></blockquote>\n<ul>\n<li>负责模块</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>负责模板页开发、组件封装，主要包括产品包展示、产品包购买、观影、广告、游戏、登陆、与服务端共同设计接口、编写开发文档</p></blockquote>\n<ul>\n<li><p>取得成绩</p>\n<h3 id=\"活动页整合、优化\"><a href=\"#活动页整合、优化\" class=\"headerlink\" title=\"活动页整合、优化\"></a>活动页整合、优化</h3></li>\n<li><p>项目介绍</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>该项目为将以往活动项目进行整合并优化，主要整合方向为GIT仓库合并、Vue多页面模式、抽离公共代码块、抽离组件、采用hooks抽离耦合度较高的业务逻辑。</p></blockquote>\n<ul>\n<li>项目目的</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>解决了以往维护、迭代旧活动项目时Git仓库混乱，技术栈过旧、不统一的问题；多页面的项目关联有益于代码低耦合，高内聚，从而提高了新活动的开发周期。</p></blockquote>\n<ul>\n<li>负责模块</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>负责老项目的整理、脚手架的搭建、多页面配置、git分支建立、文档编写、抽离封装公共代码块、编写hooks</p></blockquote>\n<h3 id=\"商城-支付、埋点为主\"><a href=\"#商城-支付、埋点为主\" class=\"headerlink\" title=\"商城 支付、埋点为主\"></a>商城 支付、埋点为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<blockquote>\n</blockquote>\n<h3 id=\"kv平台-后台管理页面\"><a href=\"#kv平台-后台管理页面\" class=\"headerlink\" title=\"kv平台 后台管理页面\"></a>kv平台 后台管理页面</h3><h3 id=\"ott-优化为主\"><a href=\"#ott-优化为主\" class=\"headerlink\" title=\"ott 优化为主\"></a>ott 优化为主</h3><h3 id=\"创新项目-整合新技术栈、优化工作流、约束团队开发为主\"><a href=\"#创新项目-整合新技术栈、优化工作流、约束团队开发为主\" class=\"headerlink\" title=\"创新项目 整合新技术栈、优化工作流、约束团队开发为主\"></a>创新项目 整合新技术栈、优化工作流、约束团队开发为主</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><h3 id=\"掌握\"><a href=\"#掌握\" class=\"headerlink\" title=\"掌握\"></a>掌握</h3><ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>JavaScript</li>\n<li>TypeScript</li>\n<li>ES6</li>\n<li>Vue3、Vue2</li>\n<li>Vite</li>\n<li>webpack</li>\n<li>Node.js</li>\n<li>React</li>\n<li>ESLint</li>\n<li>Prettier</li>\n<li>Husky</li>\n<li>Commitlint</li>\n<li>Commitizen</li>\n<li>CI</li>\n<li>小程序</li>\n<li>i18n</li>\n<li>Mock</li>\n<li>Git</li>\n<li>Echarts</li>\n</ul>\n<h3 id=\"了解\"><a href=\"#了解\" class=\"headerlink\" title=\"了解\"></a>了解</h3><ul>\n<li>跨平台 uni一类</li>\n<li>SSR</li>\n<li>设计模式</li>\n<li>WEB安全</li>\n<li>WEB性能</li>\n<li>HTTP</li>\n<li>Nuxt</li>\n<li>WindiCSS</li>\n<li>Egg.js</li>\n<li>Docker</li>\n<li>nginx</li>\n<li>Canvas</li>\n<li>d3js</li>\n<li>three.js</li>\n<li>WebGL</li>\n<li>Rollup</li>\n</ul>\n<h2 id=\"个人描述\"><a href=\"#个人描述\" class=\"headerlink\" title=\"个人描述\"></a>个人描述</h2><ul>\n<li><p>熟练掌握JavaScript，对于数据类型、作用域、闭包、异步、原型、事件循环、继承有一定了解</p>\n</li>\n<li><p>熟练掌握Vue2、Vue3以及相关生态工具、UI组件库，包括但不限于Vue-Router、VueX、Vue-Cli、Vite、Pinia、Element UI、Vant……</p>\n</li>\n<li><p>善于集成构建工具、校验工具、单元测试、集成测试、CI持续集成、Git、UI组件库、工具库<br>、Vue、Vite相关插件减少代码量、约束编码风格、优化开发周期，从而整体提高开发效率以及代码质量和产品健壮性。</p>\n</li>\n<li><p>热衷于对产品进行性能以及交互方面优化</p>\n</li>\n<li><p>对新技术保持敏感持续关注技术动态以及相关博客</p>\n</li>\n<li><p>坚持健身，有较强自律性以及身体素质</p>\n</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"阔孜纳克\"><a href=\"#阔孜纳克\" class=\"headerlink\" title=\"阔孜纳克\"></a>阔孜纳克</h3><ul>\n<li>负责公司web项目（公众号、移动端、PC、小程序）需求评估、研发排期、任务分配、跟进</li>\n<li>与产品、UI同事完善产品交互流程、确定功能可行性；与服务端同事确定通信流程、设计接口</li>\n<li>根据项目类型（需求复杂度、迭代频率、研发周期）确定相关技术栈、GIT工作流</li>\n<li>维护、更新公司公共代码库（JSBridge、CLI、Hooks、常用方法、业务组件）</li>\n<li>定期组织web同事调研新技术、结合业务整合集成到现有技术架构中</li>\n<li>定期组织web同事Code Review、分享编码思想、互通业务、优化项目</li>\n</ul>\n<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2><h3 id=\"推广联盟-gt-公众号、媒体控件相关为主\"><a href=\"#推广联盟-gt-公众号、媒体控件相关为主\" class=\"headerlink\" title=\"推广联盟 =&gt; 公众号、媒体控件相关为主\"></a>推广联盟 =&gt; 公众号、媒体控件相关为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<blockquote>\n<p>客户端分享影片资源以及信息至微信、QQ等相关社交平台，根据用户类型播放全片或试看；展示相关产品包。</p>\n</blockquote>\n<ul>\n<li>项目目的</li>\n</ul>\n<blockquote>\n<p>推广产品、增加用户数量，买会员、增加收益</p>\n</blockquote>\n<ul>\n<li>技术栈</li>\n</ul>\n<blockquote>\n<p>Vue</p>\n</blockquote>\n<ul>\n<li>负责模块</li>\n</ul>\n<blockquote>\n<p>负责分享页鉴权播放、登陆、引导原始浏览器打开动画、唤起或下载客户端、微信公众号后台配置、与服务端制定接口</p>\n</blockquote>\n<ul>\n<li>取得成绩</li>\n</ul>\n<h3 id=\"积分中心、农场、购买页-等客户端页面-app交互为主\"><a href=\"#积分中心、农场、购买页-等客户端页面-app交互为主\" class=\"headerlink\" title=\"积分中心、农场、购买页 等客户端页面 app交互为主\"></a>积分中心、农场、购买页 等客户端页面 app交互为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<blockquote>\n<p>积分中心与农场项目主要包括积分获取和积分商城，积分获取主要包括每日签到与积分任务，积分商城主要内容为限时会员为主的虚拟商品、实物，其中农场动画元素较多类似于蚂蚁农场。</p>\n</blockquote>\n<blockquote>\n<p>会员购买页主要为会员包的展示与购买，其中产品包包括自动续费与原价包。根据用户类型展示不同计费策略，与客户端约定支付流程，完成产品包的购买，整理平台接口。</p>\n</blockquote>\n<ul>\n<li>项目目的</li>\n</ul>\n<blockquote>\n<p>提高用户粘性、提高日活。</p>\n</blockquote>\n<ul>\n<li>技术栈</li>\n</ul>\n<blockquote>\n<p>Vue</p>\n</blockquote>\n<ul>\n<li>负责模块</li>\n</ul>\n<blockquote>\n<p>登陆、用户类型判断、计费策略计算（根据用户类型组装产品以价格为主的基础信息）、支付、解约。与客户端制定相关交互、通信。</p>\n</blockquote>\n<ul>\n<li>取得成绩</li>\n</ul>\n<h3 id=\"模板页-配置后台与前端为主\"><a href=\"#模板页-配置后台与前端为主\" class=\"headerlink\" title=\"模板页 配置后台与前端为主\"></a>模板页 配置后台与前端为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<blockquote>\n<p>项目分为活动展示页、活动配置页。活动展示页包括产品包购买、影片、广告位、游戏位，根据配置页灵活配置渲染模板组件UI、布局、内容。</p>\n</blockquote>\n<ul>\n<li>项目目的</li>\n</ul>\n<blockquote>\n<p>尽可能满足日常活动的业务需求，灵活配置、灵活展示，以高复用率节省后续日常活动的开发成本。</p>\n</blockquote>\n<ul>\n<li>技术栈</li>\n</ul>\n<blockquote>\n<p>Vue</p>\n</blockquote>\n<ul>\n<li>负责模块</li>\n</ul>\n<blockquote>\n<p>负责模板页开发、组件封装，主要包括产品包展示、产品包购买、观影、广告、游戏、登陆、与服务端共同设计接口、编写开发文档</p>\n</blockquote>\n<ul>\n<li><p>取得成绩</p>\n<h3 id=\"活动页整合、优化\"><a href=\"#活动页整合、优化\" class=\"headerlink\" title=\"活动页整合、优化\"></a>活动页整合、优化</h3></li>\n<li><p>项目介绍</p>\n</li>\n</ul>\n<blockquote>\n<p>该项目为将以往活动项目进行整合并优化，主要整合方向为GIT仓库合并、Vue多页面模式、抽离公共代码块、抽离组件、采用hooks抽离耦合度较高的业务逻辑。</p>\n</blockquote>\n<ul>\n<li>项目目的</li>\n</ul>\n<blockquote>\n<p>解决了以往维护、迭代旧活动项目时Git仓库混乱，技术栈过旧、不统一的问题；多页面的项目关联有益于代码低耦合，高内聚，从而提高了新活动的开发周期。</p>\n</blockquote>\n<ul>\n<li>负责模块</li>\n</ul>\n<blockquote>\n<p>负责老项目的整理、脚手架的搭建、多页面配置、git分支建立、文档编写、抽离封装公共代码块、编写hooks</p>\n</blockquote>\n<h3 id=\"商城-支付、埋点为主\"><a href=\"#商城-支付、埋点为主\" class=\"headerlink\" title=\"商城 支付、埋点为主\"></a>商城 支付、埋点为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<blockquote>\n</blockquote>\n<h3 id=\"kv平台-后台管理页面\"><a href=\"#kv平台-后台管理页面\" class=\"headerlink\" title=\"kv平台 后台管理页面\"></a>kv平台 后台管理页面</h3><h3 id=\"ott-优化为主\"><a href=\"#ott-优化为主\" class=\"headerlink\" title=\"ott 优化为主\"></a>ott 优化为主</h3><h3 id=\"创新项目-整合新技术栈、优化工作流、约束团队开发为主\"><a href=\"#创新项目-整合新技术栈、优化工作流、约束团队开发为主\" class=\"headerlink\" title=\"创新项目 整合新技术栈、优化工作流、约束团队开发为主\"></a>创新项目 整合新技术栈、优化工作流、约束团队开发为主</h3>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl1a4e7d900009o055swz6f37","tag_id":"cl1a4e7dg00029o056ixqgoli","_id":"cl1a4e7di00039o058vhi93hi"},{"post_id":"cl1a4e7dk00049o052p0udla4","tag_id":"cl1a4e7dk00059o05d5ai144k","_id":"cl1a4e7dl00069o05darfhw10"}],"Tag":[{"name":"code","_id":"cl1a4e7dg00029o056ixqgoli"},{"name":"工作","_id":"cl1a4e7dk00059o05d5ai144k"}]}}