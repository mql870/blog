{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-Aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/TypeScript.md","hash":"15af9b4c749a7c93492458506cb31a3e5b849e36","modified":1648392931495},{"_id":"source/_posts/about.md","hash":"56039c2cea3afc1617db19b3bd1d3621294fb74f","modified":1648444531624},{"_id":"node_modules/hexo-theme-Aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/package.json","hash":"c07e4345b5e6c3e766554592a4f8d6dd2afcbe78","modified":1648182271020},{"_id":"node_modules/hexo-theme-Aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":499162500000},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":499162500000},{"_id":"public/api/posts/1.json","hash":"52e27de92a9510c4b544d03ecae2d00e1fc05061","modified":1648550120463},{"_id":"public/api/articles/TypeScript.json","hash":"bfa2220a8c705dcdfb4aaa8a21769efc6fcb7153","modified":1648550120463},{"_id":"public/api/articles/about.json","hash":"70f2911b7022cfe5e251dbd4fc41c829a70b736c","modified":1648445030758},{"_id":"public/api/features.json","hash":"1f2a03f7e44cccccd6486e46ae05f654d4efbd73","modified":1648550120463},{"_id":"public/api/authors/blog-author.json","hash":"2ac8ebf94e0063e0da1aabc4b77395a4fb318720","modified":1648550120463},{"_id":"public/api/site.json","hash":"ce4b2055894c40f8b9c72007b656b8b65a8c9ce4","modified":1648550120463},{"_id":"public/api/tags.json","hash":"f473be686d78e2931d7233d217f76cdfdbf0bfef","modified":1648550120463},{"_id":"public/api/categories.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1648445030758},{"_id":"public/api/tags/工作.json","hash":"8316b60648ed3c3716d19c6891eaee336e4168d4","modified":1648550120463},{"_id":"public/api/tags/code.json","hash":"2061d8d229b63d057f172ea41235294b8ba2dbb6","modified":1648550120463},{"_id":"public/api/statistic.json","hash":"f8a295b80984df610ca8af71812ffe141b4bf384","modified":1648550120463},{"_id":"public/api/search.json","hash":"1b4ecf0d5365090e301fc81ea925f6ef4348c631","modified":1648550120463},{"_id":"public/post/TypeScript.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/post/about.html","hash":"a0b1cef115ed141d801ac248bc9b68feb8b902ba","modified":1648445030758},{"_id":"public/index.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/tags/index.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/archives/index.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/tags/search/index.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1648445030758},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1648445030758},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1648445030758},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1648445030758},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1648445030758},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1648445030758},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1648445030758},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1648445030758},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1648445030758},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1648445030758},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1648445030758},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1648445030758},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1648445030758},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1648445030758},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1648445030758},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1648445030758},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1648445030758},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1648445030758},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1648445030758},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1648445030758},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1648445030758},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1648445030758},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1648445030758},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1648445030758},{"_id":"source/JavaScript/index.md","hash":"c70ffa0f11523ff043b8648a6908c36b2d287b4a","modified":1648529221874},{"_id":"source/_posts/JavaScript-primary.md","hash":"d079fbb2e79cb86df5d08d044aab315032c83aee","modified":1648549691707},{"_id":"source/_posts/JavaScript-senior.md","hash":"18657c77b442968d0534e3e0dc45c6d4225ccd5d","modified":1648530826743},{"_id":"source/about/index.md","hash":"64a5a1a416c5938f7b43edb2c10cd46cf5630c09","modified":1648549421796},{"_id":"source/_posts/Applet.md","hash":"e1e1c4b298b379ded17f717c446d0a0065d40050","modified":1648531869782},{"_id":"source/_posts/engineered-software.md","hash":"2e8ad26905b2df71e67795c670a08875070244e8","modified":1648549926407},{"_id":"source/_posts/web-his.md","hash":"61d9930cb07873031a6a8532cab2166564cc80ee","modified":1648549972914},{"_id":"source/_posts/applet.md","hash":"22a488d9343980c5628837fa015fab39febaa9de","modified":1648547695181},{"_id":"source/_posts/engineered.md","hash":"71fa9a80f74cdb29cec2c8dfc6becf2b44e5550e","modified":1648549929998},{"_id":"public/api/articles/web-his.json","hash":"271572277c6c02e087330d237526aa1091ae2a86","modified":1648550120463},{"_id":"public/api/articles/engineered-software.json","hash":"798fd53c46602732ddcb6c14e332e908256a8742","modified":1648550120463},{"_id":"public/api/articles/engineered.json","hash":"9a1bf9ff86d3fea57b3cf998818f9f18f408e6c8","modified":1648550120463},{"_id":"public/api/articles/applet.json","hash":"de2e4268aff1af8e982204028e3a235f3a53b46b","modified":1648550120463},{"_id":"public/api/articles/JavaScript-primary.json","hash":"d412716c7d6b968e49d86571ab9a8e98166435fa","modified":1648550120463},{"_id":"public/api/articles/JavaScript-senior.json","hash":"df2fd375c02bad5ca3a19dcd4388c98caf12175f","modified":1648550120463},{"_id":"public/api/tags/观点与感想.json","hash":"28fc4ec7efb37b0f3e4bdc05ef5a7fd28c90a8e0","modified":1648550120463},{"_id":"public/api/pages/about/index.json","hash":"542c2585de3dde1969e82f9f94b43ab832085ab1","modified":1648550120463},{"_id":"public/post/web-his.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/post/engineered-software.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/post/engineered.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/post/applet.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/post/JavaScript-primary.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/post/JavaScript-senior.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463},{"_id":"public/page/about/index.html","hash":"0aa25fdbbe1f7a9625834981348b8b4ee364b87c","modified":1648550120463}],"Category":[],"Data":[],"Page":[{"title":"个人简历","date":"2022-03-25T10:12:48.000Z","tags":"工作","_content":"\n## 个人描述\n\n* 熟练掌握JavaScript，对于数据类型、作用域、闭包、异步、原型、事件循环、继承有一定了解\n\n* 熟练掌握Vue2、Vue3以及相关生态工具、UI组件库，包括但不限于Vue-Router、VueX、Vue-Cli、Vite、Pinia、Element UI、Vant......\n\n* 善于集成构建工具、校验工具、单元测试、集成测试、CI持续集成、Git、UI组件库、工具库\n、Vue、Vite相关插件减少代码量、约束编码风格、优化开发周期，从而整体提高开发效率以及代码质量和产品健壮性。\n* 热衷于对产品进行性能以及交互方面优化\n* 对新技术保持敏感持续关注技术动态以及相关博客\n* 坚持健身，有较强自律性以及身体素质\n\n## 技术栈\n### 掌握\n* HTML\n* CSS\n* JavaScript\n* TypeScript\n* ES6\n* Vue3、Vue2\n* Vite\n* webpack\n* Node.js\n* React\n* ESLint\n* Prettier\n* Husky\n* Commitlint\n* Commitizen\n* CI\n* 小程序\n* i18n\n* Mock\n* Git\n* Echarts\n\n\n### 了解\n* 跨平台 uni一类\n* SSR\n* 设计模式\n* WEB安全\n* WEB性能\n* HTTP\n* Nuxt\n* WindiCSS\n* Egg.js\n* Docker\n* nginx\n* Canvas\n* d3js\n* three.js\n* WebGL\n* Rollup\n\n\n\n## 工作经历\n\n### 阔孜纳克\n* 负责公司web项目（公众号、移动端、PC、小程序）需求评估、研发排期、任务分配、跟进\n* 与产品、UI同事完善产品交互流程、确定功能可行性；与服务端同事确定通信流程、设计接口\n* 根据项目类型（需求复杂度、迭代频率、研发周期）确定相关技术栈、GIT工作流\n* 维护、更新公司公共代码库（JSBridge、CLI、Hooks、常用方法、业务组件）\n* 定期组织web同事调研新技术、结合业务整合集成到现有技术架构中\n* 定期组织web同事Code Review、分享编码思想、互通业务、优化项目\n\n\n\n\n## 项目经历\n###  推广联盟 => 公众号、媒体控件相关为主\n\n* 项目介绍\n\n客户端分享影片资源以及信息至微信、QQ等相关社交平台，根据用户类型播放全片或试看；展示相关产品包。\n\n* 项目目的\n\n推广产品、增加用户数量，买会员、增加收益\n\n* 技术栈\n\nVue\n\n* 负责模块\n\n负责分享页鉴权播放、登陆、引导原始浏览器打开动画、唤起或下载客户端、微信公众号后台配置、与服务端制定接口\n\n* 取得成绩\n\n\n###  积分中心、农场、购买页 等客户端页面 app交互为主\n\n* 项目介绍\n\n积分中心与农场项目主要包括积分获取和积分商城，积分获取主要包括每日签到与积分任务，积分商城主要内容为限时会员为主的虚拟商品、实物，其中农场动画元素较多类似于蚂蚁农场。\n\n\n会员购买页主要为会员包的展示与购买，其中产品包包括自动续费与原价包。根据用户类型展示不同计费策略，与客户端约定支付流程，完成产品包的购买，整理平台接口。\n\n* 项目目的\n\n提高用户粘性、提高日活。\n\n* 技术栈\n\nVue\n\n* 负责模块\n\n登陆、用户类型判断、计费策略计算（根据用户类型组装产品以价格为主的基础信息）、支付、解约。与客户端制定相关交互、通信。\n\n* 取得成绩\n\n\n###  模板页 配置后台与前端为主\n\n* 项目介绍\n\n\n项目分为活动展示页、活动配置页。活动展示页包括产品包购买、影片、广告位、游戏位，根据配置页灵活配置渲染模板组件UI、布局、内容。\n\n\n* 项目目的\n\n\n尽可能满足日常活动的业务需求，灵活配置、灵活展示，以高复用率节省后续日常活动的开发成本。\n\n\n* 技术栈\n\n\nVue\n\n\n* 负责模块\n\n负责模板页开发、组件封装，主要包括产品包展示、产品包购买、观影、广告、游戏、登陆、与服务端共同设计接口、编写开发文档\n\n* 取得成绩\n###  活动页整合、优化\n\n* 项目介绍\n\n该项目为将以往活动项目进行整合并优化，主要整合方向为GIT仓库合并、Vue多页面模式、抽离公共代码块、抽离组件、采用hooks抽离耦合度较高的业务逻辑。\n\n* 项目目的\n\n解决了以往维护、迭代旧活动项目时Git仓库混乱，技术栈过旧、不统一的问题；多页面的项目关联有益于代码低耦合，高内聚，从而提高了新活动的开发周期。\n\n* 负责模块\n\n负责老项目的整理、脚手架的搭建、多页面配置、git分支建立、文档编写、抽离封装公共代码块、编写hooks\n\n\n###  商城 支付、埋点为主\n\n\n* 项目介绍\n\n \n###  kv平台 后台管理页面\n###  ott 优化为主\n###    创新项目 整合新技术栈、优化工作流、约束团队开发为主\n","source":"about/index.md","raw":"---\ntitle: 个人简历\ndate: 2022-03-25 18:12:48\ntags: 工作\n\n---\n\n## 个人描述\n\n* 熟练掌握JavaScript，对于数据类型、作用域、闭包、异步、原型、事件循环、继承有一定了解\n\n* 熟练掌握Vue2、Vue3以及相关生态工具、UI组件库，包括但不限于Vue-Router、VueX、Vue-Cli、Vite、Pinia、Element UI、Vant......\n\n* 善于集成构建工具、校验工具、单元测试、集成测试、CI持续集成、Git、UI组件库、工具库\n、Vue、Vite相关插件减少代码量、约束编码风格、优化开发周期，从而整体提高开发效率以及代码质量和产品健壮性。\n* 热衷于对产品进行性能以及交互方面优化\n* 对新技术保持敏感持续关注技术动态以及相关博客\n* 坚持健身，有较强自律性以及身体素质\n\n## 技术栈\n### 掌握\n* HTML\n* CSS\n* JavaScript\n* TypeScript\n* ES6\n* Vue3、Vue2\n* Vite\n* webpack\n* Node.js\n* React\n* ESLint\n* Prettier\n* Husky\n* Commitlint\n* Commitizen\n* CI\n* 小程序\n* i18n\n* Mock\n* Git\n* Echarts\n\n\n### 了解\n* 跨平台 uni一类\n* SSR\n* 设计模式\n* WEB安全\n* WEB性能\n* HTTP\n* Nuxt\n* WindiCSS\n* Egg.js\n* Docker\n* nginx\n* Canvas\n* d3js\n* three.js\n* WebGL\n* Rollup\n\n\n\n## 工作经历\n\n### 阔孜纳克\n* 负责公司web项目（公众号、移动端、PC、小程序）需求评估、研发排期、任务分配、跟进\n* 与产品、UI同事完善产品交互流程、确定功能可行性；与服务端同事确定通信流程、设计接口\n* 根据项目类型（需求复杂度、迭代频率、研发周期）确定相关技术栈、GIT工作流\n* 维护、更新公司公共代码库（JSBridge、CLI、Hooks、常用方法、业务组件）\n* 定期组织web同事调研新技术、结合业务整合集成到现有技术架构中\n* 定期组织web同事Code Review、分享编码思想、互通业务、优化项目\n\n\n\n\n## 项目经历\n###  推广联盟 => 公众号、媒体控件相关为主\n\n* 项目介绍\n\n客户端分享影片资源以及信息至微信、QQ等相关社交平台，根据用户类型播放全片或试看；展示相关产品包。\n\n* 项目目的\n\n推广产品、增加用户数量，买会员、增加收益\n\n* 技术栈\n\nVue\n\n* 负责模块\n\n负责分享页鉴权播放、登陆、引导原始浏览器打开动画、唤起或下载客户端、微信公众号后台配置、与服务端制定接口\n\n* 取得成绩\n\n\n###  积分中心、农场、购买页 等客户端页面 app交互为主\n\n* 项目介绍\n\n积分中心与农场项目主要包括积分获取和积分商城，积分获取主要包括每日签到与积分任务，积分商城主要内容为限时会员为主的虚拟商品、实物，其中农场动画元素较多类似于蚂蚁农场。\n\n\n会员购买页主要为会员包的展示与购买，其中产品包包括自动续费与原价包。根据用户类型展示不同计费策略，与客户端约定支付流程，完成产品包的购买，整理平台接口。\n\n* 项目目的\n\n提高用户粘性、提高日活。\n\n* 技术栈\n\nVue\n\n* 负责模块\n\n登陆、用户类型判断、计费策略计算（根据用户类型组装产品以价格为主的基础信息）、支付、解约。与客户端制定相关交互、通信。\n\n* 取得成绩\n\n\n###  模板页 配置后台与前端为主\n\n* 项目介绍\n\n\n项目分为活动展示页、活动配置页。活动展示页包括产品包购买、影片、广告位、游戏位，根据配置页灵活配置渲染模板组件UI、布局、内容。\n\n\n* 项目目的\n\n\n尽可能满足日常活动的业务需求，灵活配置、灵活展示，以高复用率节省后续日常活动的开发成本。\n\n\n* 技术栈\n\n\nVue\n\n\n* 负责模块\n\n负责模板页开发、组件封装，主要包括产品包展示、产品包购买、观影、广告、游戏、登陆、与服务端共同设计接口、编写开发文档\n\n* 取得成绩\n###  活动页整合、优化\n\n* 项目介绍\n\n该项目为将以往活动项目进行整合并优化，主要整合方向为GIT仓库合并、Vue多页面模式、抽离公共代码块、抽离组件、采用hooks抽离耦合度较高的业务逻辑。\n\n* 项目目的\n\n解决了以往维护、迭代旧活动项目时Git仓库混乱，技术栈过旧、不统一的问题；多页面的项目关联有益于代码低耦合，高内聚，从而提高了新活动的开发周期。\n\n* 负责模块\n\n负责老项目的整理、脚手架的搭建、多页面配置、git分支建立、文档编写、抽离封装公共代码块、编写hooks\n\n\n###  商城 支付、埋点为主\n\n\n* 项目介绍\n\n \n###  kv平台 后台管理页面\n###  ott 优化为主\n###    创新项目 整合新技术栈、优化工作流、约束团队开发为主\n","updated":"2022-03-29T10:23:41.796Z","path":"about/index.html","_id":"cl1bor7wn0000qf05g70h46tg","comments":1,"layout":"page","content":"<h2 id=\"个人描述\"><a href=\"#个人描述\" class=\"headerlink\" title=\"个人描述\"></a>个人描述</h2><ul>\n<li><p>熟练掌握JavaScript，对于数据类型、作用域、闭包、异步、原型、事件循环、继承有一定了解</p>\n</li>\n<li><p>熟练掌握Vue2、Vue3以及相关生态工具、UI组件库，包括但不限于Vue-Router、VueX、Vue-Cli、Vite、Pinia、Element UI、Vant……</p>\n</li>\n<li><p>善于集成构建工具、校验工具、单元测试、集成测试、CI持续集成、Git、UI组件库、工具库<br>、Vue、Vite相关插件减少代码量、约束编码风格、优化开发周期，从而整体提高开发效率以及代码质量和产品健壮性。</p>\n</li>\n<li><p>热衷于对产品进行性能以及交互方面优化</p>\n</li>\n<li><p>对新技术保持敏感持续关注技术动态以及相关博客</p>\n</li>\n<li><p>坚持健身，有较强自律性以及身体素质</p>\n</li>\n</ul>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><h3 id=\"掌握\"><a href=\"#掌握\" class=\"headerlink\" title=\"掌握\"></a>掌握</h3><ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>JavaScript</li>\n<li>TypeScript</li>\n<li>ES6</li>\n<li>Vue3、Vue2</li>\n<li>Vite</li>\n<li>webpack</li>\n<li>Node.js</li>\n<li>React</li>\n<li>ESLint</li>\n<li>Prettier</li>\n<li>Husky</li>\n<li>Commitlint</li>\n<li>Commitizen</li>\n<li>CI</li>\n<li>小程序</li>\n<li>i18n</li>\n<li>Mock</li>\n<li>Git</li>\n<li>Echarts</li>\n</ul>\n<h3 id=\"了解\"><a href=\"#了解\" class=\"headerlink\" title=\"了解\"></a>了解</h3><ul>\n<li>跨平台 uni一类</li>\n<li>SSR</li>\n<li>设计模式</li>\n<li>WEB安全</li>\n<li>WEB性能</li>\n<li>HTTP</li>\n<li>Nuxt</li>\n<li>WindiCSS</li>\n<li>Egg.js</li>\n<li>Docker</li>\n<li>nginx</li>\n<li>Canvas</li>\n<li>d3js</li>\n<li>three.js</li>\n<li>WebGL</li>\n<li>Rollup</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"阔孜纳克\"><a href=\"#阔孜纳克\" class=\"headerlink\" title=\"阔孜纳克\"></a>阔孜纳克</h3><ul>\n<li>负责公司web项目（公众号、移动端、PC、小程序）需求评估、研发排期、任务分配、跟进</li>\n<li>与产品、UI同事完善产品交互流程、确定功能可行性；与服务端同事确定通信流程、设计接口</li>\n<li>根据项目类型（需求复杂度、迭代频率、研发周期）确定相关技术栈、GIT工作流</li>\n<li>维护、更新公司公共代码库（JSBridge、CLI、Hooks、常用方法、业务组件）</li>\n<li>定期组织web同事调研新技术、结合业务整合集成到现有技术架构中</li>\n<li>定期组织web同事Code Review、分享编码思想、互通业务、优化项目</li>\n</ul>\n<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2><h3 id=\"推广联盟-gt-公众号、媒体控件相关为主\"><a href=\"#推广联盟-gt-公众号、媒体控件相关为主\" class=\"headerlink\" title=\"推广联盟 =&gt; 公众号、媒体控件相关为主\"></a>推广联盟 =&gt; 公众号、媒体控件相关为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<p>客户端分享影片资源以及信息至微信、QQ等相关社交平台，根据用户类型播放全片或试看；展示相关产品包。</p>\n<ul>\n<li>项目目的</li>\n</ul>\n<p>推广产品、增加用户数量，买会员、增加收益</p>\n<ul>\n<li>技术栈</li>\n</ul>\n<p>Vue</p>\n<ul>\n<li>负责模块</li>\n</ul>\n<p>负责分享页鉴权播放、登陆、引导原始浏览器打开动画、唤起或下载客户端、微信公众号后台配置、与服务端制定接口</p>\n<ul>\n<li>取得成绩</li>\n</ul>\n<h3 id=\"积分中心、农场、购买页-等客户端页面-app交互为主\"><a href=\"#积分中心、农场、购买页-等客户端页面-app交互为主\" class=\"headerlink\" title=\"积分中心、农场、购买页 等客户端页面 app交互为主\"></a>积分中心、农场、购买页 等客户端页面 app交互为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<p>积分中心与农场项目主要包括积分获取和积分商城，积分获取主要包括每日签到与积分任务，积分商城主要内容为限时会员为主的虚拟商品、实物，其中农场动画元素较多类似于蚂蚁农场。</p>\n<p>会员购买页主要为会员包的展示与购买，其中产品包包括自动续费与原价包。根据用户类型展示不同计费策略，与客户端约定支付流程，完成产品包的购买，整理平台接口。</p>\n<ul>\n<li>项目目的</li>\n</ul>\n<p>提高用户粘性、提高日活。</p>\n<ul>\n<li>技术栈</li>\n</ul>\n<p>Vue</p>\n<ul>\n<li>负责模块</li>\n</ul>\n<p>登陆、用户类型判断、计费策略计算（根据用户类型组装产品以价格为主的基础信息）、支付、解约。与客户端制定相关交互、通信。</p>\n<ul>\n<li>取得成绩</li>\n</ul>\n<h3 id=\"模板页-配置后台与前端为主\"><a href=\"#模板页-配置后台与前端为主\" class=\"headerlink\" title=\"模板页 配置后台与前端为主\"></a>模板页 配置后台与前端为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<p>项目分为活动展示页、活动配置页。活动展示页包括产品包购买、影片、广告位、游戏位，根据配置页灵活配置渲染模板组件UI、布局、内容。</p>\n<ul>\n<li>项目目的</li>\n</ul>\n<p>尽可能满足日常活动的业务需求，灵活配置、灵活展示，以高复用率节省后续日常活动的开发成本。</p>\n<ul>\n<li>技术栈</li>\n</ul>\n<p>Vue</p>\n<ul>\n<li>负责模块</li>\n</ul>\n<p>负责模板页开发、组件封装，主要包括产品包展示、产品包购买、观影、广告、游戏、登陆、与服务端共同设计接口、编写开发文档</p>\n<ul>\n<li><p>取得成绩</p>\n<h3 id=\"活动页整合、优化\"><a href=\"#活动页整合、优化\" class=\"headerlink\" title=\"活动页整合、优化\"></a>活动页整合、优化</h3></li>\n<li><p>项目介绍</p>\n</li>\n</ul>\n<p>该项目为将以往活动项目进行整合并优化，主要整合方向为GIT仓库合并、Vue多页面模式、抽离公共代码块、抽离组件、采用hooks抽离耦合度较高的业务逻辑。</p>\n<ul>\n<li>项目目的</li>\n</ul>\n<p>解决了以往维护、迭代旧活动项目时Git仓库混乱，技术栈过旧、不统一的问题；多页面的项目关联有益于代码低耦合，高内聚，从而提高了新活动的开发周期。</p>\n<ul>\n<li>负责模块</li>\n</ul>\n<p>负责老项目的整理、脚手架的搭建、多页面配置、git分支建立、文档编写、抽离封装公共代码块、编写hooks</p>\n<h3 id=\"商城-支付、埋点为主\"><a href=\"#商城-支付、埋点为主\" class=\"headerlink\" title=\"商城 支付、埋点为主\"></a>商城 支付、埋点为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<h3 id=\"kv平台-后台管理页面\"><a href=\"#kv平台-后台管理页面\" class=\"headerlink\" title=\"kv平台 后台管理页面\"></a>kv平台 后台管理页面</h3><h3 id=\"ott-优化为主\"><a href=\"#ott-优化为主\" class=\"headerlink\" title=\"ott 优化为主\"></a>ott 优化为主</h3><h3 id=\"创新项目-整合新技术栈、优化工作流、约束团队开发为主\"><a href=\"#创新项目-整合新技术栈、优化工作流、约束团队开发为主\" class=\"headerlink\" title=\"创新项目 整合新技术栈、优化工作流、约束团队开发为主\"></a>创新项目 整合新技术栈、优化工作流、约束团队开发为主</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人描述\"><a href=\"#个人描述\" class=\"headerlink\" title=\"个人描述\"></a>个人描述</h2><ul>\n<li><p>熟练掌握JavaScript，对于数据类型、作用域、闭包、异步、原型、事件循环、继承有一定了解</p>\n</li>\n<li><p>熟练掌握Vue2、Vue3以及相关生态工具、UI组件库，包括但不限于Vue-Router、VueX、Vue-Cli、Vite、Pinia、Element UI、Vant……</p>\n</li>\n<li><p>善于集成构建工具、校验工具、单元测试、集成测试、CI持续集成、Git、UI组件库、工具库<br>、Vue、Vite相关插件减少代码量、约束编码风格、优化开发周期，从而整体提高开发效率以及代码质量和产品健壮性。</p>\n</li>\n<li><p>热衷于对产品进行性能以及交互方面优化</p>\n</li>\n<li><p>对新技术保持敏感持续关注技术动态以及相关博客</p>\n</li>\n<li><p>坚持健身，有较强自律性以及身体素质</p>\n</li>\n</ul>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><h3 id=\"掌握\"><a href=\"#掌握\" class=\"headerlink\" title=\"掌握\"></a>掌握</h3><ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>JavaScript</li>\n<li>TypeScript</li>\n<li>ES6</li>\n<li>Vue3、Vue2</li>\n<li>Vite</li>\n<li>webpack</li>\n<li>Node.js</li>\n<li>React</li>\n<li>ESLint</li>\n<li>Prettier</li>\n<li>Husky</li>\n<li>Commitlint</li>\n<li>Commitizen</li>\n<li>CI</li>\n<li>小程序</li>\n<li>i18n</li>\n<li>Mock</li>\n<li>Git</li>\n<li>Echarts</li>\n</ul>\n<h3 id=\"了解\"><a href=\"#了解\" class=\"headerlink\" title=\"了解\"></a>了解</h3><ul>\n<li>跨平台 uni一类</li>\n<li>SSR</li>\n<li>设计模式</li>\n<li>WEB安全</li>\n<li>WEB性能</li>\n<li>HTTP</li>\n<li>Nuxt</li>\n<li>WindiCSS</li>\n<li>Egg.js</li>\n<li>Docker</li>\n<li>nginx</li>\n<li>Canvas</li>\n<li>d3js</li>\n<li>three.js</li>\n<li>WebGL</li>\n<li>Rollup</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"阔孜纳克\"><a href=\"#阔孜纳克\" class=\"headerlink\" title=\"阔孜纳克\"></a>阔孜纳克</h3><ul>\n<li>负责公司web项目（公众号、移动端、PC、小程序）需求评估、研发排期、任务分配、跟进</li>\n<li>与产品、UI同事完善产品交互流程、确定功能可行性；与服务端同事确定通信流程、设计接口</li>\n<li>根据项目类型（需求复杂度、迭代频率、研发周期）确定相关技术栈、GIT工作流</li>\n<li>维护、更新公司公共代码库（JSBridge、CLI、Hooks、常用方法、业务组件）</li>\n<li>定期组织web同事调研新技术、结合业务整合集成到现有技术架构中</li>\n<li>定期组织web同事Code Review、分享编码思想、互通业务、优化项目</li>\n</ul>\n<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2><h3 id=\"推广联盟-gt-公众号、媒体控件相关为主\"><a href=\"#推广联盟-gt-公众号、媒体控件相关为主\" class=\"headerlink\" title=\"推广联盟 =&gt; 公众号、媒体控件相关为主\"></a>推广联盟 =&gt; 公众号、媒体控件相关为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<p>客户端分享影片资源以及信息至微信、QQ等相关社交平台，根据用户类型播放全片或试看；展示相关产品包。</p>\n<ul>\n<li>项目目的</li>\n</ul>\n<p>推广产品、增加用户数量，买会员、增加收益</p>\n<ul>\n<li>技术栈</li>\n</ul>\n<p>Vue</p>\n<ul>\n<li>负责模块</li>\n</ul>\n<p>负责分享页鉴权播放、登陆、引导原始浏览器打开动画、唤起或下载客户端、微信公众号后台配置、与服务端制定接口</p>\n<ul>\n<li>取得成绩</li>\n</ul>\n<h3 id=\"积分中心、农场、购买页-等客户端页面-app交互为主\"><a href=\"#积分中心、农场、购买页-等客户端页面-app交互为主\" class=\"headerlink\" title=\"积分中心、农场、购买页 等客户端页面 app交互为主\"></a>积分中心、农场、购买页 等客户端页面 app交互为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<p>积分中心与农场项目主要包括积分获取和积分商城，积分获取主要包括每日签到与积分任务，积分商城主要内容为限时会员为主的虚拟商品、实物，其中农场动画元素较多类似于蚂蚁农场。</p>\n<p>会员购买页主要为会员包的展示与购买，其中产品包包括自动续费与原价包。根据用户类型展示不同计费策略，与客户端约定支付流程，完成产品包的购买，整理平台接口。</p>\n<ul>\n<li>项目目的</li>\n</ul>\n<p>提高用户粘性、提高日活。</p>\n<ul>\n<li>技术栈</li>\n</ul>\n<p>Vue</p>\n<ul>\n<li>负责模块</li>\n</ul>\n<p>登陆、用户类型判断、计费策略计算（根据用户类型组装产品以价格为主的基础信息）、支付、解约。与客户端制定相关交互、通信。</p>\n<ul>\n<li>取得成绩</li>\n</ul>\n<h3 id=\"模板页-配置后台与前端为主\"><a href=\"#模板页-配置后台与前端为主\" class=\"headerlink\" title=\"模板页 配置后台与前端为主\"></a>模板页 配置后台与前端为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<p>项目分为活动展示页、活动配置页。活动展示页包括产品包购买、影片、广告位、游戏位，根据配置页灵活配置渲染模板组件UI、布局、内容。</p>\n<ul>\n<li>项目目的</li>\n</ul>\n<p>尽可能满足日常活动的业务需求，灵活配置、灵活展示，以高复用率节省后续日常活动的开发成本。</p>\n<ul>\n<li>技术栈</li>\n</ul>\n<p>Vue</p>\n<ul>\n<li>负责模块</li>\n</ul>\n<p>负责模板页开发、组件封装，主要包括产品包展示、产品包购买、观影、广告、游戏、登陆、与服务端共同设计接口、编写开发文档</p>\n<ul>\n<li><p>取得成绩</p>\n<h3 id=\"活动页整合、优化\"><a href=\"#活动页整合、优化\" class=\"headerlink\" title=\"活动页整合、优化\"></a>活动页整合、优化</h3></li>\n<li><p>项目介绍</p>\n</li>\n</ul>\n<p>该项目为将以往活动项目进行整合并优化，主要整合方向为GIT仓库合并、Vue多页面模式、抽离公共代码块、抽离组件、采用hooks抽离耦合度较高的业务逻辑。</p>\n<ul>\n<li>项目目的</li>\n</ul>\n<p>解决了以往维护、迭代旧活动项目时Git仓库混乱，技术栈过旧、不统一的问题；多页面的项目关联有益于代码低耦合，高内聚，从而提高了新活动的开发周期。</p>\n<ul>\n<li>负责模块</li>\n</ul>\n<p>负责老项目的整理、脚手架的搭建、多页面配置、git分支建立、文档编写、抽离封装公共代码块、编写hooks</p>\n<h3 id=\"商城-支付、埋点为主\"><a href=\"#商城-支付、埋点为主\" class=\"headerlink\" title=\"商城 支付、埋点为主\"></a>商城 支付、埋点为主</h3><ul>\n<li>项目介绍</li>\n</ul>\n<h3 id=\"kv平台-后台管理页面\"><a href=\"#kv平台-后台管理页面\" class=\"headerlink\" title=\"kv平台 后台管理页面\"></a>kv平台 后台管理页面</h3><h3 id=\"ott-优化为主\"><a href=\"#ott-优化为主\" class=\"headerlink\" title=\"ott 优化为主\"></a>ott 优化为主</h3><h3 id=\"创新项目-整合新技术栈、优化工作流、约束团队开发为主\"><a href=\"#创新项目-整合新技术栈、优化工作流、约束团队开发为主\" class=\"headerlink\" title=\"创新项目 整合新技术栈、优化工作流、约束团队开发为主\"></a>创新项目 整合新技术栈、优化工作流、约束团队开发为主</h3>"}],"Post":[{"title":"TypeScript","date":"2022-03-27T13:02:26.000Z","_content":"\n\n\n\n# TypeScript\n`TypeScript`是由微软推出并推动的一个静态类型检查的编译型编程语言，可以完美兼容ES6的`JavaScript`。目前大量前端库和应用使用`TS`开发，已然成为前端的主流开发语言。\n\n## 优势\n* 静态编译，减少`JS`动态语言特性带来了的非常多的隐藏bug\n* 类型安全检查在编译阶段完成\n* 大型项目的更好的进行管理和向后约定维护\n* 为前端的彻底的静态安全的类型检查、类型继承、抽象设计体系铺好了基石\n* 更加友好的智能提示和文档说明\n\n## \t安装TypeScript\n有两种主要的方式来获取`TypeScript`工具\n\n* 通过`npm`安装\n\n\t`npm install -g typescript`\n* 安装Visual Studio的`TypeScript`插件\n\n\n## 编译代码\n\n\n启动编译后，可以添加`-w`参数，让编译工具一直监听文件的变化，`ts`文件变化后自动编译。\n\n\ttsc -w tyDemon.ts\n\t\tor\n\ttsc --watch tyDemon.ts\n\n编译多个`ts`文件\n\n* 编译当前目录下的所有的`ts`文件\n\n\t\ttsc -w *.ts\n\n*  编译当前目录及子目录的`ts`文件\n\n\t\ttsc -w ./**/*.ts\n\t\n\n## 数据类型\n### 布尔值\n最基本的数据类型就是简单的`true`/`false`值，在`JavaScript`和`TypeScript`里叫做`boolean`\n\n```javascript\n\tlet isDone: boolean = false; \n\t// 冒号后面是对当前变量类型的声明，isDone只能赋值布尔类型值，否则会编译失败。\n```\n\n### 数字\n和`JavaScript`一样，`TypeScript`里的所有数字都是浮点数。 这些浮点数的类型是 `number`。 除了支持十进制和十六进制字面量，`TypeScript`还支持`ES5`中引入的二进制和八进制字面量\n\n```javascript\nlet num1: number = 6;\nlet num2: number = 0xf00d;\nlet num3: number = 0b1010;\nlet num4: number = 0o744;\n```\n\n### 字符串\n`JavaScript`程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 `string`表示文本数据类型。 和`JavaScript`一样，可以使用双引号`\"`或单引号`'`表示字符串\n\n```javascript\n\tlet name: string = \"bob\";\n\tname = \"smith\";\n```\n\n### 数组\n`TypeScript`像`JavaScript`一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 `[]`，表示由此类型元素组成的一个数组\n\n```javascript\n\tlet list: number[] = [1, 2, 3];\n\tlet list: Array<number> = [1, 2, 3];\n```\n### 元祖\n元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 `string`和`number`类型的元组。\n\n```javascript\n\tlet x: [string, number];\n\tx = ['hello', 10]; // OK\n\tx = [10, 'hello']; // Error\n```\n\n### any\n有时候，会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 `any`类型来标记这些变量\n\n```javascript\n\tlet any1: any = 4;\n\tany1 = \"maybe a string instead\";\n\tany2 = false; \n```\n\n### void\n它表示没有任何类型。 当一个函数没有返回值时，会见到其返回值类型是`void`\n\n```javascript\n\tfunction fn(): void {\n    console.log(\"This is message\");\n\t}\n```\n\n声明`void`变量只能给其赋值为`null`, `undefined`\n\n```javascript\n\tlet void1: void = undefined;\n```\n\n### Null 和 Undefined\n`undefined`和`null`两者各自有自己的类型分别叫做`undefined`和`null`。 和 `void`相似。\n\n```javascript\n\tlet u: undefined = undefined;\n\tlet n: null = null;\n```\n\n### Object\n`object`表示非原始类型，也就是除`number`，`string`，`boolean`，`symbol`，`null`或`undefined`之外的类型。\n\n```javascript\n\tdeclare function create(o: object | null): void;\n\n\tcreate({ prop: 0 }); // OK\n\tcreate(null); // OK\n\n\tcreate(42); // Error\n\tcreate(\"string\"); // Error\n\tcreate(false); // Error\n\tcreate(undefined); // Error\n```\n\n### 枚举\n`enum`类型是对`JavaScript`标准数据类型的一个补充。 像`C#`等其它语言一样，使用枚举类型可以为一组数值赋予名字。\n\n```javascript\n\tenum Color {Red, Green, Blue}\n\tlet c: Color = Color.Green;\n```\n默认情况下，从0开始为元素编号。 也可以手动的指定成员的数值。 例如，将上面的例子改成从 1开始编号：\n\n```javascript\n\tenum Color {Red = 1, Green, Blue}\n\tlet c: Color = Color.Green;\n```\n\t\n枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到`Color`里的哪个名字，可以查找相应的名字\n\n```javascript\n\tenum Color {Red = 1, Green, Blue}\n\tlet colorName: string = Color[2];\n\n\tconsole.log(colorName);  // 显示'Green'因为上面代码里它的值是2\n```\n\t\n\t\n### 函数\n#### 函数的声明\n 一个函数有输入和输出，要在 `TypeScript` 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单\n \n ```javascript\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n输入多余的（或者少于要求的）参数，是不被允许的\n\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n\tsum(1, 2, 3);\n\t\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n\tsum(1);\n```\n\n#### 函数表达式\n如果要现在写一个对函数表达式的定义，可能会写成这样\n\n```javascript\n\tlet mySum = function (x: number, y: number): number {\n    return x + y;\n\t};\n```\n这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 `mySum`，是通过赋值操作进行类型推论而推断出来的。如果需要手动给 `mySum` 添加类型，则应该是这样：\n\n```javascript\n\tlet mySum: (x: number, y: number) => number = function (x: number, y: number): number {\n    return x + y;\n\t};\n```\n注意不要混淆了 `TypeScript` 中的 `=>` 和 `ES6` 中的 `=>`。\n\n在 `TypeScript` 的类型定义中，`=>` 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。\n\n在 ES6 中，=> 叫做箭头函数，应用十分广泛\n#### 用接口定义函数的形状\n也可以使用接口的方式来定义一个函数需要符合的形状：\n\n```javascript\n\tinterface SearchFunc {\n    (source: string, subString: string): boolean;\n\t}\n\n\tlet mySearch: SearchFunc;\n\tmySearch = function(source: string, subString: string) {\n    return source.search(subString) !== -1;\n\t}\n```\n#### 可选参数\n输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？\n\n与接口中的可选属性类似，我们用 `?` 表示可选的参数：\n\n```javascript\n\tfunction buildName(firstName: string, lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName('Tom');\n```\n需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了\n\n```javascript\n\tfunction buildName(firstName?: string, lastName: string) {\n    if (firstName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return lastName;\n    }\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName(undefined, 'Tom');\n```\n#### 参数默认值\n在 ES6 中，允许给函数的参数添加默认值，`TypeScript` 会将添加了默认值的参数识别为可选参数：\n\n```javascript\n\tfunction buildName(firstName: string, lastName: string = 'Cat') {\n    return firstName + ' ' + lastName;\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName('Tom');\n此时就不受「可选参数必须接在必需参数后面」的限制了：\n\n\tfunction buildName(firstName: string = 'Tom', lastName: string) {\n    return firstName + ' ' + lastName;\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet cat = buildName(undefined, 'Cat');\n```\n\n#### 剩余参数\nES6 中，可以使用 `...rest` 的方式获取函数中的剩余参数（rest 参数）：\n\n```javascript\n\tfunction push(array, ...items) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n\t}\n\n\tlet a = [];\n\tpush(a, 1, 2, 3);\n```\n\n事实上，`items` 是一个数组。所以可以用数组的类型来定义它：\n\n```javascript\n\tfunction push(array: any[], ...items: any[]) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n\t}\n\n\tlet a = [];\n\tpush(a, 1, 2, 3);\n```\n注意，rest 参数只能是最后一个参数\n\n#### 重载\n重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。\n\n比如，需要实现一个函数 `reverse`，输入数字 `123` 的时候，输出反转的数字 `321`，输入字符串 `'hello'` 的时候，输出反转的字符串 `'olleh'`。\n\n利用联合类型，可以这么实现：\n\n```javascript\n\t\tfunction reverse(x: number | string): number | string {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n\t}\n```\n然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。\n\n这时，可以使用重载定义多个 `reverse` 的函数类型：\n\n```javascript\n\t\tfunction reverse(x: number): number;\n\t\tfunction reverse(x: string): string;\n\t\tfunction reverse(x: number | string): number | string {\n\t\t    if (typeof x === 'number') {\n       \t\t return Number(x.toString().split('').reverse().join(''));\n\t\t    } else if (typeof x === 'string') {\n       \t\t return x.split('').reverse().join('');\n\t\t    }\n\t\t}\n```\n上例中，重复定义了多次函数 `reverse`，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。\n\n注意，`TypeScript` 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。\n\n\t\n## 对象的类型——接口\n在 `TypeScript` 中，使用接口来定义对象的类型。\n\n在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。\n\n`TypeScript` 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状」进行描述。\n\n### 简单的例子\n\n```javascript\n\t\tinterface Person {\n\t    name: string;\n\t\tage: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\tname: 'Tom',\n\t\tage: 25\n\t\t};\n```\t\n定义了一个接口 Person，接着定义了一个变量 tom\n\n它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致\n\n接口一般首字母大写\n\n定义的变量比接口少了、多了一些一些属性是不允许的：\n\n```javascript\n\tinterface Person {\n\t\tname: string;\n\t\tage: number;\n\t}\n\n\tlet tom: Person = {\n\t    name: 'Tom'\n\t};\n\n\t// index.ts(6,5): error TS2322: Type '{ name: string; }' is not assignable to type 'Person'.\n\t//   Property 'age' is missing in type '{ name: string; }'.\n\t\n\t\tinterface Person {\n\t    name: string;\n\t    age: number;\n\t\t}\n\n\tlet tom: Person = {\n\t\tname: 'Tom',\n\t   \tage: 25,\n\t\tgender: 'male'\n\t};\n\n\t// index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is \tnot assignable to type 'Person'.\n\t//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.\n```\n### 可选属性\n\n有时希望不要完全匹配一个形状，那么可以用可选属性\n\n```javascript\n\t\tinterface Person {\n\t\t\tname: string;\n\t\t   \tage?: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\t    name: 'Tom'\n\t\t};\n\t\t\n\t\tnterface Person {\n\t\t    name: string;\n\t\t    age?: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\t    name: 'Tom',\n\t\t    age: 25\n\t\t};\n```\n\n这时仍然不允许添加未定义的属性\n\n```javascript\n\tinterface Person {\n    \tname: string;\n\t   \tage?: number;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   age: 25,\n\t   gender: 'male'\n\t};\n\n\t// examples/playground/index.ts(9,5): error TS2322: Type '{ name: string; age: number; \tgender: string; }' is not assignable to type 'Person'.\n\t//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.\n```\n### 任意属性\n有时候希望一个接口允许有任意的属性，可以使用如下方式：\n\n```javascript\n\tinterface Person {\n\t   \tname: string;\n\t\tage?: number;\n\t   [propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   gender: 'male'\n\t};\n```\n\n使用 `[propName: string]` 定义了任意属性取 `string` 类型的值。\n\n需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：\n\n```javascript\n\tinterface Person {\n    name: string;\n    age?: number;\n    [propName: string]: string;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n    \tage: 25,\n    \tgender: 'male'\n\t};\n\n\t// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string \tindex type 'string'.\n\t// index.ts(7,5): error TS2322: Type '{ [x: string]: string | number; name: string; age: \tnumber; gender: string; }' is not assignable to type 'Person'.\n\t//   Index signatures are incompatible.\n\t//     Type 'string | number' is not assignable to type 'string'.\n\t//       Type 'number' is not assignable to type 'string'.\n```\n\n上例中，任意属性的值允许是 `string`，但是可选属性 `age` 的值却是 `number`，`number` 不是 `string` 的子属性，所以报错了。\n\n另外，在报错信息中可以看出，此时 `{ name: 'Tom', age: 25, gender: 'male' }` 的类型被推断成了 `{ [x: string]: string | number; name: string; age: number; gender: string; }`，这是联合类型和接口的结合。\n\n### 只读属性\n有时候希望对象中的一些字段只能在创建的时候被赋值，那么可以用 `readonly` 定义只读属性：\n\n```javascript\n\tinterface Person {\n    \treadonly id: number;\n    \tname: string;\n    \tage?: number;\n    \t[propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tid: 89757,\n    \tname: 'Tom',\n    \tgender: 'male'\n\t};\n\n\ttom.id = 9527;\n\n\t// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property\n```\n\t\n上例中，使用 `readonly` 定义的属性 `id` 初始化后，又被赋值了，所以报错了。\n\n注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：\n\n```javascript\n\tinterface Person {\n    \treadonly id: number;\n    \tname: string;\n    \tage?: number;\n    \t[propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   gender: 'male'\n\t};\n\n\ttom.id = 89757;\n\n\t// index.ts(8,5): error TS2322: Type '{ name: string; gender: string; }' is not assignable \tto type 'Person'.\n\t//   Property 'id' is missing in type '{ name: string; gender: string; }'.\n\t// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property.\n\t\n```\n上例中，报错信息有两处，第一处是在对 `tom` 进行赋值的时候，没有给 `id` 赋值。\n\n第二处是在给 `tom.id` 赋值的时候，由于它是只读属性，所以报错了。\n\n## 类型断言\n类型断言`（Type Assertion）`可以用来手动指定一个值的类型。\n\n语法\n\n\t<类型>值\n\t\t或\n\t值 as 类型\n在 `tsx` 语法（`React` 的 `jsx` 语法的 `ts` 版）中必须用后一种。\n\n例子：将一个联合类型的变量指定为一个更加具体的类型\n\n当 `TypeScript` 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \treturn something.length;\n\t}\n\n\t// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n```\n而有时候，确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \tif (something.length) {\n        \treturn something.length;\n    \t} else {\n        \treturn something.toString().length;\n    \t}\n\t}\n\n\t// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n\t// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n```\n上例中，获取 `something.length` 的时候会报错。\n\n此时可以使用类型断言，将 `something` 断言成 `string4`：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \tif ((<string>something).length) {\n        \treturn (<string>something).length;\n    \t} else {\n        \treturn something.toString().length;\n    \t}\n\t}\n```\n类型断言的用法如上，在需要断言的变量前加上 `<Type>` 即可。\n\n类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：\n\n```javascript\n\tfunction toBoolean(something: string | number): boolean {\n    \treturn <boolean>something;\n\t}\n\n\t// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.\n\t//   Type 'number' is not comparable to type 'boolean'.\n```\n## 内置对象\n`JavaScript` 中有很多内置对象，它们可以直接在 `TypeScript` 中当做定义好了的类型。\n内置对象是指根据标准在全局作用域（`Global`）上存在的对象。这里的标准是指 `ECMAScript` 和其他环境（比如 `DOM`）的标准。\n\n### ECMAScript 的内置对象\n* Boolean\n* Error\n* Date\n* RegExp\n* ......\n\n可以在 `TypeScript` 中将变量定义为这些类型：\n\n```javascript\n\tlet b: Boolean = new Boolean(1);\n\tlet e: Error = new Error('Error occurred');\n\tlet d: Date = new Date();\n\tlet r: RegExp = /[a-z]/;\n```\n\n### DOM 和 BOM 的内置对象\n\n* Document\n* HTMLElement\n* Event\n* NodeList\n* ......\n\n`TypeScript` 中会经常用到这些类型：\n\n```javascript\n\tlet body: HTMLElement = document.body;\n\tlet allDiv: NodeList = document.querySelectorAll('div');\n\tdocument.addEventListener('click', function(e: MouseEvent) {\n\t  // Do something\n\t});\n```\n### TypeScript 核心库的定义文件\n`TypeScript` 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 `TypeScript` 中的。\n\n当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：\n\n```javascript\n\tMath.pow(10, '2');\n\n\t// index.ts(1,14): error TS2345: Argument of type 'string' is not assignable to parameter \tof type 'number'\n```\n上面的例子中，`Math.pow` 必须接受两个 `number` 类型的参数。事实上 `Math.pow` 的类型定义如下：\n\n```javascript\n\tinterface Math {\n\t\tpow(x: number, y: number): number;\n\t}\n```\n`DOM` 中的例子：\n\n```javascript\n\tdocument.addEventListener('click', function(e) {\n    \tconsole.log(e.targetCurrent);\n\t});\n\n\t// index.ts(2,17): error TS2339: Property 'targetCurrent' does not exist on type \t'MouseEvent'.\n```\n上面的例子中，`addEventListener` 方法是在 `TypeScript` 核心库中定义的：\n\n```javascript\n\tinterface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent {\n\t\taddEventListener(type: string, listener: (ev: MouseEvent) => any, useCapture?: \tboolean): void;\n\t}\n```\n\t\n所以 `e` 被推断成了 `MouseEvent`，而 `MouseEvent` 是没有 `targetCurrent` 属性的，所以报错了。\n\n注意，`TypeScript` 核心库的定义中不包含 `Node.js` 部分。\n\n`Node.js` 不是内置对象的一部分，如果想用 `TypeScript` 写 `Node.js`，则需要引入第三方声明文件：\n\n\tnpm install @types/node --save-dev\n\n\n## 未完待续...\n","source":"_posts/TypeScript.md","raw":"---\ntitle: TypeScript\ndate: 2022-03-27 21:02:26\ntags: code\n---\n\n\n\n\n# TypeScript\n`TypeScript`是由微软推出并推动的一个静态类型检查的编译型编程语言，可以完美兼容ES6的`JavaScript`。目前大量前端库和应用使用`TS`开发，已然成为前端的主流开发语言。\n\n## 优势\n* 静态编译，减少`JS`动态语言特性带来了的非常多的隐藏bug\n* 类型安全检查在编译阶段完成\n* 大型项目的更好的进行管理和向后约定维护\n* 为前端的彻底的静态安全的类型检查、类型继承、抽象设计体系铺好了基石\n* 更加友好的智能提示和文档说明\n\n## \t安装TypeScript\n有两种主要的方式来获取`TypeScript`工具\n\n* 通过`npm`安装\n\n\t`npm install -g typescript`\n* 安装Visual Studio的`TypeScript`插件\n\n\n## 编译代码\n\n\n启动编译后，可以添加`-w`参数，让编译工具一直监听文件的变化，`ts`文件变化后自动编译。\n\n\ttsc -w tyDemon.ts\n\t\tor\n\ttsc --watch tyDemon.ts\n\n编译多个`ts`文件\n\n* 编译当前目录下的所有的`ts`文件\n\n\t\ttsc -w *.ts\n\n*  编译当前目录及子目录的`ts`文件\n\n\t\ttsc -w ./**/*.ts\n\t\n\n## 数据类型\n### 布尔值\n最基本的数据类型就是简单的`true`/`false`值，在`JavaScript`和`TypeScript`里叫做`boolean`\n\n```javascript\n\tlet isDone: boolean = false; \n\t// 冒号后面是对当前变量类型的声明，isDone只能赋值布尔类型值，否则会编译失败。\n```\n\n### 数字\n和`JavaScript`一样，`TypeScript`里的所有数字都是浮点数。 这些浮点数的类型是 `number`。 除了支持十进制和十六进制字面量，`TypeScript`还支持`ES5`中引入的二进制和八进制字面量\n\n```javascript\nlet num1: number = 6;\nlet num2: number = 0xf00d;\nlet num3: number = 0b1010;\nlet num4: number = 0o744;\n```\n\n### 字符串\n`JavaScript`程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 `string`表示文本数据类型。 和`JavaScript`一样，可以使用双引号`\"`或单引号`'`表示字符串\n\n```javascript\n\tlet name: string = \"bob\";\n\tname = \"smith\";\n```\n\n### 数组\n`TypeScript`像`JavaScript`一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 `[]`，表示由此类型元素组成的一个数组\n\n```javascript\n\tlet list: number[] = [1, 2, 3];\n\tlet list: Array<number> = [1, 2, 3];\n```\n### 元祖\n元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 `string`和`number`类型的元组。\n\n```javascript\n\tlet x: [string, number];\n\tx = ['hello', 10]; // OK\n\tx = [10, 'hello']; // Error\n```\n\n### any\n有时候，会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 `any`类型来标记这些变量\n\n```javascript\n\tlet any1: any = 4;\n\tany1 = \"maybe a string instead\";\n\tany2 = false; \n```\n\n### void\n它表示没有任何类型。 当一个函数没有返回值时，会见到其返回值类型是`void`\n\n```javascript\n\tfunction fn(): void {\n    console.log(\"This is message\");\n\t}\n```\n\n声明`void`变量只能给其赋值为`null`, `undefined`\n\n```javascript\n\tlet void1: void = undefined;\n```\n\n### Null 和 Undefined\n`undefined`和`null`两者各自有自己的类型分别叫做`undefined`和`null`。 和 `void`相似。\n\n```javascript\n\tlet u: undefined = undefined;\n\tlet n: null = null;\n```\n\n### Object\n`object`表示非原始类型，也就是除`number`，`string`，`boolean`，`symbol`，`null`或`undefined`之外的类型。\n\n```javascript\n\tdeclare function create(o: object | null): void;\n\n\tcreate({ prop: 0 }); // OK\n\tcreate(null); // OK\n\n\tcreate(42); // Error\n\tcreate(\"string\"); // Error\n\tcreate(false); // Error\n\tcreate(undefined); // Error\n```\n\n### 枚举\n`enum`类型是对`JavaScript`标准数据类型的一个补充。 像`C#`等其它语言一样，使用枚举类型可以为一组数值赋予名字。\n\n```javascript\n\tenum Color {Red, Green, Blue}\n\tlet c: Color = Color.Green;\n```\n默认情况下，从0开始为元素编号。 也可以手动的指定成员的数值。 例如，将上面的例子改成从 1开始编号：\n\n```javascript\n\tenum Color {Red = 1, Green, Blue}\n\tlet c: Color = Color.Green;\n```\n\t\n枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到`Color`里的哪个名字，可以查找相应的名字\n\n```javascript\n\tenum Color {Red = 1, Green, Blue}\n\tlet colorName: string = Color[2];\n\n\tconsole.log(colorName);  // 显示'Green'因为上面代码里它的值是2\n```\n\t\n\t\n### 函数\n#### 函数的声明\n 一个函数有输入和输出，要在 `TypeScript` 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单\n \n ```javascript\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n输入多余的（或者少于要求的）参数，是不被允许的\n\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n\tsum(1, 2, 3);\n\t\n\tfunction sum(x: number, y: number): number {\n    return x + y;\n\t}\n\tsum(1);\n```\n\n#### 函数表达式\n如果要现在写一个对函数表达式的定义，可能会写成这样\n\n```javascript\n\tlet mySum = function (x: number, y: number): number {\n    return x + y;\n\t};\n```\n这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 `mySum`，是通过赋值操作进行类型推论而推断出来的。如果需要手动给 `mySum` 添加类型，则应该是这样：\n\n```javascript\n\tlet mySum: (x: number, y: number) => number = function (x: number, y: number): number {\n    return x + y;\n\t};\n```\n注意不要混淆了 `TypeScript` 中的 `=>` 和 `ES6` 中的 `=>`。\n\n在 `TypeScript` 的类型定义中，`=>` 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。\n\n在 ES6 中，=> 叫做箭头函数，应用十分广泛\n#### 用接口定义函数的形状\n也可以使用接口的方式来定义一个函数需要符合的形状：\n\n```javascript\n\tinterface SearchFunc {\n    (source: string, subString: string): boolean;\n\t}\n\n\tlet mySearch: SearchFunc;\n\tmySearch = function(source: string, subString: string) {\n    return source.search(subString) !== -1;\n\t}\n```\n#### 可选参数\n输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？\n\n与接口中的可选属性类似，我们用 `?` 表示可选的参数：\n\n```javascript\n\tfunction buildName(firstName: string, lastName?: string) {\n    if (lastName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return firstName;\n    }\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName('Tom');\n```\n需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了\n\n```javascript\n\tfunction buildName(firstName?: string, lastName: string) {\n    if (firstName) {\n        return firstName + ' ' + lastName;\n    } else {\n        return lastName;\n    }\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName(undefined, 'Tom');\n```\n#### 参数默认值\n在 ES6 中，允许给函数的参数添加默认值，`TypeScript` 会将添加了默认值的参数识别为可选参数：\n\n```javascript\n\tfunction buildName(firstName: string, lastName: string = 'Cat') {\n    return firstName + ' ' + lastName;\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet tom = buildName('Tom');\n此时就不受「可选参数必须接在必需参数后面」的限制了：\n\n\tfunction buildName(firstName: string = 'Tom', lastName: string) {\n    return firstName + ' ' + lastName;\n\t}\n\tlet tomcat = buildName('Tom', 'Cat');\n\tlet cat = buildName(undefined, 'Cat');\n```\n\n#### 剩余参数\nES6 中，可以使用 `...rest` 的方式获取函数中的剩余参数（rest 参数）：\n\n```javascript\n\tfunction push(array, ...items) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n\t}\n\n\tlet a = [];\n\tpush(a, 1, 2, 3);\n```\n\n事实上，`items` 是一个数组。所以可以用数组的类型来定义它：\n\n```javascript\n\tfunction push(array: any[], ...items: any[]) {\n    items.forEach(function(item) {\n        array.push(item);\n    });\n\t}\n\n\tlet a = [];\n\tpush(a, 1, 2, 3);\n```\n注意，rest 参数只能是最后一个参数\n\n#### 重载\n重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。\n\n比如，需要实现一个函数 `reverse`，输入数字 `123` 的时候，输出反转的数字 `321`，输入字符串 `'hello'` 的时候，输出反转的字符串 `'olleh'`。\n\n利用联合类型，可以这么实现：\n\n```javascript\n\t\tfunction reverse(x: number | string): number | string {\n    if (typeof x === 'number') {\n        return Number(x.toString().split('').reverse().join(''));\n    } else if (typeof x === 'string') {\n        return x.split('').reverse().join('');\n    }\n\t}\n```\n然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。\n\n这时，可以使用重载定义多个 `reverse` 的函数类型：\n\n```javascript\n\t\tfunction reverse(x: number): number;\n\t\tfunction reverse(x: string): string;\n\t\tfunction reverse(x: number | string): number | string {\n\t\t    if (typeof x === 'number') {\n       \t\t return Number(x.toString().split('').reverse().join(''));\n\t\t    } else if (typeof x === 'string') {\n       \t\t return x.split('').reverse().join('');\n\t\t    }\n\t\t}\n```\n上例中，重复定义了多次函数 `reverse`，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。\n\n注意，`TypeScript` 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。\n\n\t\n## 对象的类型——接口\n在 `TypeScript` 中，使用接口来定义对象的类型。\n\n在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。\n\n`TypeScript` 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状」进行描述。\n\n### 简单的例子\n\n```javascript\n\t\tinterface Person {\n\t    name: string;\n\t\tage: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\tname: 'Tom',\n\t\tage: 25\n\t\t};\n```\t\n定义了一个接口 Person，接着定义了一个变量 tom\n\n它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致\n\n接口一般首字母大写\n\n定义的变量比接口少了、多了一些一些属性是不允许的：\n\n```javascript\n\tinterface Person {\n\t\tname: string;\n\t\tage: number;\n\t}\n\n\tlet tom: Person = {\n\t    name: 'Tom'\n\t};\n\n\t// index.ts(6,5): error TS2322: Type '{ name: string; }' is not assignable to type 'Person'.\n\t//   Property 'age' is missing in type '{ name: string; }'.\n\t\n\t\tinterface Person {\n\t    name: string;\n\t    age: number;\n\t\t}\n\n\tlet tom: Person = {\n\t\tname: 'Tom',\n\t   \tage: 25,\n\t\tgender: 'male'\n\t};\n\n\t// index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is \tnot assignable to type 'Person'.\n\t//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.\n```\n### 可选属性\n\n有时希望不要完全匹配一个形状，那么可以用可选属性\n\n```javascript\n\t\tinterface Person {\n\t\t\tname: string;\n\t\t   \tage?: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\t    name: 'Tom'\n\t\t};\n\t\t\n\t\tnterface Person {\n\t\t    name: string;\n\t\t    age?: number;\n\t\t}\n\n\t\tlet tom: Person = {\n\t\t    name: 'Tom',\n\t\t    age: 25\n\t\t};\n```\n\n这时仍然不允许添加未定义的属性\n\n```javascript\n\tinterface Person {\n    \tname: string;\n\t   \tage?: number;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   age: 25,\n\t   gender: 'male'\n\t};\n\n\t// examples/playground/index.ts(9,5): error TS2322: Type '{ name: string; age: number; \tgender: string; }' is not assignable to type 'Person'.\n\t//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.\n```\n### 任意属性\n有时候希望一个接口允许有任意的属性，可以使用如下方式：\n\n```javascript\n\tinterface Person {\n\t   \tname: string;\n\t\tage?: number;\n\t   [propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   gender: 'male'\n\t};\n```\n\n使用 `[propName: string]` 定义了任意属性取 `string` 类型的值。\n\n需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：\n\n```javascript\n\tinterface Person {\n    name: string;\n    age?: number;\n    [propName: string]: string;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n    \tage: 25,\n    \tgender: 'male'\n\t};\n\n\t// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string \tindex type 'string'.\n\t// index.ts(7,5): error TS2322: Type '{ [x: string]: string | number; name: string; age: \tnumber; gender: string; }' is not assignable to type 'Person'.\n\t//   Index signatures are incompatible.\n\t//     Type 'string | number' is not assignable to type 'string'.\n\t//       Type 'number' is not assignable to type 'string'.\n```\n\n上例中，任意属性的值允许是 `string`，但是可选属性 `age` 的值却是 `number`，`number` 不是 `string` 的子属性，所以报错了。\n\n另外，在报错信息中可以看出，此时 `{ name: 'Tom', age: 25, gender: 'male' }` 的类型被推断成了 `{ [x: string]: string | number; name: string; age: number; gender: string; }`，这是联合类型和接口的结合。\n\n### 只读属性\n有时候希望对象中的一些字段只能在创建的时候被赋值，那么可以用 `readonly` 定义只读属性：\n\n```javascript\n\tinterface Person {\n    \treadonly id: number;\n    \tname: string;\n    \tage?: number;\n    \t[propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tid: 89757,\n    \tname: 'Tom',\n    \tgender: 'male'\n\t};\n\n\ttom.id = 9527;\n\n\t// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property\n```\n\t\n上例中，使用 `readonly` 定义的属性 `id` 初始化后，又被赋值了，所以报错了。\n\n注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：\n\n```javascript\n\tinterface Person {\n    \treadonly id: number;\n    \tname: string;\n    \tage?: number;\n    \t[propName: string]: any;\n\t}\n\n\tlet tom: Person = {\n    \tname: 'Tom',\n\t   gender: 'male'\n\t};\n\n\ttom.id = 89757;\n\n\t// index.ts(8,5): error TS2322: Type '{ name: string; gender: string; }' is not assignable \tto type 'Person'.\n\t//   Property 'id' is missing in type '{ name: string; gender: string; }'.\n\t// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property.\n\t\n```\n上例中，报错信息有两处，第一处是在对 `tom` 进行赋值的时候，没有给 `id` 赋值。\n\n第二处是在给 `tom.id` 赋值的时候，由于它是只读属性，所以报错了。\n\n## 类型断言\n类型断言`（Type Assertion）`可以用来手动指定一个值的类型。\n\n语法\n\n\t<类型>值\n\t\t或\n\t值 as 类型\n在 `tsx` 语法（`React` 的 `jsx` 语法的 `ts` 版）中必须用后一种。\n\n例子：将一个联合类型的变量指定为一个更加具体的类型\n\n当 `TypeScript` 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \treturn something.length;\n\t}\n\n\t// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n```\n而有时候，确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \tif (something.length) {\n        \treturn something.length;\n    \t} else {\n        \treturn something.toString().length;\n    \t}\n\t}\n\n\t// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n\t// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.\n\t//   Property 'length' does not exist on type 'number'.\n```\n上例中，获取 `something.length` 的时候会报错。\n\n此时可以使用类型断言，将 `something` 断言成 `string4`：\n\n```javascript\n\tfunction getLength(something: string | number): number {\n    \tif ((<string>something).length) {\n        \treturn (<string>something).length;\n    \t} else {\n        \treturn something.toString().length;\n    \t}\n\t}\n```\n类型断言的用法如上，在需要断言的变量前加上 `<Type>` 即可。\n\n类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：\n\n```javascript\n\tfunction toBoolean(something: string | number): boolean {\n    \treturn <boolean>something;\n\t}\n\n\t// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.\n\t//   Type 'number' is not comparable to type 'boolean'.\n```\n## 内置对象\n`JavaScript` 中有很多内置对象，它们可以直接在 `TypeScript` 中当做定义好了的类型。\n内置对象是指根据标准在全局作用域（`Global`）上存在的对象。这里的标准是指 `ECMAScript` 和其他环境（比如 `DOM`）的标准。\n\n### ECMAScript 的内置对象\n* Boolean\n* Error\n* Date\n* RegExp\n* ......\n\n可以在 `TypeScript` 中将变量定义为这些类型：\n\n```javascript\n\tlet b: Boolean = new Boolean(1);\n\tlet e: Error = new Error('Error occurred');\n\tlet d: Date = new Date();\n\tlet r: RegExp = /[a-z]/;\n```\n\n### DOM 和 BOM 的内置对象\n\n* Document\n* HTMLElement\n* Event\n* NodeList\n* ......\n\n`TypeScript` 中会经常用到这些类型：\n\n```javascript\n\tlet body: HTMLElement = document.body;\n\tlet allDiv: NodeList = document.querySelectorAll('div');\n\tdocument.addEventListener('click', function(e: MouseEvent) {\n\t  // Do something\n\t});\n```\n### TypeScript 核心库的定义文件\n`TypeScript` 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 `TypeScript` 中的。\n\n当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：\n\n```javascript\n\tMath.pow(10, '2');\n\n\t// index.ts(1,14): error TS2345: Argument of type 'string' is not assignable to parameter \tof type 'number'\n```\n上面的例子中，`Math.pow` 必须接受两个 `number` 类型的参数。事实上 `Math.pow` 的类型定义如下：\n\n```javascript\n\tinterface Math {\n\t\tpow(x: number, y: number): number;\n\t}\n```\n`DOM` 中的例子：\n\n```javascript\n\tdocument.addEventListener('click', function(e) {\n    \tconsole.log(e.targetCurrent);\n\t});\n\n\t// index.ts(2,17): error TS2339: Property 'targetCurrent' does not exist on type \t'MouseEvent'.\n```\n上面的例子中，`addEventListener` 方法是在 `TypeScript` 核心库中定义的：\n\n```javascript\n\tinterface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent {\n\t\taddEventListener(type: string, listener: (ev: MouseEvent) => any, useCapture?: \tboolean): void;\n\t}\n```\n\t\n所以 `e` 被推断成了 `MouseEvent`，而 `MouseEvent` 是没有 `targetCurrent` 属性的，所以报错了。\n\n注意，`TypeScript` 核心库的定义中不包含 `Node.js` 部分。\n\n`Node.js` 不是内置对象的一部分，如果想用 `TypeScript` 写 `Node.js`，则需要引入第三方声明文件：\n\n\tnpm install @types/node --save-dev\n\n\n## 未完待续...\n","slug":"TypeScript","published":1,"updated":"2022-03-29T10:28:14.791Z","_id":"cl1a9lyjy0001hy054pt22y44","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><p><code>TypeScript</code>是由微软推出并推动的一个静态类型检查的编译型编程语言，可以完美兼容ES6的<code>JavaScript</code>。目前大量前端库和应用使用<code>TS</code>开发，已然成为前端的主流开发语言。</p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li>静态编译，减少<code>JS</code>动态语言特性带来了的非常多的隐藏bug</li>\n<li>类型安全检查在编译阶段完成</li>\n<li>大型项目的更好的进行管理和向后约定维护</li>\n<li>为前端的彻底的静态安全的类型检查、类型继承、抽象设计体系铺好了基石</li>\n<li>更加友好的智能提示和文档说明</li>\n</ul>\n<h2 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h2><p>有两种主要的方式来获取<code>TypeScript</code>工具</p>\n<ul>\n<li><p>通过<code>npm</code>安装</p>\n<p>  <code>npm install -g typescript</code></p>\n</li>\n<li><p>安装Visual Studio的<code>TypeScript</code>插件</p>\n</li>\n</ul>\n<h2 id=\"编译代码\"><a href=\"#编译代码\" class=\"headerlink\" title=\"编译代码\"></a>编译代码</h2><p>启动编译后，可以添加<code>-w</code>参数，让编译工具一直监听文件的变化，<code>ts</code>文件变化后自动编译。</p>\n<pre><code>tsc -w tyDemon.ts\n    or\ntsc --watch tyDemon.ts\n</code></pre>\n<p>编译多个<code>ts</code>文件</p>\n<ul>\n<li><p>编译当前目录下的所有的<code>ts</code>文件</p>\n<pre><code>  tsc -w *.ts\n</code></pre>\n</li>\n<li><p>编译当前目录及子目录的<code>ts</code>文件</p>\n<pre><code>  tsc -w ./**/*.ts\n</code></pre>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>最基本的数据类型就是简单的<code>true</code>/<code>false</code>值，在<code>JavaScript</code>和<code>TypeScript</code>里叫做<code>boolean</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">isDone</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 冒号后面是对当前变量类型的声明，isDone只能赋值布尔类型值，否则会编译失败。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h3><p>和<code>JavaScript</code>一样，<code>TypeScript</code>里的所有数字都是浮点数。 这些浮点数的类型是 <code>number</code>。 除了支持十进制和十六进制字面量，<code>TypeScript</code>还支持<code>ES5</code>中引入的二进制和八进制字面量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num1</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num2</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num3</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num4</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p><code>JavaScript</code>程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 <code>string</code>表示文本数据类型。 和<code>JavaScript</code>一样，可以使用双引号<code>&quot;</code>或单引号<code>&#39;</code>表示字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">;</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p><code>TypeScript</code>像<code>JavaScript</code>一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"元祖\"><a href=\"#元祖\" class=\"headerlink\" title=\"元祖\"></a>元祖</h3><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code>和<code>number</code>类型的元组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h3><p>有时候，会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code>类型来标记这些变量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">any1</span><span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nany1 <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span><span class=\"token punctuation\">;</span>\nany2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h3><p>它表示没有任何类型。 当一个函数没有返回值时，会见到其返回值类型是<code>void</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>声明<code>void</code>变量只能给其赋值为<code>null</code>, <code>undefined</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">void1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Null-和-Undefined\"><a href=\"#Null-和-Undefined\" class=\"headerlink\" title=\"Null 和 Undefined\"></a>Null 和 Undefined</h3><p><code>undefined</code>和<code>null</code>两者各自有自己的类型分别叫做<code>undefined</code>和<code>null</code>。 和 <code>void</code>相似。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">u</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><p><code>object</code>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">declare <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">o</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p><code>enum</code>类型是对<code>JavaScript</code>标准数据类型的一个补充。 像<code>C#</code>等其它语言一样，使用枚举类型可以为一组数值赋予名字。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red<span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>默认情况下，从0开始为元素编号。 也可以手动的指定成员的数值。 例如，将上面的例子改成从 1开始编号：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到<code>Color</code>里的哪个名字，可以查找相应的名字</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">colorName</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 显示'Green'因为上面代码里它的值是2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p> 一个函数有输入和输出，要在 <code>TypeScript</code> 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n输入多余的（或者少于要求的）参数，是不被允许的\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><p>如果要现在写一个对函数表达式的定义，可能会写成这样</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 <code>mySum</code>，是通过赋值操作进行类型推论而推断出来的。如果需要手动给 <code>mySum</code> 添加类型，则应该是这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注意不要混淆了 <code>TypeScript</code> 中的 <code>=&gt;</code> 和 <code>ES6</code> 中的 <code>=&gt;</code>。</p>\n<p>在 <code>TypeScript</code> 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>\n<p>在 ES6 中，=&gt; 叫做箭头函数，应用十分广泛</p>\n<h4 id=\"用接口定义函数的形状\"><a href=\"#用接口定义函数的形状\" class=\"headerlink\" title=\"用接口定义函数的形状\"></a>用接口定义函数的形状</h4><p>也可以使用接口的方式来定义一个函数需要符合的形状：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subString</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">mySearch</span><span class=\"token operator\">:</span> SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subString</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h4><p>输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？</p>\n<p>与接口中的可选属性类似，我们用 <code>?</code> 表示可选的参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h4><p>在 ES6 中，允许给函数的参数添加默认值，<code>TypeScript</code> 会将添加了默认值的参数识别为可选参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n此时就不受「可选参数必须接在必需参数后面」的限制了：\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h4><p>ES6 中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数（rest 参数）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>事实上，<code>items</code> 是一个数组。所以可以用数组的类型来定义它：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">array</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，rest 参数只能是最后一个参数</p>\n<h4 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h4><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p>\n<p>比如，需要实现一个函数 <code>reverse</code>，输入数字 <code>123</code> 的时候，输出反转的数字 <code>321</code>，输入字符串 <code>&#39;hello&#39;</code> 的时候，输出反转的字符串 <code>&#39;olleh&#39;</code>。</p>\n<p>利用联合类型，可以这么实现：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。</p>\n<p>这时，可以使用重载定义多个 <code>reverse</code> 的函数类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     \t\t <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     \t\t <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，重复定义了多次函数 <code>reverse</code>，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。</p>\n<p>注意，<code>TypeScript</code> 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>\n<h2 id=\"对象的类型——接口\"><a href=\"#对象的类型——接口\" class=\"headerlink\" title=\"对象的类型——接口\"></a>对象的类型——接口</h2><p>在 <code>TypeScript</code> 中，使用接口来定义对象的类型。</p>\n<p>在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。</p>\n<p><code>TypeScript</code> 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状」进行描述。</p>\n<h3 id=\"简单的例子\"><a href=\"#简单的例子\" class=\"headerlink\" title=\"简单的例子\"></a>简单的例子</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>定义了一个接口 Person，接着定义了一个变量 tom</p>\n<p>它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致</p>\n<p>接口一般首字母大写</p>\n<p>定义的变量比接口少了、多了一些一些属性是不允许的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(6,5): error TS2322: Type '&#123; name: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Property 'age' is missing in type '&#123; name: string; &#125;'.</span>\n\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; gender: string; &#125;' is \tnot assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h3><p>有时希望不要完全匹配一个形状，那么可以用可选属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nnterface Person <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这时仍然不允许添加未定义的属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// examples/playground/index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; \tgender: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h3><p>有时候希望一个接口允许有任意的属性，可以使用如下方式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用 <code>[propName: string]</code> 定义了任意属性取 <code>string</code> 类型的值。</p>\n<p>需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string \tindex type 'string'.</span>\n<span class=\"token comment\">// index.ts(7,5): error TS2322: Type '&#123; [x: string]: string | number; name: string; age: \tnumber; gender: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Index signatures are incompatible.</span>\n<span class=\"token comment\">//     Type 'string | number' is not assignable to type 'string'.</span>\n<span class=\"token comment\">//       Type 'number' is not assignable to type 'string'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上例中，任意属性的值允许是 <code>string</code>，但是可选属性 <code>age</code> 的值却是 <code>number</code>，<code>number</code> 不是 <code>string</code> 的子属性，所以报错了。</p>\n<p>另外，在报错信息中可以看出，此时 <code>&#123; name: &#39;Tom&#39;, age: 25, gender: &#39;male&#39; &#125;</code> 的类型被推断成了 <code>&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;</code>，这是联合类型和接口的结合。</p>\n<h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h3><p>有时候希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \treadonly id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">9527</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，使用 <code>readonly</code> 定义的属性 <code>id</code> 初始化后，又被赋值了，所以报错了。</p>\n<p>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \treadonly id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(8,5): error TS2322: Type '&#123; name: string; gender: string; &#125;' is not assignable \tto type 'Person'.</span>\n<span class=\"token comment\">//   Property 'id' is missing in type '&#123; name: string; gender: string; &#125;'.</span>\n<span class=\"token comment\">// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，报错信息有两处，第一处是在对 <code>tom</code> 进行赋值的时候，没有给 <code>id</code> 赋值。</p>\n<p>第二处是在给 <code>tom.id</code> 赋值的时候，由于它是只读属性，所以报错了。</p>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>类型断言<code>（Type Assertion）</code>可以用来手动指定一个值的类型。</p>\n<p>语法</p>\n<pre><code>&lt;类型&gt;值\n    或\n值 as 类型\n</code></pre>\n<p>在 <code>tsx</code> 语法（<code>React</code> 的 <code>jsx</code> 语法的 <code>ts</code> 版）中必须用后一种。</p>\n<p>例子：将一个联合类型的变量指定为一个更加具体的类型</p>\n<p>当 <code>TypeScript</code> 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而有时候，确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span>\n<span class=\"token comment\">// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，获取 <code>something.length</code> 的时候会报错。</p>\n<p>此时可以使用类型断言，将 <code>something</code> 断言成 <code>string4</code>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类型断言的用法如上，在需要断言的变量前加上 <code>&lt;Type&gt;</code> 即可。</p>\n<p>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toBoolean</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span>something<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.</span>\n<span class=\"token comment\">//   Type 'number' is not comparable to type 'boolean'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><p><code>JavaScript</code> 中有很多内置对象，它们可以直接在 <code>TypeScript</code> 中当做定义好了的类型。<br>内置对象是指根据标准在全局作用域（<code>Global</code>）上存在的对象。这里的标准是指 <code>ECMAScript</code> 和其他环境（比如 <code>DOM</code>）的标准。</p>\n<h3 id=\"ECMAScript-的内置对象\"><a href=\"#ECMAScript-的内置对象\" class=\"headerlink\" title=\"ECMAScript 的内置对象\"></a>ECMAScript 的内置对象</h3><ul>\n<li>Boolean</li>\n<li>Error</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>……</li>\n</ul>\n<p>可以在 <code>TypeScript</code> 中将变量定义为这些类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> Error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error occurred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">r</span><span class=\"token operator\">:</span> RegExp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[a-z]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DOM-和-BOM-的内置对象\"><a href=\"#DOM-和-BOM-的内置对象\" class=\"headerlink\" title=\"DOM 和 BOM 的内置对象\"></a>DOM 和 BOM 的内置对象</h3><ul>\n<li>Document</li>\n<li>HTMLElement</li>\n<li>Event</li>\n<li>NodeList</li>\n<li>……</li>\n</ul>\n<p><code>TypeScript</code> 中会经常用到这些类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> HTMLElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">allDiv</span><span class=\"token operator\">:</span> NodeList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Do something</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"TypeScript-核心库的定义文件\"><a href=\"#TypeScript-核心库的定义文件\" class=\"headerlink\" title=\"TypeScript 核心库的定义文件\"></a>TypeScript 核心库的定义文件</h3><p><code>TypeScript</code> 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 <code>TypeScript</code> 中的。</p>\n<p>当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(1,14): error TS2345: Argument of type 'string' is not assignable to parameter \tof type 'number'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子中，<code>Math.pow</code> 必须接受两个 <code>number</code> 类型的参数。事实上 <code>Math.pow</code> 的类型定义如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Math</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>DOM</code> 中的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>targetCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(2,17): error TS2339: Property 'targetCurrent' does not exist on type \t'MouseEvent'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子中，<code>addEventListener</code> 方法是在 <code>TypeScript</code> 核心库中定义的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Document</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> GlobalEventHandlers<span class=\"token punctuation\">,</span> NodeSelector<span class=\"token punctuation\">,</span> DocumentEvent <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">listener</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">ev</span><span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any<span class=\"token punctuation\">,</span> useCapture<span class=\"token operator\">?</span><span class=\"token operator\">:</span> \tboolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>所以 <code>e</code> 被推断成了 <code>MouseEvent</code>，而 <code>MouseEvent</code> 是没有 <code>targetCurrent</code> 属性的，所以报错了。</p>\n<p>注意，<code>TypeScript</code> 核心库的定义中不包含 <code>Node.js</code> 部分。</p>\n<p><code>Node.js</code> 不是内置对象的一部分，如果想用 <code>TypeScript</code> 写 <code>Node.js</code>，则需要引入第三方声明文件：</p>\n<pre><code>npm install @types/node --save-dev\n</code></pre>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><p><code>TypeScript</code>是由微软推出并推动的一个静态类型检查的编译型编程语言，可以完美兼容ES6的<code>JavaScript</code>。目前大量前端库和应用使用<code>TS</code>开发，已然成为前端的主流开发语言。</p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ul>\n<li>静态编译，减少<code>JS</code>动态语言特性带来了的非常多的隐藏bug</li>\n<li>类型安全检查在编译阶段完成</li>\n<li>大型项目的更好的进行管理和向后约定维护</li>\n<li>为前端的彻底的静态安全的类型检查、类型继承、抽象设计体系铺好了基石</li>\n<li>更加友好的智能提示和文档说明</li>\n</ul>\n<h2 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h2><p>有两种主要的方式来获取<code>TypeScript</code>工具</p>\n<ul>\n<li><p>通过<code>npm</code>安装</p>\n<p>  <code>npm install -g typescript</code></p>\n</li>\n<li><p>安装Visual Studio的<code>TypeScript</code>插件</p>\n</li>\n</ul>\n<h2 id=\"编译代码\"><a href=\"#编译代码\" class=\"headerlink\" title=\"编译代码\"></a>编译代码</h2><p>启动编译后，可以添加<code>-w</code>参数，让编译工具一直监听文件的变化，<code>ts</code>文件变化后自动编译。</p>\n<pre><code>tsc -w tyDemon.ts\n    or\ntsc --watch tyDemon.ts\n</code></pre>\n<p>编译多个<code>ts</code>文件</p>\n<ul>\n<li><p>编译当前目录下的所有的<code>ts</code>文件</p>\n<pre><code>  tsc -w *.ts\n</code></pre>\n</li>\n<li><p>编译当前目录及子目录的<code>ts</code>文件</p>\n<pre><code>  tsc -w ./**/*.ts\n</code></pre>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p>最基本的数据类型就是简单的<code>true</code>/<code>false</code>值，在<code>JavaScript</code>和<code>TypeScript</code>里叫做<code>boolean</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">isDone</span><span class=\"token operator\">:</span> boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 冒号后面是对当前变量类型的声明，isDone只能赋值布尔类型值，否则会编译失败。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"数字\"><a href=\"#数字\" class=\"headerlink\" title=\"数字\"></a>数字</h3><p>和<code>JavaScript</code>一样，<code>TypeScript</code>里的所有数字都是浮点数。 这些浮点数的类型是 <code>number</code>。 除了支持十进制和十六进制字面量，<code>TypeScript</code>还支持<code>ES5</code>中引入的二进制和八进制字面量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num1</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num2</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0xf00d</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num3</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">num4</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0o744</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p><code>JavaScript</code>程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 <code>string</code>表示文本数据类型。 和<code>JavaScript</code>一样，可以使用双引号<code>&quot;</code>或单引号<code>&#39;</code>表示字符串</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">;</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p><code>TypeScript</code>像<code>JavaScript</code>一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">list</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"元祖\"><a href=\"#元祖\" class=\"headerlink\" title=\"元祖\"></a>元祖</h3><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code>和<code>number</code>类型的元组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any\"></a>any</h3><p>有时候，会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code>类型来标记这些变量</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">any1</span><span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nany1 <span class=\"token operator\">=</span> <span class=\"token string\">\"maybe a string instead\"</span><span class=\"token punctuation\">;</span>\nany2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h3><p>它表示没有任何类型。 当一个函数没有返回值时，会见到其返回值类型是<code>void</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>声明<code>void</code>变量只能给其赋值为<code>null</code>, <code>undefined</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">void1</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Null-和-Undefined\"><a href=\"#Null-和-Undefined\" class=\"headerlink\" title=\"Null 和 Undefined\"></a>Null 和 Undefined</h3><p><code>undefined</code>和<code>null</code>两者各自有自己的类型分别叫做<code>undefined</code>和<code>null</code>。 和 <code>void</code>相似。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">u</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">n</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><p><code>object</code>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">declare <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">o</span><span class=\"token operator\">:</span> object <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">prop</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n<span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p><code>enum</code>类型是对<code>JavaScript</code>标准数据类型的一个补充。 像<code>C#</code>等其它语言一样，使用枚举类型可以为一组数值赋予名字。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red<span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>默认情况下，从0开始为元素编号。 也可以手动的指定成员的数值。 例如，将上面的例子改成从 1开始编号：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到<code>Color</code>里的哪个名字，可以查找相应的名字</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">colorName</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 显示'Green'因为上面代码里它的值是2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数的声明\"><a href=\"#函数的声明\" class=\"headerlink\" title=\"函数的声明\"></a>函数的声明</h4><p> 一个函数有输入和输出，要在 <code>TypeScript</code> 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单</p>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n输入多余的（或者少于要求的）参数，是不被允许的\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><p>如果要现在写一个对函数表达式的定义，可能会写成这样</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 <code>mySum</code>，是通过赋值操作进行类型推论而推断出来的。如果需要手动给 <code>mySum</code> 添加类型，则应该是这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">mySum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function-variable function\">number</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注意不要混淆了 <code>TypeScript</code> 中的 <code>=&gt;</code> 和 <code>ES6</code> 中的 <code>=&gt;</code>。</p>\n<p>在 <code>TypeScript</code> 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>\n<p>在 ES6 中，=&gt; 叫做箭头函数，应用十分广泛</p>\n<h4 id=\"用接口定义函数的形状\"><a href=\"#用接口定义函数的形状\" class=\"headerlink\" title=\"用接口定义函数的形状\"></a>用接口定义函数的形状</h4><p>也可以使用接口的方式来定义一个函数需要符合的形状：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subString</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">mySearch</span><span class=\"token operator\">:</span> SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">source</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">subString</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h4><p>输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？</p>\n<p>与接口中的可选属性类似，我们用 <code>?</code> 表示可选的参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> lastName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的是，可选参数必须接在必需参数后面。换句话说，可选参数后面不允许再出现必需参数了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h4><p>在 ES6 中，允许给函数的参数添加默认值，<code>TypeScript</code> 会将添加了默认值的参数识别为可选参数：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> tom <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n此时就不受「可选参数必须接在必需参数后面」的限制了：\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span>firstName<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">let</span> tomcat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> <span class=\"token function\">buildName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h4><p>ES6 中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数（rest 参数）：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>事实上，<code>items</code> 是一个数组。所以可以用数组的类型来定义它：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">array</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>items<span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意，rest 参数只能是最后一个参数</p>\n<h4 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h4><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p>\n<p>比如，需要实现一个函数 <code>reverse</code>，输入数字 <code>123</code> 的时候，输出反转的数字 <code>321</code>，输入字符串 <code>&#39;hello&#39;</code> 的时候，输出反转的字符串 <code>&#39;olleh&#39;</code>。</p>\n<p>利用联合类型，可以这么实现：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\t<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。</p>\n<p>这时，可以使用重载定义多个 <code>reverse</code> 的函数类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> string <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     \t\t <span class=\"token keyword\">return</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     \t\t <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，重复定义了多次函数 <code>reverse</code>，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。</p>\n<p>注意，<code>TypeScript</code> 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>\n<h2 id=\"对象的类型——接口\"><a href=\"#对象的类型——接口\" class=\"headerlink\" title=\"对象的类型——接口\"></a>对象的类型——接口</h2><p>在 <code>TypeScript</code> 中，使用接口来定义对象的类型。</p>\n<p>在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。</p>\n<p><code>TypeScript</code> 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状」进行描述。</p>\n<h3 id=\"简单的例子\"><a href=\"#简单的例子\" class=\"headerlink\" title=\"简单的例子\"></a>简单的例子</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>定义了一个接口 Person，接着定义了一个变量 tom</p>\n<p>它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致</p>\n<p>接口一般首字母大写</p>\n<p>定义的变量比接口少了、多了一些一些属性是不允许的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(6,5): error TS2322: Type '&#123; name: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Property 'age' is missing in type '&#123; name: string; &#125;'.</span>\n\n\t<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; gender: string; &#125;' is \tnot assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h3><p>有时希望不要完全匹配一个形状，那么可以用可选属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nnterface Person <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这时仍然不允许添加未定义的属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// examples/playground/index.ts(9,5): error TS2322: Type '&#123; name: string; age: number; \tgender: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type \t'Person'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h3><p>有时候希望一个接口允许有任意的属性，可以使用如下方式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用 <code>[propName: string]</code> 定义了任意属性取 <code>string</code> 类型的值。</p>\n<p>需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string \tindex type 'string'.</span>\n<span class=\"token comment\">// index.ts(7,5): error TS2322: Type '&#123; [x: string]: string | number; name: string; age: \tnumber; gender: string; &#125;' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Index signatures are incompatible.</span>\n<span class=\"token comment\">//     Type 'string | number' is not assignable to type 'string'.</span>\n<span class=\"token comment\">//       Type 'number' is not assignable to type 'string'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上例中，任意属性的值允许是 <code>string</code>，但是可选属性 <code>age</code> 的值却是 <code>number</code>，<code>number</code> 不是 <code>string</code> 的子属性，所以报错了。</p>\n<p>另外，在报错信息中可以看出，此时 <code>&#123; name: &#39;Tom&#39;, age: 25, gender: &#39;male&#39; &#125;</code> 的类型被推断成了 <code>&#123; [x: string]: string | number; name: string; age: number; gender: string; &#125;</code>，这是联合类型和接口的结合。</p>\n<h3 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h3><p>有时候希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \treadonly id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   \t<span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">9527</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，使用 <code>readonly</code> 定义的属性 <code>id</code> 初始化后，又被赋值了，所以报错了。</p>\n<p>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n   \treadonly id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n   \tage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">[</span>propName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">tom</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(8,5): error TS2322: Type '&#123; name: string; gender: string; &#125;' is not assignable \tto type 'Person'.</span>\n<span class=\"token comment\">//   Property 'id' is missing in type '&#123; name: string; gender: string; &#125;'.</span>\n<span class=\"token comment\">// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-\tonly property.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，报错信息有两处，第一处是在对 <code>tom</code> 进行赋值的时候，没有给 <code>id</code> 赋值。</p>\n<p>第二处是在给 <code>tom.id</code> 赋值的时候，由于它是只读属性，所以报错了。</p>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>类型断言<code>（Type Assertion）</code>可以用来手动指定一个值的类型。</p>\n<p>语法</p>\n<pre><code>&lt;类型&gt;值\n    或\n值 as 类型\n</code></pre>\n<p>在 <code>tsx</code> 语法（<code>React</code> 的 <code>jsx</code> 语法的 <code>ts</code> 版）中必须用后一种。</p>\n<p>例子：将一个联合类型的变量指定为一个更加具体的类型</p>\n<p>当 <code>TypeScript</code> 不确定一个联合类型的变量到底是哪个类型的时候，只能访问此联合类型的所有类型里共有的属性或方法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而有时候，确实需要在还不确定类型的时候就访问其中一个类型的属性或方法，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span>\n<span class=\"token comment\">// index.ts(3,26): error TS2339: Property 'length' does not exist on type 'string | number'.</span>\n<span class=\"token comment\">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上例中，获取 <code>something.length</code> 的时候会报错。</p>\n<p>此时可以使用类型断言，将 <code>something</code> 断言成 <code>string4</code>：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n       \t<span class=\"token keyword\">return</span> something<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n   \t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类型断言的用法如上，在需要断言的变量前加上 <code>&lt;Type&gt;</code> 即可。</p>\n<p>类型断言不是类型转换，断言成一个联合类型中不存在的类型是不允许的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">toBoolean</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> boolean <span class=\"token punctuation\">&#123;</span>\n   \t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span>something<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// index.ts(2,10): error TS2352: Type 'string | number' cannot be converted to type 'boolean'.</span>\n<span class=\"token comment\">//   Type 'number' is not comparable to type 'boolean'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"内置对象\"><a href=\"#内置对象\" class=\"headerlink\" title=\"内置对象\"></a>内置对象</h2><p><code>JavaScript</code> 中有很多内置对象，它们可以直接在 <code>TypeScript</code> 中当做定义好了的类型。<br>内置对象是指根据标准在全局作用域（<code>Global</code>）上存在的对象。这里的标准是指 <code>ECMAScript</code> 和其他环境（比如 <code>DOM</code>）的标准。</p>\n<h3 id=\"ECMAScript-的内置对象\"><a href=\"#ECMAScript-的内置对象\" class=\"headerlink\" title=\"ECMAScript 的内置对象\"></a>ECMAScript 的内置对象</h3><ul>\n<li>Boolean</li>\n<li>Error</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>……</li>\n</ul>\n<p>可以在 <code>TypeScript</code> 中将变量定义为这些类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> Error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error occurred'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">r</span><span class=\"token operator\">:</span> RegExp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[a-z]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DOM-和-BOM-的内置对象\"><a href=\"#DOM-和-BOM-的内置对象\" class=\"headerlink\" title=\"DOM 和 BOM 的内置对象\"></a>DOM 和 BOM 的内置对象</h3><ul>\n<li>Document</li>\n<li>HTMLElement</li>\n<li>Event</li>\n<li>NodeList</li>\n<li>……</li>\n</ul>\n<p><code>TypeScript</code> 中会经常用到这些类型：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> HTMLElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">allDiv</span><span class=\"token operator\">:</span> NodeList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// Do something</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"TypeScript-核心库的定义文件\"><a href=\"#TypeScript-核心库的定义文件\" class=\"headerlink\" title=\"TypeScript 核心库的定义文件\"></a>TypeScript 核心库的定义文件</h3><p><code>TypeScript</code> 核心库的定义文件中定义了所有浏览器环境需要用到的类型，并且是预置在 <code>TypeScript</code> 中的。</p>\n<p>当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了，比如：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(1,14): error TS2345: Argument of type 'string' is not assignable to parameter \tof type 'number'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子中，<code>Math.pow</code> 必须接受两个 <code>number</code> 类型的参数。事实上 <code>Math.pow</code> 的类型定义如下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Math</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>DOM</code> 中的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>targetCurrent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(2,17): error TS2339: Property 'targetCurrent' does not exist on type \t'MouseEvent'.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的例子中，<code>addEventListener</code> 方法是在 <code>TypeScript</code> 核心库中定义的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Document</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> GlobalEventHandlers<span class=\"token punctuation\">,</span> NodeSelector<span class=\"token punctuation\">,</span> DocumentEvent <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">listener</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">ev</span><span class=\"token operator\">:</span> MouseEvent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any<span class=\"token punctuation\">,</span> useCapture<span class=\"token operator\">?</span><span class=\"token operator\">:</span> \tboolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>所以 <code>e</code> 被推断成了 <code>MouseEvent</code>，而 <code>MouseEvent</code> 是没有 <code>targetCurrent</code> 属性的，所以报错了。</p>\n<p>注意，<code>TypeScript</code> 核心库的定义中不包含 <code>Node.js</code> 部分。</p>\n<p><code>Node.js</code> 不是内置对象的一部分，如果想用 <code>TypeScript</code> 写 <code>Node.js</code>，则需要引入第三方声明文件：</p>\n<pre><code>npm install @types/node --save-dev\n</code></pre>\n<h2 id=\"未完待续…\"><a href=\"#未完待续…\" class=\"headerlink\" title=\"未完待续…\"></a>未完待续…</h2>"},{"title":"JavaScript-高级","date":"2022-03-29T04:47:23.000Z","_content":"\n# JS高级\n\n## this\n\n面向对象语言中`this`表示当前对象的一个引用。\n\n但在`JavaScript`中`this`不是固定不变的，它会随着执行环境的改变而改变。\n\n### 在方法中，`this`表示该方法所属的对象\n\n```javascript\nvar obj = {\n\tfirstName: \"Ma\",\n\tlastName: \"QiLin\",\n\tgetNameFn: function() {\n\t\treturn this. firstName + this.lastName\n\t\t}\n\t};\n```\n\n* 在对象方法中，`this`指向调用它所在方法的对象。\n* 在上面一个实例中，`this`表示`obj`对象。\n* `fullName`方法所属的对象就是`obj`。\n\n\n### 如果单独使用`this`表示全局对象\n\n```javascript\nvar x = this;\n\n```\n\n* 单独使用`this`，则它指向全局`Global`对象。\n* 在浏览器中，`window` 就是该全局对象为` [object Window]:`\n* 严格模式下，如果单独使用，`this` 也是指向全局`Global`对象。\n\n\n\n### 在函数中，`this`表示全局对象，严格模式下为`undefined`\n\n```javascript\nfunction fn() {\n\treturn this;\n};\n```\n\n* 在函数中，函数的所属者默认绑定到 `this` 上。\n* 在浏览器中，`window` 就是该全局对象为 `[object Window]`:\n* 严格模式下函数是没有绑定到 `this` 上，这时候 `this` 是 `undefined`。\n\n\n\n### 在事件中，`this`表示接收事件的元素\n\n```javascript\n<button onclick=\"this.style.display='none'\">\n\t点我后我就消失了\n</button>\n```\n\n* 在 `HTML` 事件句柄中，`this` 指向了接收事件的 `HTML` 元素：\n\n\n### 类似 `call()` 和 `apply()` 方法可以将 `this` 引用到任何对象（更改`this`指向）\n\n```javascript\nvar person1 = {\n\tfullName: function() {\n\t\treturn this.firstName + \" \" + this.lastName;\n\t}\n}\nvar person2 = {\n\tfirstName:\"John\",\n\tlastName: \"Doe\",\n}\nperson1.fullName.call(person2);  // 返回 \"John Doe\"\n```\n\n* 在 `JavaScript` 中函数也是对象，对象则有方法，`apply` 和 `call` 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境`context`，即 `this` 绑定的对象。\n\n* 在上面面实例中，当我们使用 `person2` 作为参数来调用 `person1.fullName` 方法时, `this` 将指向 `person2`, 即便它是 `person1` 的方法：\n\n### 在构造函数中`this`表示实例\n\n```javascript\nfunction fn (name, age) {\n\tthis.name = name;\n\tthis.age = age;\n};\n\t\nconst f1 = new fn('mql', 18);\nconsole.log(f1); // { name: 'mql', age: 18 }\n```\n\n\n## 闭包\n\n## 原型、原型链\n\nJS在设计时并没有采用其他语言的`class`概念，而采用的时原型继承的设计模式。可以粗略理解问，原型 + 构造函数 + 原型链 形成的继承模式为 JAVA中的类`class`模式\n\n\n\n## 构造函数\n\n### 什么是构造函数\n\n在 `JavaScript` 中，用 `new` 关键字来调用的函数，称为构造函数。\n\n```javascript\nfunction fn() {\n\tname: 'card',\n};\n\t\t\nconst f1 = new fn(); // { name: 'card' };\n```\n\n### 为什么实用构造函数\n\n比如：现有一个造车工厂，每个车都有一些配置参数，代码如下\n```javascript\ncard1 = {\n\tcolor: \"红色\",\n\tname: '奔驰',\n\tprice: '40w'\n};\n\t\t\ncard2 = {\n\tcolor: '白色',\n\tname: '奔驰',\n\tprice: '60w'\n};\n....\n\n```\n\n从数据中可以看出，每辆车有很多属性，有相同的，有独立不同的。如果汽车多了，我们就会写很多类似的代码。构造函数工厂模式就是解决这一难题。代码如下\n\n```javascript\nfunction card(color, price) {\n\tthis.name = '奔驰';\n\tthis.color = color;\n\tthis.price = price;\n};\n\t\t\nconst card1 = new card( '红色', 400000 );\n// { color: '红色', name: '奔驰', price: '4000000' }\nconst card2 = new card('白色', 6000000);\n```\n\n### 构造函数执行过程及原理\n\n* 当`card1`用`new`关键字调用`card`方法时，会为`card1`开辟一个新内存，且`card`中的`this`指向该内存即`card1`.代码如下\n\n```javascript\nconst card1 = new card('白色', 6000000); \n// 开辟一个新的内存空间card1 并且card的this指向该空间\n```\n\n###  构造函数返回值\n\n由于函数体内部的 `this` 指向新创建的内存空间，默认返回 `this` ，就相当于默认返回了该内存空间，也就是上图中的 `card1`。此时，`card1`的内存空间被变量 `card1` 所接受。也就是说 `card1` 这个变量，保存的内存地址就是 `card1`，同时被标记为 `card` 的实例。\n\n\n### 缺点\n\n实例在调用构造函数时会开辟一个新的内存空间，前面提到过公共属性，例如`name`属性。如此便在内存空间都会有name属性，这无疑是很浪费内存的。这种情况可以采用原型+原型链的方法共享属性。无需单独创建。代码如下\n\n```javascript\n\nfunction card(color, price) {\n\tthis.color = color;\n\tthis.price = pirce;\n};\n// 通过在原型上添加公共属性`name` 让实例继承\ncard. prototype.name = '奔驰';\nconst card1 = new card('红色', 400000) // { color:'红色', price: 40000, name: '奔驰' }\t\t\n\n```\n\n\n\n## 数据类型 => 栈、堆\n\n## 回调函数\n\n## 异步\n\n## 执行机制、事件循环、事件队列\n\n### 单线程\n\nJavaScript是单线程语言、","source":"_posts/JavaScript-senior.md","raw":"---\ntitle: JavaScript-高级\ndate: 2022-03-29 12:47:23\ntags: code\n---\n\n# JS高级\n\n## this\n\n面向对象语言中`this`表示当前对象的一个引用。\n\n但在`JavaScript`中`this`不是固定不变的，它会随着执行环境的改变而改变。\n\n### 在方法中，`this`表示该方法所属的对象\n\n```javascript\nvar obj = {\n\tfirstName: \"Ma\",\n\tlastName: \"QiLin\",\n\tgetNameFn: function() {\n\t\treturn this. firstName + this.lastName\n\t\t}\n\t};\n```\n\n* 在对象方法中，`this`指向调用它所在方法的对象。\n* 在上面一个实例中，`this`表示`obj`对象。\n* `fullName`方法所属的对象就是`obj`。\n\n\n### 如果单独使用`this`表示全局对象\n\n```javascript\nvar x = this;\n\n```\n\n* 单独使用`this`，则它指向全局`Global`对象。\n* 在浏览器中，`window` 就是该全局对象为` [object Window]:`\n* 严格模式下，如果单独使用，`this` 也是指向全局`Global`对象。\n\n\n\n### 在函数中，`this`表示全局对象，严格模式下为`undefined`\n\n```javascript\nfunction fn() {\n\treturn this;\n};\n```\n\n* 在函数中，函数的所属者默认绑定到 `this` 上。\n* 在浏览器中，`window` 就是该全局对象为 `[object Window]`:\n* 严格模式下函数是没有绑定到 `this` 上，这时候 `this` 是 `undefined`。\n\n\n\n### 在事件中，`this`表示接收事件的元素\n\n```javascript\n<button onclick=\"this.style.display='none'\">\n\t点我后我就消失了\n</button>\n```\n\n* 在 `HTML` 事件句柄中，`this` 指向了接收事件的 `HTML` 元素：\n\n\n### 类似 `call()` 和 `apply()` 方法可以将 `this` 引用到任何对象（更改`this`指向）\n\n```javascript\nvar person1 = {\n\tfullName: function() {\n\t\treturn this.firstName + \" \" + this.lastName;\n\t}\n}\nvar person2 = {\n\tfirstName:\"John\",\n\tlastName: \"Doe\",\n}\nperson1.fullName.call(person2);  // 返回 \"John Doe\"\n```\n\n* 在 `JavaScript` 中函数也是对象，对象则有方法，`apply` 和 `call` 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境`context`，即 `this` 绑定的对象。\n\n* 在上面面实例中，当我们使用 `person2` 作为参数来调用 `person1.fullName` 方法时, `this` 将指向 `person2`, 即便它是 `person1` 的方法：\n\n### 在构造函数中`this`表示实例\n\n```javascript\nfunction fn (name, age) {\n\tthis.name = name;\n\tthis.age = age;\n};\n\t\nconst f1 = new fn('mql', 18);\nconsole.log(f1); // { name: 'mql', age: 18 }\n```\n\n\n## 闭包\n\n## 原型、原型链\n\nJS在设计时并没有采用其他语言的`class`概念，而采用的时原型继承的设计模式。可以粗略理解问，原型 + 构造函数 + 原型链 形成的继承模式为 JAVA中的类`class`模式\n\n\n\n## 构造函数\n\n### 什么是构造函数\n\n在 `JavaScript` 中，用 `new` 关键字来调用的函数，称为构造函数。\n\n```javascript\nfunction fn() {\n\tname: 'card',\n};\n\t\t\nconst f1 = new fn(); // { name: 'card' };\n```\n\n### 为什么实用构造函数\n\n比如：现有一个造车工厂，每个车都有一些配置参数，代码如下\n```javascript\ncard1 = {\n\tcolor: \"红色\",\n\tname: '奔驰',\n\tprice: '40w'\n};\n\t\t\ncard2 = {\n\tcolor: '白色',\n\tname: '奔驰',\n\tprice: '60w'\n};\n....\n\n```\n\n从数据中可以看出，每辆车有很多属性，有相同的，有独立不同的。如果汽车多了，我们就会写很多类似的代码。构造函数工厂模式就是解决这一难题。代码如下\n\n```javascript\nfunction card(color, price) {\n\tthis.name = '奔驰';\n\tthis.color = color;\n\tthis.price = price;\n};\n\t\t\nconst card1 = new card( '红色', 400000 );\n// { color: '红色', name: '奔驰', price: '4000000' }\nconst card2 = new card('白色', 6000000);\n```\n\n### 构造函数执行过程及原理\n\n* 当`card1`用`new`关键字调用`card`方法时，会为`card1`开辟一个新内存，且`card`中的`this`指向该内存即`card1`.代码如下\n\n```javascript\nconst card1 = new card('白色', 6000000); \n// 开辟一个新的内存空间card1 并且card的this指向该空间\n```\n\n###  构造函数返回值\n\n由于函数体内部的 `this` 指向新创建的内存空间，默认返回 `this` ，就相当于默认返回了该内存空间，也就是上图中的 `card1`。此时，`card1`的内存空间被变量 `card1` 所接受。也就是说 `card1` 这个变量，保存的内存地址就是 `card1`，同时被标记为 `card` 的实例。\n\n\n### 缺点\n\n实例在调用构造函数时会开辟一个新的内存空间，前面提到过公共属性，例如`name`属性。如此便在内存空间都会有name属性，这无疑是很浪费内存的。这种情况可以采用原型+原型链的方法共享属性。无需单独创建。代码如下\n\n```javascript\n\nfunction card(color, price) {\n\tthis.color = color;\n\tthis.price = pirce;\n};\n// 通过在原型上添加公共属性`name` 让实例继承\ncard. prototype.name = '奔驰';\nconst card1 = new card('红色', 400000) // { color:'红色', price: 40000, name: '奔驰' }\t\t\n\n```\n\n\n\n## 数据类型 => 栈、堆\n\n## 回调函数\n\n## 异步\n\n## 执行机制、事件循环、事件队列\n\n### 单线程\n\nJavaScript是单线程语言、","slug":"JavaScript-senior","published":1,"updated":"2022-03-29T05:13:46.743Z","_id":"cl1bocv9x0003rb050gnmbfmw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JS高级\"><a href=\"#JS高级\" class=\"headerlink\" title=\"JS高级\"></a>JS高级</h1><h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>面向对象语言中<code>this</code>表示当前对象的一个引用。</p>\n<p>但在<code>JavaScript</code>中<code>this</code>不是固定不变的，它会随着执行环境的改变而改变。</p>\n<h3 id=\"在方法中，this表示该方法所属的对象\"><a href=\"#在方法中，this表示该方法所属的对象\" class=\"headerlink\" title=\"在方法中，this表示该方法所属的对象\"></a>在方法中，<code>this</code>表示该方法所属的对象</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ma\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"QiLin\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">getNameFn</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> firstName <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在对象方法中，<code>this</code>指向调用它所在方法的对象。</li>\n<li>在上面一个实例中，<code>this</code>表示<code>obj</code>对象。</li>\n<li><code>fullName</code>方法所属的对象就是<code>obj</code>。</li>\n</ul>\n<h3 id=\"如果单独使用this表示全局对象\"><a href=\"#如果单独使用this表示全局对象\" class=\"headerlink\" title=\"如果单独使用this表示全局对象\"></a>如果单独使用<code>this</code>表示全局对象</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>单独使用<code>this</code>，则它指向全局<code>Global</code>对象。</li>\n<li>在浏览器中，<code>window</code> 就是该全局对象为<code> [object Window]:</code></li>\n<li>严格模式下，如果单独使用，<code>this</code> 也是指向全局<code>Global</code>对象。</li>\n</ul>\n<h3 id=\"在函数中，this表示全局对象，严格模式下为undefined\"><a href=\"#在函数中，this表示全局对象，严格模式下为undefined\" class=\"headerlink\" title=\"在函数中，this表示全局对象，严格模式下为undefined\"></a>在函数中，<code>this</code>表示全局对象，严格模式下为<code>undefined</code></h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在函数中，函数的所属者默认绑定到 <code>this</code> 上。</li>\n<li>在浏览器中，<code>window</code> 就是该全局对象为 <code>[object Window]</code>:</li>\n<li>严格模式下函数是没有绑定到 <code>this</code> 上，这时候 <code>this</code> 是 <code>undefined</code>。</li>\n</ul>\n<h3 id=\"在事件中，this表示接收事件的元素\"><a href=\"#在事件中，this表示接收事件的元素\" class=\"headerlink\" title=\"在事件中，this表示接收事件的元素\"></a>在事件中，<code>this</code>表示接收事件的元素</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token string\">\"this.style.display='none'\"</span><span class=\"token operator\">></span>\n\t点我后我就消失了\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在 <code>HTML</code> 事件句柄中，<code>this</code> 指向了接收事件的 <code>HTML</code> 元素：</li>\n</ul>\n<h3 id=\"类似-call-和-apply-方法可以将-this-引用到任何对象（更改this指向）\"><a href=\"#类似-call-和-apply-方法可以将-this-引用到任何对象（更改this指向）\" class=\"headerlink\" title=\"类似 call() 和 apply() 方法可以将 this 引用到任何对象（更改this指向）\"></a>类似 <code>call()</code> 和 <code>apply()</code> 方法可以将 <code>this</code> 引用到任何对象（更改<code>this</code>指向）</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function-variable function\">fullName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">fullName</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 \"John Doe\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>在 <code>JavaScript</code> 中函数也是对象，对象则有方法，<code>apply</code> 和 <code>call</code> 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境<code>context</code>，即 <code>this</code> 绑定的对象。</p>\n</li>\n<li><p>在上面面实例中，当我们使用 <code>person2</code> 作为参数来调用 <code>person1.fullName</code> 方法时, <code>this</code> 将指向 <code>person2</code>, 即便它是 <code>person1</code> 的方法：</p>\n</li>\n</ul>\n<h3 id=\"在构造函数中this表示实例\"><a href=\"#在构造函数中this表示实例\" class=\"headerlink\" title=\"在构造函数中this表示实例\"></a>在构造函数中<code>this</code>表示实例</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mql'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'mql', age: 18 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h2 id=\"原型、原型链\"><a href=\"#原型、原型链\" class=\"headerlink\" title=\"原型、原型链\"></a>原型、原型链</h2><p>JS在设计时并没有采用其他语言的<code>class</code>概念，而采用的时原型继承的设计模式。可以粗略理解问，原型 + 构造函数 + 原型链 形成的继承模式为 JAVA中的类<code>class</code>模式</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><h3 id=\"什么是构造函数\"><a href=\"#什么是构造函数\" class=\"headerlink\" title=\"什么是构造函数\"></a>什么是构造函数</h3><p>在 <code>JavaScript</code> 中，用 <code>new</code> 关键字来调用的函数，称为构造函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'card'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'card' &#125;;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"为什么实用构造函数\"><a href=\"#为什么实用构造函数\" class=\"headerlink\" title=\"为什么实用构造函数\"></a>为什么实用构造函数</h3><p>比如：现有一个造车工厂，每个车都有一些配置参数，代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">card1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"红色\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token string\">'40w'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t\ncard2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'白色'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token string\">'60w'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从数据中可以看出，每辆车有很多属性，有相同的，有独立不同的。如果汽车多了，我们就会写很多类似的代码。构造函数工厂模式就是解决这一难题。代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token keyword\">const</span> card1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'红色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// &#123; color: '红色', name: '奔驰', price: '4000000' &#125;</span>\n<span class=\"token keyword\">const</span> card2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span><span class=\"token string\">'白色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"构造函数执行过程及原理\"><a href=\"#构造函数执行过程及原理\" class=\"headerlink\" title=\"构造函数执行过程及原理\"></a>构造函数执行过程及原理</h3><ul>\n<li>当<code>card1</code>用<code>new</code>关键字调用<code>card</code>方法时，会为<code>card1</code>开辟一个新内存，且<code>card</code>中的<code>this</code>指向该内存即<code>card1</code>.代码如下</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> card1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span><span class=\"token string\">'白色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 开辟一个新的内存空间card1 并且card的this指向该空间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"构造函数返回值\"><a href=\"#构造函数返回值\" class=\"headerlink\" title=\"构造函数返回值\"></a>构造函数返回值</h3><p>由于函数体内部的 <code>this</code> 指向新创建的内存空间，默认返回 <code>this</code> ，就相当于默认返回了该内存空间，也就是上图中的 <code>card1</code>。此时，<code>card1</code>的内存空间被变量 <code>card1</code> 所接受。也就是说 <code>card1</code> 这个变量，保存的内存地址就是 <code>card1</code>，同时被标记为 <code>card</code> 的实例。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>实例在调用构造函数时会开辟一个新的内存空间，前面提到过公共属性，例如<code>name</code>属性。如此便在内存空间都会有name属性，这无疑是很浪费内存的。这种情况可以采用原型+原型链的方法共享属性。无需单独创建。代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> pirce<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过在原型上添加公共属性`name` 让实例继承</span>\ncard<span class=\"token punctuation\">.</span> prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> card1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span><span class=\"token string\">'红色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123; color:'红色', price: 40000, name: '奔驰' &#125;\t\t</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"数据类型-gt-栈、堆\"><a href=\"#数据类型-gt-栈、堆\" class=\"headerlink\" title=\"数据类型 =&gt; 栈、堆\"></a>数据类型 =&gt; 栈、堆</h2><h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><h2 id=\"执行机制、事件循环、事件队列\"><a href=\"#执行机制、事件循环、事件队列\" class=\"headerlink\" title=\"执行机制、事件循环、事件队列\"></a>执行机制、事件循环、事件队列</h2><h3 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h3><p>JavaScript是单线程语言、</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS高级\"><a href=\"#JS高级\" class=\"headerlink\" title=\"JS高级\"></a>JS高级</h1><h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>面向对象语言中<code>this</code>表示当前对象的一个引用。</p>\n<p>但在<code>JavaScript</code>中<code>this</code>不是固定不变的，它会随着执行环境的改变而改变。</p>\n<h3 id=\"在方法中，this表示该方法所属的对象\"><a href=\"#在方法中，this表示该方法所属的对象\" class=\"headerlink\" title=\"在方法中，this表示该方法所属的对象\"></a>在方法中，<code>this</code>表示该方法所属的对象</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ma\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"QiLin\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">getNameFn</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> firstName <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在对象方法中，<code>this</code>指向调用它所在方法的对象。</li>\n<li>在上面一个实例中，<code>this</code>表示<code>obj</code>对象。</li>\n<li><code>fullName</code>方法所属的对象就是<code>obj</code>。</li>\n</ul>\n<h3 id=\"如果单独使用this表示全局对象\"><a href=\"#如果单独使用this表示全局对象\" class=\"headerlink\" title=\"如果单独使用this表示全局对象\"></a>如果单独使用<code>this</code>表示全局对象</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>单独使用<code>this</code>，则它指向全局<code>Global</code>对象。</li>\n<li>在浏览器中，<code>window</code> 就是该全局对象为<code> [object Window]:</code></li>\n<li>严格模式下，如果单独使用，<code>this</code> 也是指向全局<code>Global</code>对象。</li>\n</ul>\n<h3 id=\"在函数中，this表示全局对象，严格模式下为undefined\"><a href=\"#在函数中，this表示全局对象，严格模式下为undefined\" class=\"headerlink\" title=\"在函数中，this表示全局对象，严格模式下为undefined\"></a>在函数中，<code>this</code>表示全局对象，严格模式下为<code>undefined</code></h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在函数中，函数的所属者默认绑定到 <code>this</code> 上。</li>\n<li>在浏览器中，<code>window</code> 就是该全局对象为 <code>[object Window]</code>:</li>\n<li>严格模式下函数是没有绑定到 <code>this</code> 上，这时候 <code>this</code> 是 <code>undefined</code>。</li>\n</ul>\n<h3 id=\"在事件中，this表示接收事件的元素\"><a href=\"#在事件中，this表示接收事件的元素\" class=\"headerlink\" title=\"在事件中，this表示接收事件的元素\"></a>在事件中，<code>this</code>表示接收事件的元素</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token string\">\"this.style.display='none'\"</span><span class=\"token operator\">></span>\n\t点我后我就消失了\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在 <code>HTML</code> 事件句柄中，<code>this</code> 指向了接收事件的 <code>HTML</code> 元素：</li>\n</ul>\n<h3 id=\"类似-call-和-apply-方法可以将-this-引用到任何对象（更改this指向）\"><a href=\"#类似-call-和-apply-方法可以将-this-引用到任何对象（更改this指向）\" class=\"headerlink\" title=\"类似 call() 和 apply() 方法可以将 this 引用到任何对象（更改this指向）\"></a>类似 <code>call()</code> 和 <code>apply()</code> 方法可以将 <code>this</code> 引用到任何对象（更改<code>this</code>指向）</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function-variable function\">fullName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> person2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\nperson1<span class=\"token punctuation\">.</span><span class=\"token function\">fullName</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回 \"John Doe\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>在 <code>JavaScript</code> 中函数也是对象，对象则有方法，<code>apply</code> 和 <code>call</code> 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境<code>context</code>，即 <code>this</code> 绑定的对象。</p>\n</li>\n<li><p>在上面面实例中，当我们使用 <code>person2</code> 作为参数来调用 <code>person1.fullName</code> 方法时, <code>this</code> 将指向 <code>person2</code>, 即便它是 <code>person1</code> 的方法：</p>\n</li>\n</ul>\n<h3 id=\"在构造函数中this表示实例\"><a href=\"#在构造函数中this表示实例\" class=\"headerlink\" title=\"在构造函数中this表示实例\"></a>在构造函数中<code>this</code>表示实例</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mql'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'mql', age: 18 &#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h2 id=\"原型、原型链\"><a href=\"#原型、原型链\" class=\"headerlink\" title=\"原型、原型链\"></a>原型、原型链</h2><p>JS在设计时并没有采用其他语言的<code>class</code>概念，而采用的时原型继承的设计模式。可以粗略理解问，原型 + 构造函数 + 原型链 形成的继承模式为 JAVA中的类<code>class</code>模式</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><h3 id=\"什么是构造函数\"><a href=\"#什么是构造函数\" class=\"headerlink\" title=\"什么是构造函数\"></a>什么是构造函数</h3><p>在 <code>JavaScript</code> 中，用 <code>new</code> 关键字来调用的函数，称为构造函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'card'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; name: 'card' &#125;;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"为什么实用构造函数\"><a href=\"#为什么实用构造函数\" class=\"headerlink\" title=\"为什么实用构造函数\"></a>为什么实用构造函数</h3><p>比如：现有一个造车工厂，每个车都有一些配置参数，代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">card1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"红色\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token string\">'40w'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t\ncard2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">'白色'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token string\">'60w'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从数据中可以看出，每辆车有很多属性，有相同的，有独立不同的。如果汽车多了，我们就会写很多类似的代码。构造函数工厂模式就是解决这一难题。代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\t\n<span class=\"token keyword\">const</span> card1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'红色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// &#123; color: '红色', name: '奔驰', price: '4000000' &#125;</span>\n<span class=\"token keyword\">const</span> card2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span><span class=\"token string\">'白色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"构造函数执行过程及原理\"><a href=\"#构造函数执行过程及原理\" class=\"headerlink\" title=\"构造函数执行过程及原理\"></a>构造函数执行过程及原理</h3><ul>\n<li>当<code>card1</code>用<code>new</code>关键字调用<code>card</code>方法时，会为<code>card1</code>开辟一个新内存，且<code>card</code>中的<code>this</code>指向该内存即<code>card1</code>.代码如下</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> card1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span><span class=\"token string\">'白色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// 开辟一个新的内存空间card1 并且card的this指向该空间</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"构造函数返回值\"><a href=\"#构造函数返回值\" class=\"headerlink\" title=\"构造函数返回值\"></a>构造函数返回值</h3><p>由于函数体内部的 <code>this</code> 指向新创建的内存空间，默认返回 <code>this</code> ，就相当于默认返回了该内存空间，也就是上图中的 <code>card1</code>。此时，<code>card1</code>的内存空间被变量 <code>card1</code> 所接受。也就是说 <code>card1</code> 这个变量，保存的内存地址就是 <code>card1</code>，同时被标记为 <code>card</code> 的实例。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>实例在调用构造函数时会开辟一个新的内存空间，前面提到过公共属性，例如<code>name</code>属性。如此便在内存空间都会有name属性，这无疑是很浪费内存的。这种情况可以采用原型+原型链的方法共享属性。无需单独创建。代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">card</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">color<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> pirce<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过在原型上添加公共属性`name` 让实例继承</span>\ncard<span class=\"token punctuation\">.</span> prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> card1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">card</span><span class=\"token punctuation\">(</span><span class=\"token string\">'红色'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123; color:'红色', price: 40000, name: '奔驰' &#125;\t\t</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"数据类型-gt-栈、堆\"><a href=\"#数据类型-gt-栈、堆\" class=\"headerlink\" title=\"数据类型 =&gt; 栈、堆\"></a>数据类型 =&gt; 栈、堆</h2><h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><h2 id=\"执行机制、事件循环、事件队列\"><a href=\"#执行机制、事件循环、事件队列\" class=\"headerlink\" title=\"执行机制、事件循环、事件队列\"></a>执行机制、事件循环、事件队列</h2><h3 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h3><p>JavaScript是单线程语言、</p>\n"},{"title":"JavaScript-初级","date":"2022-03-29T05:05:22.000Z","_content":"# JavaScript初级\n\n## 内置数据类型\n\n\n### 基本数据类型\n\n1. undefined\n2. Null\n3. Boolean\n4. String\n5. Number\n6. Symbol（ES6）\n7. BigInt（ES6)\n\n基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。\n\n### 引用数据类型（`Object`）\n\n1. Array\n2. RegExp\n3. Date\n4. Math\n5. Function\n\n种引用数据类型**Object**（Object本质上是由一组无序的名值对组成的）。里面包含 **function**、**Array**、**Date**等。JavaScript不支持任何创建自定义类型的机制，而所有值最终都将是上述 8 种数据类型之一。引用数据类型: 对象**Object**（包含普通对象-**Object**，数组对象-**Array**，正则对象-**RegExp**，日期对象-**Date**，数学函数-**Math**，函数对象-**Function**）\n\n引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。\n\n### 内存机制（JavaScript 中的数据是如何存储在内存中的）\n\n在 JavaScript 中，原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。\n\n在 JavaScript 的执行过程中， 主要有三种类型内存空间，分别是**代码空间**、**栈空间**、**堆空间**。其中的代码空间主要是存储可执行代码的，原始类型(**Number、String、Null、Undefined、Boolean、Symbol、BigInt**)的数据值都是直接保存在“栈”中的，引用类型(Object)的值是存放在“堆”中的。因此在栈空间中(执行上下文)，原始类型存储的是变量的值，而引用类型存储的是其在\"堆空间\"中的地址，当 JavaScript 需要访问该数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手流程。\n\n在编译过程中，如果 JavaScript 引擎判断到一个闭包，也会在堆空间创建换一个“**closure(fn)**”的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存闭包中的变量。所以闭包中的变量是存储在“堆空间”中的。\n\nJavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，堆空间很大，能存放很多大的数据，不过缺点是分配内存和回收内存都会占用一定的时间。因此需要“栈”和“堆”两种空间。\n\n## 数据类型检测\n\n### typeof\n\ntypeof 对于原始类型来说，除了 null 都可以显示正确的类型\n\n```javascript\n\nconsole.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object     []数组的数据类型在 typeof 中被解释为 object\nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object     null 的数据类型被 typeof 解释为 object\n\n```\n\n**typeof** 对于对象来说，除了函数都会显示 **object**，所以说 **typeof** 并不能准确判断变量到底是什么类型,所以想判断一个对象的正确类型，这时候可以考虑使用 **instanceof**\n\n### instanceof\n\n**instanceof** 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 基本类型(null): 使用 String(null)\n基本类型(string / number / boolean / undefined) + function: - 直接使用 typeof即可\n其余引用类型(Array / Date / RegExp Error): 调用toString后根据[object XXX]进行判断\n\n```javascript\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false  \nconsole.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true    \n// console.log(undefined instanceof Undefined);\n// console.log(null instanceof Null);\n```\n\n\n* **instanceof** 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型；\n* 而 **typeof** 也存在弊端，它虽然可以判断基础数据类型（**null** 除外），但是引用数据类型中，除了 **function** 类型以外，其他的也无法判断\n\n```javascript\n\n// 我们也可以试着实现一下 instanceof\nfunction instanceof(left, right) {\n// 获得类型的原型\nlet prototype = right.prototype\n// 获得对象的原型\nleft = left.__proto__\n// 判断对象的类型是否等于类型的原型\nwhile (true) {\nif (left === null)\nreturn false\nif (prototype === left)\nreturn true\nleft = left.__proto__\n}\n}\n\n```\n\n### constructor\n\n```javascript\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\n\n```\n\n这里有一个坑，如果我创建一个对象，更改它的原型，**constructor**就会变得不可靠了\n\n```javascript\nfunction Fn(){};\n\nFn.prototype=new Array();\n \nvar f=new Fn();\n \nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true \n```\n\n### Object.prototype.toString.call()\n\n **toString**() 是 **Object** 的原型方法，调用该方法，可以统一返回格式为 “**[object Xxx]**” 的字符串，其中 **Xxx** 就是对象的类型。对于 **Object** 对象，直接调用 **toString()** 就能返回 **[object Object]**；而对于其他对象，则需要通过 **call** 来调用，才能返回正确的类型信息。我们来看一下代码。\n\n```javascript\nObject.prototype.toString({})       // \"[object Object]\"\nObject.prototype.toString.call({})  // 同上结果，加上call也ok\nObject.prototype.toString.call(1)    // \"[object Number]\"\nObject.prototype.toString.call('1')  // \"[object String]\"\nObject.prototype.toString.call(true)  // \"[object Boolean]\"\nObject.prototype.toString.call(function(){})  // \"[object Function]\"\nObject.prototype.toString.call(null)   //\"[object Null]\"\nObject.prototype.toString.call(undefined) //\"[object Undefined]\"\nObject.prototype.toString.call(/123/g)    //\"[object RegExp]\"\nObject.prototype.toString.call(new Date()) //\"[object Date]\"\nObject.prototype.toString.call([])       //\"[object Array]\"\nObject.prototype.toString.call(document)  //\"[object HTMLDocument]\"\nObject.prototype.toString.call(window)   //\"[object Window]\"\n\n// 从上面这段代码可以看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。\n```\n\n实现一个全局通用的数据类型判断方法，来加深你的理解，代码如下\n\n```javascript\n\nfunction getType(obj){\n  let type  = typeof obj;\n  if (type !== \"object\") {    // 先进行typeof判断，如果是基础数据类型，直接返回\n    return type;\n  }\n  // 对于typeof返回结果是object的，再进行如下的判断，正则返回结果\n  return Object.prototype.toString.call(obj).replace(/^\\[object (\\S+)\\]$/, '$1');  // 注意正则中间\t有个空格\n}\n/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */\ngetType([])     // \"Array\" typeof []是object，因此toString返回\ngetType('123')  // \"string\" typeof 直接返回\ngetType(window) // \"Window\" toString返回\ngetType(null)   // \"Null\"首字母大写，typeof null是object，需toString来判断\ngetType(undefined)   // \"undefined\" typeof 直接返回\ngetType()            // \"undefined\" typeof 直接返回\ngetType(function(){}) // \"function\" typeof能判断，因此首字母小写\ngetType(/123/g)      //\"RegExp\" toString返回\n```\n\n### 小结\n\n* **typeof**\n\t* 直接在计算机底层基于数据类型的值（二进制）进行检测\n\t* **typeof** **null**为**object** 原因是对象存在在计算机中，都是以**000**开始的二进制存储，所以检测出来的结果是对象\n\t* **typeof** 普通对象/数组对象/正则对象/日期对象 都是object\n\t* **typeof NaN === 'number'**\n* **instanceof**\n\t* 检测当前实例是否属于这个类的\n\t* 底层机制：只要当前类出现在实例的原型上，结果都是true\n\t* 不能检测基本数据类型\n* **constructor**\n\t* 支持基本类型\n\t* constructor可以随便改，也不准\n* **Object.prototype.toString.call([val])**\n\t* 返回当前实例所属类信息\n\n 判断 **Target** 的类型，单单用 **typeof** 并无法完全满足，这其实并不是 **bug**，本质原因是 **JS** 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待:\n\n* 基本类型(**null**): 使用 **String(null)**\n* 基本类型(**string / number / boolean / undefined**) + **function**: - 直接使用 **typeof**即可\n* 其余引用类型(**Array / Date / RegExp Error**): 调用toString后根据**[object XXX]**进行判断\n\n\n\n","source":"_posts/JavaScript-primary.md","raw":"---\ntitle: JavaScript-初级\ndate: 2022-03-29 13:05:22\ntags: code\n---\n# JavaScript初级\n\n## 内置数据类型\n\n\n### 基本数据类型\n\n1. undefined\n2. Null\n3. Boolean\n4. String\n5. Number\n6. Symbol（ES6）\n7. BigInt（ES6)\n\n基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。\n\n### 引用数据类型（`Object`）\n\n1. Array\n2. RegExp\n3. Date\n4. Math\n5. Function\n\n种引用数据类型**Object**（Object本质上是由一组无序的名值对组成的）。里面包含 **function**、**Array**、**Date**等。JavaScript不支持任何创建自定义类型的机制，而所有值最终都将是上述 8 种数据类型之一。引用数据类型: 对象**Object**（包含普通对象-**Object**，数组对象-**Array**，正则对象-**RegExp**，日期对象-**Date**，数学函数-**Math**，函数对象-**Function**）\n\n引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。\n\n### 内存机制（JavaScript 中的数据是如何存储在内存中的）\n\n在 JavaScript 中，原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。\n\n在 JavaScript 的执行过程中， 主要有三种类型内存空间，分别是**代码空间**、**栈空间**、**堆空间**。其中的代码空间主要是存储可执行代码的，原始类型(**Number、String、Null、Undefined、Boolean、Symbol、BigInt**)的数据值都是直接保存在“栈”中的，引用类型(Object)的值是存放在“堆”中的。因此在栈空间中(执行上下文)，原始类型存储的是变量的值，而引用类型存储的是其在\"堆空间\"中的地址，当 JavaScript 需要访问该数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手流程。\n\n在编译过程中，如果 JavaScript 引擎判断到一个闭包，也会在堆空间创建换一个“**closure(fn)**”的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存闭包中的变量。所以闭包中的变量是存储在“堆空间”中的。\n\nJavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，堆空间很大，能存放很多大的数据，不过缺点是分配内存和回收内存都会占用一定的时间。因此需要“栈”和“堆”两种空间。\n\n## 数据类型检测\n\n### typeof\n\ntypeof 对于原始类型来说，除了 null 都可以显示正确的类型\n\n```javascript\n\nconsole.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object     []数组的数据类型在 typeof 中被解释为 object\nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object     null 的数据类型被 typeof 解释为 object\n\n```\n\n**typeof** 对于对象来说，除了函数都会显示 **object**，所以说 **typeof** 并不能准确判断变量到底是什么类型,所以想判断一个对象的正确类型，这时候可以考虑使用 **instanceof**\n\n### instanceof\n\n**instanceof** 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 基本类型(null): 使用 String(null)\n基本类型(string / number / boolean / undefined) + function: - 直接使用 typeof即可\n其余引用类型(Array / Date / RegExp Error): 调用toString后根据[object XXX]进行判断\n\n```javascript\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false  \nconsole.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true    \n// console.log(undefined instanceof Undefined);\n// console.log(null instanceof Null);\n```\n\n\n* **instanceof** 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型；\n* 而 **typeof** 也存在弊端，它虽然可以判断基础数据类型（**null** 除外），但是引用数据类型中，除了 **function** 类型以外，其他的也无法判断\n\n```javascript\n\n// 我们也可以试着实现一下 instanceof\nfunction instanceof(left, right) {\n// 获得类型的原型\nlet prototype = right.prototype\n// 获得对象的原型\nleft = left.__proto__\n// 判断对象的类型是否等于类型的原型\nwhile (true) {\nif (left === null)\nreturn false\nif (prototype === left)\nreturn true\nleft = left.__proto__\n}\n}\n\n```\n\n### constructor\n\n```javascript\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\n\n```\n\n这里有一个坑，如果我创建一个对象，更改它的原型，**constructor**就会变得不可靠了\n\n```javascript\nfunction Fn(){};\n\nFn.prototype=new Array();\n \nvar f=new Fn();\n \nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true \n```\n\n### Object.prototype.toString.call()\n\n **toString**() 是 **Object** 的原型方法，调用该方法，可以统一返回格式为 “**[object Xxx]**” 的字符串，其中 **Xxx** 就是对象的类型。对于 **Object** 对象，直接调用 **toString()** 就能返回 **[object Object]**；而对于其他对象，则需要通过 **call** 来调用，才能返回正确的类型信息。我们来看一下代码。\n\n```javascript\nObject.prototype.toString({})       // \"[object Object]\"\nObject.prototype.toString.call({})  // 同上结果，加上call也ok\nObject.prototype.toString.call(1)    // \"[object Number]\"\nObject.prototype.toString.call('1')  // \"[object String]\"\nObject.prototype.toString.call(true)  // \"[object Boolean]\"\nObject.prototype.toString.call(function(){})  // \"[object Function]\"\nObject.prototype.toString.call(null)   //\"[object Null]\"\nObject.prototype.toString.call(undefined) //\"[object Undefined]\"\nObject.prototype.toString.call(/123/g)    //\"[object RegExp]\"\nObject.prototype.toString.call(new Date()) //\"[object Date]\"\nObject.prototype.toString.call([])       //\"[object Array]\"\nObject.prototype.toString.call(document)  //\"[object HTMLDocument]\"\nObject.prototype.toString.call(window)   //\"[object Window]\"\n\n// 从上面这段代码可以看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。\n```\n\n实现一个全局通用的数据类型判断方法，来加深你的理解，代码如下\n\n```javascript\n\nfunction getType(obj){\n  let type  = typeof obj;\n  if (type !== \"object\") {    // 先进行typeof判断，如果是基础数据类型，直接返回\n    return type;\n  }\n  // 对于typeof返回结果是object的，再进行如下的判断，正则返回结果\n  return Object.prototype.toString.call(obj).replace(/^\\[object (\\S+)\\]$/, '$1');  // 注意正则中间\t有个空格\n}\n/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */\ngetType([])     // \"Array\" typeof []是object，因此toString返回\ngetType('123')  // \"string\" typeof 直接返回\ngetType(window) // \"Window\" toString返回\ngetType(null)   // \"Null\"首字母大写，typeof null是object，需toString来判断\ngetType(undefined)   // \"undefined\" typeof 直接返回\ngetType()            // \"undefined\" typeof 直接返回\ngetType(function(){}) // \"function\" typeof能判断，因此首字母小写\ngetType(/123/g)      //\"RegExp\" toString返回\n```\n\n### 小结\n\n* **typeof**\n\t* 直接在计算机底层基于数据类型的值（二进制）进行检测\n\t* **typeof** **null**为**object** 原因是对象存在在计算机中，都是以**000**开始的二进制存储，所以检测出来的结果是对象\n\t* **typeof** 普通对象/数组对象/正则对象/日期对象 都是object\n\t* **typeof NaN === 'number'**\n* **instanceof**\n\t* 检测当前实例是否属于这个类的\n\t* 底层机制：只要当前类出现在实例的原型上，结果都是true\n\t* 不能检测基本数据类型\n* **constructor**\n\t* 支持基本类型\n\t* constructor可以随便改，也不准\n* **Object.prototype.toString.call([val])**\n\t* 返回当前实例所属类信息\n\n 判断 **Target** 的类型，单单用 **typeof** 并无法完全满足，这其实并不是 **bug**，本质原因是 **JS** 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待:\n\n* 基本类型(**null**): 使用 **String(null)**\n* 基本类型(**string / number / boolean / undefined**) + **function**: - 直接使用 **typeof**即可\n* 其余引用类型(**Array / Date / RegExp Error**): 调用toString后根据**[object XXX]**进行判断\n\n\n\n","slug":"JavaScript-primary","published":1,"updated":"2022-03-29T10:28:11.707Z","_id":"cl1boe2660005rb0528av1fby","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"JavaScript初级\"><a href=\"#JavaScript初级\" class=\"headerlink\" title=\"JavaScript初级\"></a>JavaScript初级</h1><h2 id=\"内置数据类型\"><a href=\"#内置数据类型\" class=\"headerlink\" title=\"内置数据类型\"></a>内置数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ol>\n<li>undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Symbol（ES6）</li>\n<li>BigInt（ES6)</li>\n</ol>\n<p>基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。</p>\n<h3 id=\"引用数据类型（Object）\"><a href=\"#引用数据类型（Object）\" class=\"headerlink\" title=\"引用数据类型（Object）\"></a>引用数据类型（<code>Object</code>）</h3><ol>\n<li>Array</li>\n<li>RegExp</li>\n<li>Date</li>\n<li>Math</li>\n<li>Function</li>\n</ol>\n<p>种引用数据类型<strong>Object</strong>（Object本质上是由一组无序的名值对组成的）。里面包含 <strong>function</strong>、<strong>Array</strong>、<strong>Date</strong>等。JavaScript不支持任何创建自定义类型的机制，而所有值最终都将是上述 8 种数据类型之一。引用数据类型: 对象<strong>Object</strong>（包含普通对象-<strong>Object</strong>，数组对象-<strong>Array</strong>，正则对象-<strong>RegExp</strong>，日期对象-<strong>Date</strong>，数学函数-<strong>Math</strong>，函数对象-<strong>Function</strong>）</p>\n<p>引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p>\n<h3 id=\"内存机制（JavaScript-中的数据是如何存储在内存中的）\"><a href=\"#内存机制（JavaScript-中的数据是如何存储在内存中的）\" class=\"headerlink\" title=\"内存机制（JavaScript 中的数据是如何存储在内存中的）\"></a>内存机制（JavaScript 中的数据是如何存储在内存中的）</h3><p>在 JavaScript 中，原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。</p>\n<p>在 JavaScript 的执行过程中， 主要有三种类型内存空间，分别是<strong>代码空间</strong>、<strong>栈空间</strong>、<strong>堆空间</strong>。其中的代码空间主要是存储可执行代码的，原始类型(<strong>Number、String、Null、Undefined、Boolean、Symbol、BigInt</strong>)的数据值都是直接保存在“栈”中的，引用类型(Object)的值是存放在“堆”中的。因此在栈空间中(执行上下文)，原始类型存储的是变量的值，而引用类型存储的是其在”堆空间”中的地址，当 JavaScript 需要访问该数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手流程。</p>\n<p>在编译过程中，如果 JavaScript 引擎判断到一个闭包，也会在堆空间创建换一个“**closure(fn)**”的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存闭包中的变量。所以闭包中的变量是存储在“堆空间”中的。</p>\n<p>JavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，堆空间很大，能存放很多大的数据，不过缺点是分配内存和回收内存都会占用一定的时间。因此需要“栈”和“堆”两种空间。</p>\n<h2 id=\"数据类型检测\"><a href=\"#数据类型检测\" class=\"headerlink\" title=\"数据类型检测\"></a>数据类型检测</h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>typeof 对于原始类型来说，除了 null 都可以显示正确的类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// boolean</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object     []数组的数据类型在 typeof 中被解释为 object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// object     null 的数据类型被 typeof 解释为 object</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>typeof</strong> 对于对象来说，除了函数都会显示 <strong>object</strong>，所以说 <strong>typeof</strong> 并不能准确判断变量到底是什么类型,所以想判断一个对象的正确类型，这时候可以考虑使用 <strong>instanceof</strong></p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p><strong>instanceof</strong> 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 基本类型(null): 使用 String(null)<br>基本类型(string / number / boolean / undefined) + function: - 直接使用 typeof即可<br>其余引用类型(Array / Date / RegExp Error): 调用toString后根据[object XXX]进行判断</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false  </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// true    </span>\n<span class=\"token comment\">// console.log(undefined instanceof Undefined);</span>\n<span class=\"token comment\">// console.log(null instanceof Null);</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<ul>\n<li><strong>instanceof</strong> 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型；</li>\n<li>而 <strong>typeof</strong> 也存在弊端，它虽然可以判断基础数据类型（<strong>null</strong> 除外），但是引用数据类型中，除了 <strong>function</strong> 类型以外，其他的也无法判断</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 我们也可以试着实现一下 instanceof</span>\n<span class=\"token keyword\">function</span> <span class=\"token keyword\">instanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 获得类型的原型</span>\n<span class=\"token keyword\">let</span> prototype <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>prototype\n<span class=\"token comment\">// 获得对象的原型</span>\nleft <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>__proto__\n<span class=\"token comment\">// 判断对象的类型是否等于类型的原型</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prototype <span class=\"token operator\">===</span> left<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\nleft <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>__proto__\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里有一个坑，如果我创建一个对象，更改它的原型，<strong>constructor</strong>就会变得不可靠了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Fn</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">var</span> f<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><p> <strong>toString</strong>() 是 <strong>Object</strong> 的原型方法，调用该方法，可以统一返回格式为 “**[object Xxx]**” 的字符串，其中 <strong>Xxx</strong> 就是对象的类型。对于 <strong>Object</strong> 对象，直接调用 <strong>toString()</strong> 就能返回 **[object Object]**；而对于其他对象，则需要通过 <strong>call</strong> 来调用，才能返回正确的类型信息。我们来看一下代码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// \"[object Object]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 同上结果，加上call也ok</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[object Boolean]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[object Function]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//\"[object Null]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"[object Undefined]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">123</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//\"[object RegExp]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"[object Date]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">//\"[object Array]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//\"[object HTMLDocument]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//\"[object Window]\"</span>\n\n<span class=\"token comment\">// 从上面这段代码可以看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实现一个全局通用的数据类型判断方法，来加深你的理解，代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> type  <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 先进行typeof判断，如果是基础数据类型，直接返回</span>\n    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\[object (\\S+)\\]$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意正则中间\t有个空格</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \"Array\" typeof []是object，因此toString返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"string\" typeof 直接返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Window\" toString返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"Null\"首字母大写，typeof null是object，需toString来判断</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"undefined\" typeof 直接返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// \"undefined\" typeof 直接返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"function\" typeof能判断，因此首字母小写</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">123</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">//\"RegExp\" toString返回</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><strong>typeof</strong><ul>\n<li>直接在计算机底层基于数据类型的值（二进制）进行检测</li>\n<li><strong>typeof</strong> <strong>null</strong>为<strong>object</strong> 原因是对象存在在计算机中，都是以<strong>000</strong>开始的二进制存储，所以检测出来的结果是对象</li>\n<li><strong>typeof</strong> 普通对象/数组对象/正则对象/日期对象 都是object</li>\n<li><strong>typeof NaN === ‘number’</strong></li>\n</ul>\n</li>\n<li><strong>instanceof</strong><ul>\n<li>检测当前实例是否属于这个类的</li>\n<li>底层机制：只要当前类出现在实例的原型上，结果都是true</li>\n<li>不能检测基本数据类型</li>\n</ul>\n</li>\n<li><strong>constructor</strong><ul>\n<li>支持基本类型</li>\n<li>constructor可以随便改，也不准</li>\n</ul>\n</li>\n<li><strong>Object.prototype.toString.call([val])</strong><ul>\n<li>返回当前实例所属类信息</li>\n</ul>\n</li>\n</ul>\n<p> 判断 <strong>Target</strong> 的类型，单单用 <strong>typeof</strong> 并无法完全满足，这其实并不是 <strong>bug</strong>，本质原因是 <strong>JS</strong> 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待:</p>\n<ul>\n<li>基本类型(<strong>null</strong>): 使用 <strong>String(null)</strong></li>\n<li>基本类型(<strong>string / number / boolean / undefined</strong>) + <strong>function</strong>: - 直接使用 <strong>typeof</strong>即可</li>\n<li>其余引用类型(<strong>Array / Date / RegExp Error</strong>): 调用toString后根据**[object XXX]**进行判断</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript初级\"><a href=\"#JavaScript初级\" class=\"headerlink\" title=\"JavaScript初级\"></a>JavaScript初级</h1><h2 id=\"内置数据类型\"><a href=\"#内置数据类型\" class=\"headerlink\" title=\"内置数据类型\"></a>内置数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ol>\n<li>undefined</li>\n<li>Null</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Symbol（ES6）</li>\n<li>BigInt（ES6)</li>\n</ol>\n<p>基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。</p>\n<h3 id=\"引用数据类型（Object）\"><a href=\"#引用数据类型（Object）\" class=\"headerlink\" title=\"引用数据类型（Object）\"></a>引用数据类型（<code>Object</code>）</h3><ol>\n<li>Array</li>\n<li>RegExp</li>\n<li>Date</li>\n<li>Math</li>\n<li>Function</li>\n</ol>\n<p>种引用数据类型<strong>Object</strong>（Object本质上是由一组无序的名值对组成的）。里面包含 <strong>function</strong>、<strong>Array</strong>、<strong>Date</strong>等。JavaScript不支持任何创建自定义类型的机制，而所有值最终都将是上述 8 种数据类型之一。引用数据类型: 对象<strong>Object</strong>（包含普通对象-<strong>Object</strong>，数组对象-<strong>Array</strong>，正则对象-<strong>RegExp</strong>，日期对象-<strong>Date</strong>，数学函数-<strong>Math</strong>，函数对象-<strong>Function</strong>）</p>\n<p>引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</p>\n<h3 id=\"内存机制（JavaScript-中的数据是如何存储在内存中的）\"><a href=\"#内存机制（JavaScript-中的数据是如何存储在内存中的）\" class=\"headerlink\" title=\"内存机制（JavaScript 中的数据是如何存储在内存中的）\"></a>内存机制（JavaScript 中的数据是如何存储在内存中的）</h3><p>在 JavaScript 中，原始类型的赋值会完整复制变量值，而引用类型的赋值是复制引用地址。</p>\n<p>在 JavaScript 的执行过程中， 主要有三种类型内存空间，分别是<strong>代码空间</strong>、<strong>栈空间</strong>、<strong>堆空间</strong>。其中的代码空间主要是存储可执行代码的，原始类型(<strong>Number、String、Null、Undefined、Boolean、Symbol、BigInt</strong>)的数据值都是直接保存在“栈”中的，引用类型(Object)的值是存放在“堆”中的。因此在栈空间中(执行上下文)，原始类型存储的是变量的值，而引用类型存储的是其在”堆空间”中的地址，当 JavaScript 需要访问该数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手流程。</p>\n<p>在编译过程中，如果 JavaScript 引擎判断到一个闭包，也会在堆空间创建换一个“**closure(fn)**”的对象（这是一个内部对象，JavaScript 是无法访问的），用来保存闭包中的变量。所以闭包中的变量是存储在“堆空间”中的。</p>\n<p>JavaScript 引擎需要用栈来维护程序执行期间上下文的状态，如果栈空间大了话，所有的数据都存放在栈空间里面，那么会影响到上下文切换的效率，进而又影响到整个程序的执行效率。通常情况下，栈空间都不会设置太大，主要用来存放一些原始类型的小数据。而引用类型的数据占用的空间都比较大，所以这一类数据会被存放到堆中，堆空间很大，能存放很多大的数据，不过缺点是分配内存和回收内存都会占用一定的时间。因此需要“栈”和“堆”两种空间。</p>\n<h2 id=\"数据类型检测\"><a href=\"#数据类型检测\" class=\"headerlink\" title=\"数据类型检测\"></a>数据类型检测</h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>typeof 对于原始类型来说，除了 null 都可以显示正确的类型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// boolean</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object     []数组的数据类型在 typeof 中被解释为 object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// function</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// object     null 的数据类型被 typeof 解释为 object</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>typeof</strong> 对于对象来说，除了函数都会显示 <strong>object</strong>，所以说 <strong>typeof</strong> 并不能准确判断变量到底是什么类型,所以想判断一个对象的正确类型，这时候可以考虑使用 <strong>instanceof</strong></p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p><strong>instanceof</strong> 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 基本类型(null): 使用 String(null)<br>基本类型(string / number / boolean / undefined) + function: - 直接使用 typeof即可<br>其余引用类型(Array / Date / RegExp Error): 调用toString后根据[object XXX]进行判断</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false  </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// true    </span>\n<span class=\"token comment\">// console.log(undefined instanceof Undefined);</span>\n<span class=\"token comment\">// console.log(null instanceof Null);</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<ul>\n<li><strong>instanceof</strong> 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型；</li>\n<li>而 <strong>typeof</strong> 也存在弊端，它虽然可以判断基础数据类型（<strong>null</strong> 除外），但是引用数据类型中，除了 <strong>function</strong> 类型以外，其他的也无法判断</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token comment\">// 我们也可以试着实现一下 instanceof</span>\n<span class=\"token keyword\">function</span> <span class=\"token keyword\">instanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// 获得类型的原型</span>\n<span class=\"token keyword\">let</span> prototype <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>prototype\n<span class=\"token comment\">// 获得对象的原型</span>\nleft <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>__proto__\n<span class=\"token comment\">// 判断对象的类型是否等于类型的原型</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prototype <span class=\"token operator\">===</span> left<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\nleft <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>__proto__\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里有一个坑，如果我创建一个对象，更改它的原型，<strong>constructor</strong>就会变得不可靠了</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Fn</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">var</span> f<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><p> <strong>toString</strong>() 是 <strong>Object</strong> 的原型方法，调用该方法，可以统一返回格式为 “**[object Xxx]**” 的字符串，其中 <strong>Xxx</strong> 就是对象的类型。对于 <strong>Object</strong> 对象，直接调用 <strong>toString()</strong> 就能返回 **[object Object]**；而对于其他对象，则需要通过 <strong>call</strong> 来调用，才能返回正确的类型信息。我们来看一下代码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// \"[object Object]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 同上结果，加上call也ok</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// \"[object Number]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[object String]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[object Boolean]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[object Function]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//\"[object Null]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"[object Undefined]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">123</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//\"[object RegExp]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"[object Date]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">//\"[object Array]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//\"[object HTMLDocument]\"</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span>   <span class=\"token comment\">//\"[object Window]\"</span>\n\n<span class=\"token comment\">// 从上面这段代码可以看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实现一个全局通用的数据类型判断方法，来加深你的理解，代码如下</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> type  <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 先进行typeof判断，如果是基础数据类型，直接返回</span>\n    <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\[object (\\S+)\\]$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意正则中间\t有个空格</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \"Array\" typeof []是object，因此toString返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"string\" typeof 直接返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Window\" toString返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"Null\"首字母大写，typeof null是object，需toString来判断</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"undefined\" typeof 直接返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// \"undefined\" typeof 直接返回</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"function\" typeof能判断，因此首字母小写</span>\n<span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">123</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">//\"RegExp\" toString返回</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><strong>typeof</strong><ul>\n<li>直接在计算机底层基于数据类型的值（二进制）进行检测</li>\n<li><strong>typeof</strong> <strong>null</strong>为<strong>object</strong> 原因是对象存在在计算机中，都是以<strong>000</strong>开始的二进制存储，所以检测出来的结果是对象</li>\n<li><strong>typeof</strong> 普通对象/数组对象/正则对象/日期对象 都是object</li>\n<li><strong>typeof NaN === ‘number’</strong></li>\n</ul>\n</li>\n<li><strong>instanceof</strong><ul>\n<li>检测当前实例是否属于这个类的</li>\n<li>底层机制：只要当前类出现在实例的原型上，结果都是true</li>\n<li>不能检测基本数据类型</li>\n</ul>\n</li>\n<li><strong>constructor</strong><ul>\n<li>支持基本类型</li>\n<li>constructor可以随便改，也不准</li>\n</ul>\n</li>\n<li><strong>Object.prototype.toString.call([val])</strong><ul>\n<li>返回当前实例所属类信息</li>\n</ul>\n</li>\n</ul>\n<p> 判断 <strong>Target</strong> 的类型，单单用 <strong>typeof</strong> 并无法完全满足，这其实并不是 <strong>bug</strong>，本质原因是 <strong>JS</strong> 的万物皆对象的理论。因此要真正完美判断时，我们需要区分对待:</p>\n<ul>\n<li>基本类型(<strong>null</strong>): 使用 <strong>String(null)</strong></li>\n<li>基本类型(<strong>string / number / boolean / undefined</strong>) + <strong>function</strong>: - 直接使用 <strong>typeof</strong>即可</li>\n<li>其余引用类型(<strong>Array / Date / RegExp Error</strong>): 调用toString后根据**[object XXX]**进行判断</li>\n</ul>\n"},{"title":"applet","date":"2022-03-29T05:27:51.000Z","_content":"\n# 小程序注册、迁移\n## 小程序注册（企业）\n\n### 填写主体信息并选择验证方式\n#### 支付验证\n\n需要用公司的对公账户向腾讯公司打款来验证主体身份，打款信息在提交主体信息后可以查看到。请根据页面提示，向指定的收款帐号汇入指定金额。\n\n\n#### 微信认证\n\n\n通过微信认证验证主体身份，需支付300元认证费。认证通过前，小程序部分功能暂无法使用\n\n\n\n\n\n## 小程序迁移流程注意事项\n\n### 迁移流程\n\n1. 提交申请（广告主资金清零解绑、提交申请函、公证书、双方扫码认证）\n2. 解除微信支付原主体商户号\n3. 管理员确认迁移\n\n### 注意事项\n\n* 迁移目标主体不支持个人\n* 原主体不涉及资金相关功能流程会简化许多，如果支付功能尽可能先添加目标主体账户在做迁移。\n* 仅支持绑定原、目标主体的商户号的小程序迁移，若绑定了原、目标主体以外的商户号，暂不支持。在迁移流程中，若新增绑定了除原、目标主体以外的主体商户号，会导致迁移失败。\n* 需双方填写提交迁移材料并上传（重点）\n* 在迁移后，原有服务类目会失效，需重新填写提交审核（切拥有相关服务类目所需资质），如若成功迁移7天后线上代码与实际服务类目不符相关API权限将会失效并有小程序被下架风险。\n* 迁移如果选择修改小程序名，原小程序名会立即被释放无保护期。\n* 迁移过程用户无感\n* 开通的微信支付的企业，需要解绑原有商户号，绑定新主体商户号。开通了广告主的小程序，需要将账户余额清空。绑定了支付或广告服务商的小程序不支持主体迁移\n* 迁移费用300，无论成功与否\n","source":"_posts/applet.md","raw":"---\ntitle: applet\ndate: 2022-03-29 13:27:51\ntags: 工作\n---\n\n# 小程序注册、迁移\n## 小程序注册（企业）\n\n### 填写主体信息并选择验证方式\n#### 支付验证\n\n需要用公司的对公账户向腾讯公司打款来验证主体身份，打款信息在提交主体信息后可以查看到。请根据页面提示，向指定的收款帐号汇入指定金额。\n\n\n#### 微信认证\n\n\n通过微信认证验证主体身份，需支付300元认证费。认证通过前，小程序部分功能暂无法使用\n\n\n\n\n\n## 小程序迁移流程注意事项\n\n### 迁移流程\n\n1. 提交申请（广告主资金清零解绑、提交申请函、公证书、双方扫码认证）\n2. 解除微信支付原主体商户号\n3. 管理员确认迁移\n\n### 注意事项\n\n* 迁移目标主体不支持个人\n* 原主体不涉及资金相关功能流程会简化许多，如果支付功能尽可能先添加目标主体账户在做迁移。\n* 仅支持绑定原、目标主体的商户号的小程序迁移，若绑定了原、目标主体以外的商户号，暂不支持。在迁移流程中，若新增绑定了除原、目标主体以外的主体商户号，会导致迁移失败。\n* 需双方填写提交迁移材料并上传（重点）\n* 在迁移后，原有服务类目会失效，需重新填写提交审核（切拥有相关服务类目所需资质），如若成功迁移7天后线上代码与实际服务类目不符相关API权限将会失效并有小程序被下架风险。\n* 迁移如果选择修改小程序名，原小程序名会立即被释放无保护期。\n* 迁移过程用户无感\n* 开通的微信支付的企业，需要解绑原有商户号，绑定新主体商户号。开通了广告主的小程序，需要将账户余额清空。绑定了支付或广告服务商的小程序不支持主体迁移\n* 迁移费用300，无论成功与否\n","slug":"applet","published":1,"updated":"2022-03-29T09:54:55.181Z","_id":"cl1bp6yu20001qf054afb09le","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"小程序注册、迁移\"><a href=\"#小程序注册、迁移\" class=\"headerlink\" title=\"小程序注册、迁移\"></a>小程序注册、迁移</h1><h2 id=\"小程序注册（企业）\"><a href=\"#小程序注册（企业）\" class=\"headerlink\" title=\"小程序注册（企业）\"></a>小程序注册（企业）</h2><h3 id=\"填写主体信息并选择验证方式\"><a href=\"#填写主体信息并选择验证方式\" class=\"headerlink\" title=\"填写主体信息并选择验证方式\"></a>填写主体信息并选择验证方式</h3><h4 id=\"支付验证\"><a href=\"#支付验证\" class=\"headerlink\" title=\"支付验证\"></a>支付验证</h4><p>需要用公司的对公账户向腾讯公司打款来验证主体身份，打款信息在提交主体信息后可以查看到。请根据页面提示，向指定的收款帐号汇入指定金额。</p>\n<h4 id=\"微信认证\"><a href=\"#微信认证\" class=\"headerlink\" title=\"微信认证\"></a>微信认证</h4><p>通过微信认证验证主体身份，需支付300元认证费。认证通过前，小程序部分功能暂无法使用</p>\n<h2 id=\"小程序迁移流程注意事项\"><a href=\"#小程序迁移流程注意事项\" class=\"headerlink\" title=\"小程序迁移流程注意事项\"></a>小程序迁移流程注意事项</h2><h3 id=\"迁移流程\"><a href=\"#迁移流程\" class=\"headerlink\" title=\"迁移流程\"></a>迁移流程</h3><ol>\n<li>提交申请（广告主资金清零解绑、提交申请函、公证书、双方扫码认证）</li>\n<li>解除微信支付原主体商户号</li>\n<li>管理员确认迁移</li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>迁移目标主体不支持个人</li>\n<li>原主体不涉及资金相关功能流程会简化许多，如果支付功能尽可能先添加目标主体账户在做迁移。</li>\n<li>仅支持绑定原、目标主体的商户号的小程序迁移，若绑定了原、目标主体以外的商户号，暂不支持。在迁移流程中，若新增绑定了除原、目标主体以外的主体商户号，会导致迁移失败。</li>\n<li>需双方填写提交迁移材料并上传（重点）</li>\n<li>在迁移后，原有服务类目会失效，需重新填写提交审核（切拥有相关服务类目所需资质），如若成功迁移7天后线上代码与实际服务类目不符相关API权限将会失效并有小程序被下架风险。</li>\n<li>迁移如果选择修改小程序名，原小程序名会立即被释放无保护期。</li>\n<li>迁移过程用户无感</li>\n<li>开通的微信支付的企业，需要解绑原有商户号，绑定新主体商户号。开通了广告主的小程序，需要将账户余额清空。绑定了支付或广告服务商的小程序不支持主体迁移</li>\n<li>迁移费用300，无论成功与否</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"小程序注册、迁移\"><a href=\"#小程序注册、迁移\" class=\"headerlink\" title=\"小程序注册、迁移\"></a>小程序注册、迁移</h1><h2 id=\"小程序注册（企业）\"><a href=\"#小程序注册（企业）\" class=\"headerlink\" title=\"小程序注册（企业）\"></a>小程序注册（企业）</h2><h3 id=\"填写主体信息并选择验证方式\"><a href=\"#填写主体信息并选择验证方式\" class=\"headerlink\" title=\"填写主体信息并选择验证方式\"></a>填写主体信息并选择验证方式</h3><h4 id=\"支付验证\"><a href=\"#支付验证\" class=\"headerlink\" title=\"支付验证\"></a>支付验证</h4><p>需要用公司的对公账户向腾讯公司打款来验证主体身份，打款信息在提交主体信息后可以查看到。请根据页面提示，向指定的收款帐号汇入指定金额。</p>\n<h4 id=\"微信认证\"><a href=\"#微信认证\" class=\"headerlink\" title=\"微信认证\"></a>微信认证</h4><p>通过微信认证验证主体身份，需支付300元认证费。认证通过前，小程序部分功能暂无法使用</p>\n<h2 id=\"小程序迁移流程注意事项\"><a href=\"#小程序迁移流程注意事项\" class=\"headerlink\" title=\"小程序迁移流程注意事项\"></a>小程序迁移流程注意事项</h2><h3 id=\"迁移流程\"><a href=\"#迁移流程\" class=\"headerlink\" title=\"迁移流程\"></a>迁移流程</h3><ol>\n<li>提交申请（广告主资金清零解绑、提交申请函、公证书、双方扫码认证）</li>\n<li>解除微信支付原主体商户号</li>\n<li>管理员确认迁移</li>\n</ol>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>迁移目标主体不支持个人</li>\n<li>原主体不涉及资金相关功能流程会简化许多，如果支付功能尽可能先添加目标主体账户在做迁移。</li>\n<li>仅支持绑定原、目标主体的商户号的小程序迁移，若绑定了原、目标主体以外的商户号，暂不支持。在迁移流程中，若新增绑定了除原、目标主体以外的主体商户号，会导致迁移失败。</li>\n<li>需双方填写提交迁移材料并上传（重点）</li>\n<li>在迁移后，原有服务类目会失效，需重新填写提交审核（切拥有相关服务类目所需资质），如若成功迁移7天后线上代码与实际服务类目不符相关API权限将会失效并有小程序被下架风险。</li>\n<li>迁移如果选择修改小程序名，原小程序名会立即被释放无保护期。</li>\n<li>迁移过程用户无感</li>\n<li>开通的微信支付的企业，需要解绑原有商户号，绑定新主体商户号。开通了广告主的小程序，需要将账户余额清空。绑定了支付或广告服务商的小程序不支持主体迁移</li>\n<li>迁移费用300，无论成功与否</li>\n</ul>\n"},{"title":"前端工程化","date":"2022-03-29T10:26:40.000Z","_content":"\n# 浅谈前端工程化","source":"_posts/engineered.md","raw":"---\ntitle: 前端工程化\ndate: 2022-03-29 18:26:40\ntags: [观点与感想,工作]\n---\n\n# 浅谈前端工程化","slug":"engineered","published":1,"updated":"2022-03-29T10:32:09.998Z","_id":"cl1bzv9pu0001ki058rh8drmh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"浅谈前端工程化\"><a href=\"#浅谈前端工程化\" class=\"headerlink\" title=\"浅谈前端工程化\"></a>浅谈前端工程化</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浅谈前端工程化\"><a href=\"#浅谈前端工程化\" class=\"headerlink\" title=\"浅谈前端工程化\"></a>浅谈前端工程化</h1>"},{"title":"软件工程的难点","date":"2022-03-29T10:30:15.000Z","_content":"<!-- 结合编码冲突与业务不通 -->","source":"_posts/engineered-software.md","raw":"---\ntitle: 软件工程的难点\ndate: 2022-03-29 18:30:15\ntags: [观点与感想,工作]\n---\n<!-- 结合编码冲突与业务不通 -->","slug":"engineered-software","published":1,"updated":"2022-03-29T10:32:06.407Z","_id":"cl1bzzv0o000eki05dwvb784k","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- 结合编码冲突与业务不通 -->","site":{"data":{}},"excerpt":"","more":"<!-- 结合编码冲突与业务不通 -->"},{"title":"Web历史与趋势","date":"2022-03-29T10:30:32.000Z","_content":"","source":"_posts/web-his.md","raw":"---\ntitle: Web历史与趋势\ndate: 2022-03-29 18:30:32\ntags: [观点与感想,工作]\n---\n","slug":"web-his","published":1,"updated":"2022-03-29T10:32:52.914Z","_id":"cl1c0087u000fki05gsmj7571","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl1a9lyjy0001hy054pt22y44","tag_id":"cl1a9lyk20003hy05efo5296g","_id":"cl1a9lyk30005hy05fla6di30"},{"post_id":"cl1bocv9x0003rb050gnmbfmw","tag_id":"cl1a9lyk20003hy05efo5296g","_id":"cl1bocv9z0004rb05gg6vhgc3"},{"post_id":"cl1bp6yu20001qf054afb09le","tag_id":"cl1a9lyk00002hy05cmqy93n7","_id":"cl1byqew80000ki0590cf23rr"},{"post_id":"cl1boe2660005rb0528av1fby","tag_id":"cl1a9lyk20003hy05efo5296g","_id":"cl1bzx7cj0007ki052ctd0ovt"},{"post_id":"cl1bzv9pu0001ki058rh8drmh","tag_id":"cl1bzyded000aki0556sl8u64","_id":"cl1bzydee000cki05412xap6f"},{"post_id":"cl1bzv9pu0001ki058rh8drmh","tag_id":"cl1a9lyk00002hy05cmqy93n7","_id":"cl1bzydef000dki058yt2ftgo"},{"post_id":"cl1bzzv0o000eki05dwvb784k","tag_id":"cl1bzyded000aki0556sl8u64","_id":"cl1c02435000hki058b3e51tb"},{"post_id":"cl1bzzv0o000eki05dwvb784k","tag_id":"cl1a9lyk00002hy05cmqy93n7","_id":"cl1c02435000iki050cl54ouh"},{"post_id":"cl1c0087u000fki05gsmj7571","tag_id":"cl1bzyded000aki0556sl8u64","_id":"cl1c038by000jki055if74ngz"},{"post_id":"cl1c0087u000fki05gsmj7571","tag_id":"cl1a9lyk00002hy05cmqy93n7","_id":"cl1c038by000kki05hmmc6fuy"}],"Tag":[{"name":"工作","_id":"cl1a9lyk00002hy05cmqy93n7"},{"name":"code","_id":"cl1a9lyk20003hy05efo5296g"},{"name":"applet","_id":"cl1bp75um0002qf055lpkghi5"},{"name":"code 观点与感想","_id":"cl1bzwmvu0003ki05ec1chtbg"},{"name":"code 观点与感想 工作","_id":"cl1bzx0cl0005ki05cxzgd8gp"},{"name":"code,观点与感想,工作","_id":"cl1bzxzc70008ki05gtt546b4"},{"name":"观点与感想","_id":"cl1bzyded000aki0556sl8u64"}]}}